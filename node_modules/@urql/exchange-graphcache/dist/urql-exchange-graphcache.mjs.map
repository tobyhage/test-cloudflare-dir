{"version":3,"file":"urql-exchange-graphcache.mjs","sources":["../src/helpers/help.ts","../src/ast/node.ts","../src/ast/variables.ts","../src/ast/traversal.ts","../src/ast/schemaPredicates.ts","../src/store/keys.ts","../src/store/data.ts","../src/operations/shared.ts","../src/operations/query.ts","../src/operations/write.ts","../src/store/store.ts","../src/ast/schema.ts","../src/operations/invalidate.ts","../src/helpers/operation.ts","../src/cacheExchange.ts","../src/offlineExchange.ts"],"sourcesContent":["// These are guards that are used throughout the codebase to warn or error on\n// unexpected behaviour or conditions.\n// Every warning and error comes with a number that uniquely identifies them.\n// You can read more about the messages themselves in `docs/graphcache/errors.md`\n\nimport type {\n  ExecutableDefinitionNode,\n  InlineFragmentNode,\n} from '@0no-co/graphql.web';\nimport type { Logger } from '../types';\nimport { Kind } from '@0no-co/graphql.web';\n\nexport type ErrorCode =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25\n  | 26\n  | 27\n  | 28;\n\ntype DebugNode = ExecutableDefinitionNode | InlineFragmentNode;\n\n// URL unfurls to https://formidable.com/open-source/urql/docs/graphcache/errors/\nconst helpUrl = '\\nhttps://bit.ly/2XbVrpR#';\nconst cache = new Set<string>();\n\nexport const currentDebugStack: string[] = [];\n\nexport const popDebugNode = () => currentDebugStack.pop();\n\nexport const pushDebugNode = (typename: void | string, node: DebugNode) => {\n  let identifier = '';\n  if (node.kind === Kind.INLINE_FRAGMENT) {\n    identifier = typename\n      ? `Inline Fragment on \"${typename}\"`\n      : 'Inline Fragment';\n  } else if (node.kind === Kind.OPERATION_DEFINITION) {\n    const name = node.name ? `\"${node.name.value}\"` : 'Unnamed';\n    identifier = `${name} ${node.operation}`;\n  } else if (node.kind === Kind.FRAGMENT_DEFINITION) {\n    identifier = `\"${node.name.value}\" Fragment`;\n  }\n\n  if (identifier) {\n    currentDebugStack.push(identifier);\n  }\n};\n\nconst getDebugOutput = (): string =>\n  currentDebugStack.length\n    ? '\\n(Caused At: ' + currentDebugStack.join(', ') + ')'\n    : '';\n\nexport function invariant(\n  condition: any,\n  message: string,\n  code: ErrorCode\n): asserts condition {\n  if (!condition) {\n    let errorMessage = message || 'Minfied Error #' + code + '\\n';\n    if (process.env.NODE_ENV !== 'production') {\n      errorMessage += getDebugOutput();\n    }\n\n    const error = new Error(errorMessage + helpUrl + code);\n    error.name = 'Graphcache Error';\n    throw error;\n  }\n}\n\nexport function warn(\n  message: string,\n  code: ErrorCode,\n  logger: Logger | undefined\n) {\n  if (!cache.has(message)) {\n    if (logger) {\n      logger('warn', message + getDebugOutput() + helpUrl + code);\n    } else {\n      console.warn(message + getDebugOutput() + helpUrl + code);\n    }\n    cache.add(message);\n  }\n}\n","import type {\n  NamedTypeNode,\n  NameNode,\n  DirectiveNode,\n  SelectionNode,\n  SelectionSetNode,\n  FieldNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { FormattedNode } from '@urql/core';\n\nexport type SelectionSet = readonly FormattedNode<SelectionNode>[];\n\nconst EMPTY_DIRECTIVES: Record<string, DirectiveNode | undefined> = {};\n\n/** Returns the directives dictionary of a given node */\nexport const getDirectives = (node: {\n  _directives?: Record<string, DirectiveNode | undefined>;\n}) => node._directives || EMPTY_DIRECTIVES;\n\n/** Returns the name of a given node */\nexport const getName = (node: { name: NameNode }): string => node.name.value;\n\nexport const getFragmentTypeName = (node: FragmentDefinitionNode): string =>\n  node.typeCondition.name.value;\n\n/** Returns either the field's name or the field's alias */\nexport const getFieldAlias = (node: FieldNode): string =>\n  node.alias ? node.alias.value : node.name.value;\n\nconst emptySelectionSet: SelectionSet = [];\n\n/** Returns the SelectionSet for a given inline or defined fragment node */\nexport const getSelectionSet = (node: {\n  selectionSet?: FormattedNode<SelectionSetNode>;\n}): FormattedNode<SelectionSet> =>\n  (node.selectionSet\n    ? node.selectionSet.selections\n    : emptySelectionSet) as FormattedNode<SelectionSet>;\n\nexport const getTypeCondition = (node: {\n  typeCondition?: NamedTypeNode;\n}): string | null =>\n  node.typeCondition ? node.typeCondition.name.value : null;\n","import type {\n  FieldNode,\n  DirectiveNode,\n  OperationDefinitionNode,\n} from '@0no-co/graphql.web';\nimport { valueFromASTUntyped } from '@0no-co/graphql.web';\n\nimport { getName } from './node';\n\nimport type { Variables } from '../types';\n\n/** Evaluates a fields arguments taking vars into account */\nexport const getFieldArguments = (\n  node: FieldNode | DirectiveNode,\n  vars: Variables\n): null | Variables => {\n  let args: null | Variables = null;\n  if (node.arguments) {\n    for (let i = 0, l = node.arguments.length; i < l; i++) {\n      const arg = node.arguments[i];\n      const value = valueFromASTUntyped(arg.value, vars);\n      if (value !== undefined && value !== null) {\n        if (!args) args = {};\n        args[getName(arg)] = value as any;\n      }\n    }\n  }\n  return args;\n};\n\n/** Returns a filtered form of variables with values missing that the query doesn't require */\nexport const filterVariables = (\n  node: OperationDefinitionNode,\n  input: void | object\n) => {\n  if (!input || !node.variableDefinitions) {\n    return undefined;\n  }\n\n  const vars = {};\n  for (let i = 0, l = node.variableDefinitions.length; i < l; i++) {\n    const name = getName(node.variableDefinitions[i].variable);\n    vars[name] = input[name];\n  }\n\n  return vars;\n};\n\n/** Returns a normalized form of variables with defaulted values */\nexport const normalizeVariables = (\n  node: OperationDefinitionNode,\n  input: void | Record<string, unknown>\n): Variables => {\n  const vars = {};\n  if (!input) return vars;\n\n  if (node.variableDefinitions) {\n    for (let i = 0, l = node.variableDefinitions.length; i < l; i++) {\n      const def = node.variableDefinitions[i];\n      const name = getName(def.variable);\n      vars[name] =\n        input[name] === undefined && def.defaultValue\n          ? valueFromASTUntyped(def.defaultValue, input)\n          : input[name];\n    }\n  }\n\n  for (const key in input) {\n    if (!(key in vars)) vars[key] = input[key];\n  }\n\n  return vars;\n};\n","import type {\n  SelectionNode,\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n} from '@0no-co/graphql.web';\nimport { valueFromASTUntyped, Kind } from '@0no-co/graphql.web';\n\nimport type { FormattedNode } from '@urql/core';\nimport { getName, getDirectives } from './node';\nimport { invariant } from '../helpers/help';\nimport type { Fragments, Variables } from '../types';\n\nfunction getMainOperation(\n  doc: FormattedNode<DocumentNode>\n): FormattedNode<OperationDefinitionNode>;\nfunction getMainOperation(doc: DocumentNode): OperationDefinitionNode;\n\n/** Returns the main operation's definition */\nfunction getMainOperation(doc: DocumentNode): OperationDefinitionNode {\n  for (let i = 0; i < doc.definitions.length; i++) {\n    if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n      return doc.definitions[i] as FormattedNode<OperationDefinitionNode>;\n    }\n  }\n\n  invariant(\n    false,\n    'Invalid GraphQL document: All GraphQL documents must contain an OperationDefinition' +\n      'node for a query, subscription, or mutation.',\n    1\n  );\n}\n\nexport { getMainOperation };\n\n/** Returns a mapping from fragment names to their selections */\nexport const getFragments = (doc: FormattedNode<DocumentNode>): Fragments => {\n  const fragments: Fragments = {};\n  for (let i = 0; i < doc.definitions.length; i++) {\n    const node = doc.definitions[i];\n    if (node.kind === Kind.FRAGMENT_DEFINITION) {\n      fragments[getName(node)] = node;\n    }\n  }\n\n  return fragments;\n};\n\n/** Resolves @include and @skip directives to determine whether field is included. */\nexport const shouldInclude = (\n  node: FormattedNode<SelectionNode>,\n  vars: Variables\n): boolean => {\n  const directives = getDirectives(node);\n  if (directives.include || directives.skip) {\n    // Finds any @include or @skip directive that forces the node to be skipped\n    for (const name in directives) {\n      const directive = directives[name];\n      if (\n        directive &&\n        (name === 'include' || name === 'skip') &&\n        directive.arguments &&\n        directive.arguments[0] &&\n        getName(directive.arguments[0]) === 'if'\n      ) {\n        // Return whether this directive forces us to skip\n        // `@include(if: false)` or `@skip(if: true)`\n        const value = valueFromASTUntyped(directive.arguments[0].value, vars);\n        return name === 'include' ? !!value : !value;\n      }\n    }\n  }\n  return true;\n};\n\n/** Resolves @defer directive to determine whether a fragment is potentially skipped. */\nexport const isDeferred = (\n  node: FormattedNode<FragmentSpreadNode | InlineFragmentNode>,\n  vars: Variables\n): boolean => {\n  const { defer } = getDirectives(node);\n  if (defer) {\n    for (const argument of defer.arguments || []) {\n      if (getName(argument) === 'if') {\n        // Return whether `@defer(if: )` is enabled\n        return !!valueFromASTUntyped(argument.value, vars);\n      }\n    }\n    return true;\n  }\n\n  return false;\n};\n","import type {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport { warn, invariant } from '../helpers/help';\nimport { getTypeCondition } from './node';\nimport type { SchemaIntrospector, SchemaObject } from './schema';\n\nimport type {\n  KeyingConfig,\n  UpdatesConfig,\n  ResolverConfig,\n  OptimisticMutationConfig,\n  Logger,\n} from '../types';\n\nconst BUILTIN_NAME = '__';\n\nexport const isFieldNullable = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean => {\n  const field = getField(schema, typename, fieldName, logger);\n  return !!field && field.type.kind !== 'NON_NULL';\n};\n\nexport const isListNullable = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean => {\n  const field = getField(schema, typename, fieldName, logger);\n  if (!field) return false;\n  const ofType =\n    field.type.kind === 'NON_NULL' ? field.type.ofType : field.type;\n  return ofType.kind === 'LIST' && ofType.ofType.kind !== 'NON_NULL';\n};\n\nexport const isFieldAvailableOnType = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean =>\n  fieldName.indexOf(BUILTIN_NAME) === 0 ||\n  typename.indexOf(BUILTIN_NAME) === 0 ||\n  !!getField(schema, typename, fieldName, logger);\n\nexport const isInterfaceOfType = (\n  schema: SchemaIntrospector,\n  node: InlineFragmentNode | FragmentDefinitionNode,\n  typename: string | void\n): boolean => {\n  if (!typename) return false;\n  const typeCondition = getTypeCondition(node);\n  if (!typeCondition || typename === typeCondition) {\n    return true;\n  } else if (\n    schema.types!.has(typeCondition) &&\n    schema.types!.get(typeCondition)!.kind === 'OBJECT'\n  ) {\n    return typeCondition === typename;\n  }\n\n  expectAbstractType(schema, typeCondition!);\n  expectObjectType(schema, typename!);\n  return schema.isSubType(typeCondition, typename);\n};\n\nconst getField = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n) => {\n  if (\n    fieldName.indexOf(BUILTIN_NAME) === 0 ||\n    typename.indexOf(BUILTIN_NAME) === 0\n  )\n    return;\n\n  expectObjectType(schema, typename);\n  const object = schema.types!.get(typename) as SchemaObject;\n  const field = object.fields()[fieldName];\n  if (!field) {\n    warn(\n      'Invalid field: The field `' +\n        fieldName +\n        '` does not exist on `' +\n        typename +\n        '`, ' +\n        'but the GraphQL document expects it to exist.\\n' +\n        'Traversal will continue, however this may lead to undefined behavior!',\n      4,\n      logger\n    );\n  }\n\n  return field;\n};\n\nfunction expectObjectType(schema: SchemaIntrospector, typename: string) {\n  invariant(\n    schema.types!.has(typename) &&\n      schema.types!.get(typename)!.kind === 'OBJECT',\n    'Invalid Object type: The type `' +\n      typename +\n      '` is not an object in the defined schema, ' +\n      'but the GraphQL document is traversing it.',\n    3\n  );\n}\n\nfunction expectAbstractType(schema: SchemaIntrospector, typename: string) {\n  invariant(\n    schema.types!.has(typename) &&\n      (schema.types!.get(typename)!.kind === 'INTERFACE' ||\n        schema.types!.get(typename)!.kind === 'UNION'),\n    'Invalid Abstract type: The type `' +\n      typename +\n      '` is not an Interface or Union type in the defined schema, ' +\n      'but a fragment in the GraphQL document is using it as a type condition.',\n    5\n  );\n}\n\nexport function expectValidKeyingConfig(\n  schema: SchemaIntrospector,\n  keys: KeyingConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const key in keys) {\n      if (!schema.types!.has(key)) {\n        warn(\n          'Invalid Object type: The type `' +\n            key +\n            '` is not an object in the defined schema, but the `keys` option is referencing it.',\n          20,\n          logger\n        );\n      }\n    }\n  }\n}\n\nexport function expectValidUpdatesConfig(\n  schema: SchemaIntrospector,\n  updates: UpdatesConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  for (const typename in updates) {\n    if (!updates[typename]) {\n      continue;\n    } else if (!schema.types!.has(typename)) {\n      let addition = '';\n\n      if (\n        typename === 'Mutation' &&\n        schema.mutation &&\n        schema.mutation !== 'Mutation'\n      ) {\n        addition +=\n          '\\nMaybe your config should reference `' + schema.mutation + '`?';\n      } else if (\n        typename === 'Subscription' &&\n        schema.subscription &&\n        schema.subscription !== 'Subscription'\n      ) {\n        addition +=\n          '\\nMaybe your config should reference `' + schema.subscription + '`?';\n      }\n\n      return warn(\n        'Invalid updates type: The type `' +\n          typename +\n          '` is not an object in the defined schema, but the `updates` config is referencing it.' +\n          addition,\n        21,\n        logger\n      );\n    }\n\n    const fields = (schema.types!.get(typename)! as SchemaObject).fields();\n    for (const fieldName in updates[typename]!) {\n      if (!fields[fieldName]) {\n        warn(\n          'Invalid updates field: `' +\n            fieldName +\n            '` on `' +\n            typename +\n            '` is not in the defined schema, but the `updates` config is referencing it.',\n          22,\n          logger\n        );\n      }\n    }\n  }\n}\n\nfunction warnAboutResolver(name: string, logger: Logger | undefined): void {\n  warn(\n    `Invalid resolver: \\`${name}\\` is not in the defined schema, but the \\`resolvers\\` option is referencing it.`,\n    23,\n    logger\n  );\n}\n\nfunction warnAboutAbstractResolver(\n  name: string,\n  kind: 'UNION' | 'INTERFACE',\n  logger: Logger | undefined\n): void {\n  warn(\n    `Invalid resolver: \\`${name}\\` does not match to a concrete type in the schema, but the \\`resolvers\\` option is referencing it. Implement the resolver for the types that ${\n      kind === 'UNION' ? 'make up the union' : 'implement the interface'\n    } instead.`,\n    26,\n    logger\n  );\n}\n\nexport function expectValidResolversConfig(\n  schema: SchemaIntrospector,\n  resolvers: ResolverConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  for (const key in resolvers) {\n    if (key === 'Query') {\n      if (schema.query) {\n        const validQueries = (\n          schema.types!.get(schema.query) as SchemaObject\n        ).fields();\n        for (const resolverQuery in resolvers.Query || {}) {\n          if (!validQueries[resolverQuery]) {\n            warnAboutResolver('Query.' + resolverQuery, logger);\n          }\n        }\n      } else {\n        warnAboutResolver('Query', logger);\n      }\n    } else {\n      if (!schema.types!.has(key)) {\n        warnAboutResolver(key, logger);\n      } else if (\n        schema.types!.get(key)!.kind === 'INTERFACE' ||\n        schema.types!.get(key)!.kind === 'UNION'\n      ) {\n        warnAboutAbstractResolver(\n          key,\n          schema.types!.get(key)!.kind as 'INTERFACE' | 'UNION',\n          logger\n        );\n      } else {\n        const validTypeProperties = (\n          schema.types!.get(key) as SchemaObject\n        ).fields();\n        for (const resolverProperty in resolvers[key] || {}) {\n          if (!validTypeProperties[resolverProperty]) {\n            warnAboutResolver(key + '.' + resolverProperty, logger);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function expectValidOptimisticMutationsConfig(\n  schema: SchemaIntrospector,\n  optimisticMutations: OptimisticMutationConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  if (schema.mutation) {\n    const validMutations = (\n      schema.types!.get(schema.mutation) as SchemaObject\n    ).fields();\n    for (const mutation in optimisticMutations) {\n      if (!validMutations[mutation]) {\n        warn(\n          `Invalid optimistic mutation field: \\`${mutation}\\` is not a mutation field in the defined schema, but the \\`optimistic\\` option is referencing it.`,\n          24,\n          logger\n        );\n      }\n    }\n  }\n}\n","import { stringifyVariables } from '@urql/core';\nimport type { FieldArgs, FieldInfo, KeyInfo } from '../types';\n\nexport const keyOfField = (fieldName: string, args?: FieldArgs) =>\n  args ? `${fieldName}(${stringifyVariables(args)})` : fieldName;\n\nexport const joinKeys = (parentKey: string, key: string) =>\n  `${parentKey}.${key}`;\n\nexport const fieldInfoOfKey = (fieldKey: string): FieldInfo => {\n  const parenIndex = fieldKey.indexOf('(');\n  if (parenIndex > -1) {\n    return {\n      fieldKey,\n      fieldName: fieldKey.slice(0, parenIndex),\n      arguments: JSON.parse(fieldKey.slice(parenIndex + 1, -1)),\n    };\n  } else {\n    return {\n      fieldKey,\n      fieldName: fieldKey,\n      arguments: null,\n    };\n  }\n};\n\nexport const serializeKeys = (entityKey: string, fieldKey: string) =>\n  `${entityKey.replace(/\\./g, '%2e')}.${fieldKey}`;\n\nexport const deserializeKeyInfo = (key: string): KeyInfo => {\n  const dotIndex = key.indexOf('.');\n  const entityKey = key.slice(0, dotIndex).replace(/%2e/g, '.');\n  const fieldKey = key.slice(dotIndex + 1);\n  return { entityKey, fieldKey };\n};\n","import { stringifyVariables } from '@urql/core';\n\nimport type {\n  Link,\n  EntityField,\n  FieldInfo,\n  StorageAdapter,\n  SerializedEntries,\n  Dependencies,\n  OperationType,\n  DataField,\n  Data,\n} from '../types';\n\nimport {\n  serializeKeys,\n  deserializeKeyInfo,\n  fieldInfoOfKey,\n  joinKeys,\n} from './keys';\n\nimport { invariant, currentDebugStack } from '../helpers/help';\n\ntype Dict<T> = Record<string, T>;\ntype KeyMap<T> = Map<string, T>;\ntype OperationMap<T> = Map<number, T>;\n\ninterface NodeMap<T> {\n  optimistic: OperationMap<KeyMap<Dict<T | undefined>>>;\n  base: KeyMap<Dict<T>>;\n}\n\nexport interface InMemoryData {\n  /** Flag for whether the data is waiting for hydration */\n  hydrating: boolean;\n  /** Flag for whether deferred tasks have been scheduled yet */\n  defer: boolean;\n  /** A list of entities that have been flagged for gargabe collection since no references to them are left */\n  gc: Set<string>;\n  /** A list of entity+field keys that will be persisted */\n  persist: Set<string>;\n  /** The API's \"Query\" typename which is needed to filter dependencies */\n  queryRootKey: string;\n  /** Number of references to each entity (except \"Query\") */\n  refCount: KeyMap<number>;\n  /** A map of entity fields (key-value entries per entity) */\n  records: NodeMap<EntityField>;\n  /** A map of entity links which are connections from one entity to another (key-value entries per entity) */\n  links: NodeMap<Link>;\n  /** A set of Query operation keys that are in-flight and deferred/streamed */\n  deferredKeys: Set<number>;\n  /** A set of Query operation keys that are in-flight and awaiting a result */\n  commutativeKeys: Set<number>;\n  /** A set of Query operation keys that have been written to */\n  dirtyKeys: Set<number>;\n  /** The order of optimistic layers */\n  optimisticOrder: number[];\n  /** This may be a persistence adapter that will receive changes in a batch */\n  storage: StorageAdapter | null;\n}\n\nlet currentOwnership: null | WeakSet<any> = null;\nlet currentDataMapping: null | WeakMap<any, any> = null;\nlet currentData: null | InMemoryData = null;\nlet currentOptimisticKey: null | number = null;\nexport let currentOperation: null | OperationType = null;\nexport let currentDependencies: null | Dependencies = null;\nexport let currentForeignData = false;\nexport let currentOptimistic = false;\n\nexport function makeData(data: DataField | void, isArray?: false): Data;\nexport function makeData(data: DataField | void, isArray: true): DataField[];\n\n/** Creates a new data object unless it's been created in this data run */\nexport function makeData(data?: DataField | void, isArray?: boolean) {\n  let newData: Data | Data[] | undefined;\n  if (data) {\n    if (currentOwnership!.has(data)) return data;\n    newData = currentDataMapping!.get(data) as any;\n  }\n\n  if (newData == null) {\n    newData = (isArray ? [] : {}) as any;\n  }\n\n  if (data) {\n    currentDataMapping!.set(data, newData);\n  }\n\n  currentOwnership!.add(newData);\n  return newData;\n}\n\nexport const ownsData = (data?: Data): boolean =>\n  !!data && currentOwnership!.has(data);\n\n/** Before reading or writing the global state needs to be initialised */\nexport const initDataState = (\n  operationType: OperationType,\n  data: InMemoryData,\n  layerKey?: number | null,\n  isOptimistic?: boolean,\n  isForeignData?: boolean\n) => {\n  currentOwnership = new WeakSet();\n  currentDataMapping = new WeakMap();\n  currentOperation = operationType;\n  currentData = data;\n  currentDependencies = new Set();\n  currentOptimistic = !!isOptimistic;\n  currentForeignData = !!isForeignData;\n  if (process.env.NODE_ENV !== 'production') {\n    currentDebugStack.length = 0;\n  }\n\n  if (!layerKey) {\n    currentOptimisticKey = null;\n  } else if (currentOperation === 'read') {\n    // We don't create new layers for read operations and instead simply\n    // apply the currently available layer, if any\n    currentOptimisticKey = layerKey;\n  } else if (\n    isOptimistic ||\n    data.hydrating ||\n    data.optimisticOrder.length > 1\n  ) {\n    // If this operation isn't optimistic and we see it for the first time,\n    // then it must've been optimistic in the past, so we can proactively\n    // clear the optimistic data before writing\n    if (!isOptimistic && !data.commutativeKeys.has(layerKey)) {\n      reserveLayer(data, layerKey);\n    } else if (isOptimistic) {\n      if (\n        data.optimisticOrder.indexOf(layerKey) !== -1 &&\n        !data.commutativeKeys.has(layerKey)\n      ) {\n        data.optimisticOrder.splice(data.optimisticOrder.indexOf(layerKey), 1);\n      }\n      // NOTE: This optimally shouldn't happen as it implies that an optimistic\n      // write is being performed after a concrete write.\n      data.commutativeKeys.delete(layerKey);\n    }\n\n    // An optimistic update of a mutation may force an optimistic layer,\n    // or this Query update may be applied optimistically since it's part\n    // of a commutative chain\n    currentOptimisticKey = layerKey;\n    createLayer(data, layerKey);\n  } else {\n    // Otherwise we don't create an optimistic layer and clear the\n    // operation's one if it already exists\n    // We also do this when only one layer exists to avoid having to squash\n    // any layers at the end of writing this layer\n    currentOptimisticKey = null;\n    deleteLayer(data, layerKey);\n  }\n};\n\n/** Reset the data state after read/write is complete */\nexport const clearDataState = () => {\n  // NOTE: This is only called to check for the invariant to pass\n  if (process.env.NODE_ENV !== 'production') {\n    getCurrentDependencies();\n  }\n\n  const data = currentData!;\n  const layerKey = currentOptimisticKey;\n  currentOptimistic = false;\n  currentOptimisticKey = null;\n\n  // Determine whether the current operation has been a commutative layer\n  if (\n    !data.hydrating &&\n    layerKey &&\n    data.optimisticOrder.indexOf(layerKey) > -1\n  ) {\n    // Squash all layers in reverse order (low priority upwards) that have\n    // been written already\n    let i = data.optimisticOrder.length;\n    while (\n      --i >= 0 &&\n      data.dirtyKeys.has(data.optimisticOrder[i]) &&\n      data.commutativeKeys.has(data.optimisticOrder[i])\n    )\n      squashLayer(data.optimisticOrder[i]);\n  }\n\n  currentOwnership = null;\n  currentDataMapping = null;\n  currentOperation = null;\n  currentData = null;\n  currentDependencies = null;\n  if (process.env.NODE_ENV !== 'production') {\n    currentDebugStack.length = 0;\n  }\n\n  if (process.env.NODE_ENV !== 'test') {\n    // Schedule deferred tasks if we haven't already, and if either a persist or GC run\n    // are likely to be needed\n    if (!data.defer && (data.storage || !data.optimisticOrder.length)) {\n      data.defer = true;\n      setTimeout(() => {\n        initDataState('read', data, null);\n        gc();\n        persistData();\n        clearDataState();\n        data.defer = false;\n      });\n    }\n  }\n};\n\n/** Initialises then resets the data state, which may squash this layer if necessary */\nexport const noopDataState = (\n  data: InMemoryData,\n  layerKey: number | null,\n  isOptimistic?: boolean\n) => {\n  if (layerKey && !isOptimistic) data.deferredKeys.delete(layerKey);\n  initDataState('write', data, layerKey, isOptimistic);\n  clearDataState();\n};\n\n/** As we're writing, we keep around all the records and links we've read or have written to */\nexport const getCurrentDependencies = (): Dependencies => {\n  invariant(\n    currentDependencies !== null,\n    'Invalid Cache call: The cache may only be accessed or mutated during' +\n      'operations like write or query, or as part of its resolvers, updaters, ' +\n      'or optimistic configs.',\n    2\n  );\n\n  return currentDependencies;\n};\n\nexport const make = (queryRootKey: string): InMemoryData => ({\n  hydrating: false,\n  defer: false,\n  gc: new Set(),\n  persist: new Set(),\n  queryRootKey,\n  refCount: new Map(),\n  links: {\n    optimistic: new Map(),\n    base: new Map(),\n  },\n  records: {\n    optimistic: new Map(),\n    base: new Map(),\n  },\n  deferredKeys: new Set(),\n  commutativeKeys: new Set(),\n  dirtyKeys: new Set(),\n  optimisticOrder: [],\n  storage: null,\n});\n\n/** Adds a node value to a NodeMap (taking optimistic values into account */\nconst setNode = <T>(\n  map: NodeMap<T>,\n  entityKey: string,\n  fieldKey: string,\n  value: T\n) => {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      currentOperation !== 'read',\n      'Invalid Cache write: You may not write to the cache during cache reads. ' +\n        ' Accesses to `cache.writeFragment`, `cache.updateQuery`, and `cache.link` may ' +\n        ' not be made inside `resolvers` for instance.',\n      27\n    );\n  }\n\n  // Optimistic values are written to a map in the optimistic dict\n  // All other values are written to the base map\n  const keymap: KeyMap<Dict<T | undefined>> = currentOptimisticKey\n    ? map.optimistic.get(currentOptimisticKey)!\n    : map.base;\n\n  // On the map itself we get or create the entity as a dict\n  let entity = keymap.get(entityKey) as Dict<T | undefined>;\n  if (entity === undefined) {\n    keymap.set(entityKey, (entity = Object.create(null)));\n  }\n\n  // If we're setting undefined we delete the node's entry\n  // On optimistic layers we actually set undefined so it can\n  // override the base value\n  if (value === undefined && !currentOptimisticKey) {\n    delete entity[fieldKey];\n  } else {\n    entity[fieldKey] = value;\n  }\n};\n\n/** Gets a node value from a NodeMap (taking optimistic values into account */\nconst getNode = <T>(\n  map: NodeMap<T>,\n  entityKey: string,\n  fieldKey: string\n): T | undefined => {\n  let node: Dict<T | undefined> | undefined;\n  // A read may be initialised to skip layers until its own, which is useful for\n  // reading back written data. It won't skip over optimistic layers however\n  let skip =\n    !currentOptimistic &&\n    currentOperation === 'read' &&\n    currentOptimisticKey &&\n    currentData!.commutativeKeys.has(currentOptimisticKey);\n  // This first iterates over optimistic layers (in order)\n  for (let i = 0, l = currentData!.optimisticOrder.length; i < l; i++) {\n    const layerKey = currentData!.optimisticOrder[i];\n    const optimistic = map.optimistic.get(layerKey);\n    // If we're reading starting from a specific layer, we skip until a match\n    skip = skip && layerKey !== currentOptimisticKey;\n    // If the node and node value exists it is returned, including undefined\n    if (\n      optimistic &&\n      (!skip || !currentData!.commutativeKeys.has(layerKey)) &&\n      (!currentOptimistic ||\n        currentOperation === 'write' ||\n        currentData!.commutativeKeys.has(layerKey)) &&\n      (node = optimistic.get(entityKey)) !== undefined &&\n      fieldKey in node\n    ) {\n      return node[fieldKey];\n    }\n  }\n\n  // Otherwise we read the non-optimistic base value\n  node = map.base.get(entityKey);\n  return node !== undefined ? node[fieldKey] : undefined;\n};\n\n/** Adjusts the reference count of an entity on a refCount dict by \"by\" and updates the gc */\nconst updateRCForEntity = (entityKey: string, by: number): void => {\n  // Retrieve the reference count and adjust it by \"by\"\n  const count = currentData!.refCount.get(entityKey) || 0;\n  const newCount = count + by > 0 ? count + by : 0;\n  currentData!.refCount.set(entityKey, newCount);\n  // Add it to the garbage collection batch if it needs to be deleted or remove it\n  // from the batch if it needs to be kept\n  if (!newCount) currentData!.gc.add(entityKey);\n  else if (!count && newCount) currentData!.gc.delete(entityKey);\n};\n\n/** Adjusts the reference counts of all entities of a link on a refCount dict by \"by\" and updates the gc */\nconst updateRCForLink = (link: Link | undefined, by: number): void => {\n  if (Array.isArray(link)) {\n    for (let i = 0, l = link.length; i < l; i++) updateRCForLink(link[i], by);\n  } else if (typeof link === 'string') {\n    updateRCForEntity(link, by);\n  }\n};\n\n/** Writes all parsed FieldInfo objects of a given node dict to a given array if it hasn't been seen */\nconst extractNodeFields = <T>(\n  fieldInfos: FieldInfo[],\n  seenFieldKeys: Set<string>,\n  node: Dict<T> | undefined\n): void => {\n  if (node !== undefined) {\n    for (const fieldKey in node) {\n      if (!seenFieldKeys.has(fieldKey)) {\n        // If the node hasn't been seen the serialized fieldKey is turnt back into\n        // a rich FieldInfo object that also contains the field's name and arguments\n        fieldInfos.push(fieldInfoOfKey(fieldKey));\n        seenFieldKeys.add(fieldKey);\n      }\n    }\n  }\n};\n\n/** Writes all parsed FieldInfo objects of all nodes in a NodeMap to a given array */\nconst extractNodeMapFields = <T>(\n  fieldInfos: FieldInfo[],\n  seenFieldKeys: Set<string>,\n  entityKey: string,\n  map: NodeMap<T>\n) => {\n  // Extracts FieldInfo for the entity in the base map\n  extractNodeFields(fieldInfos, seenFieldKeys, map.base.get(entityKey));\n\n  // Then extracts FieldInfo for the entity from the optimistic maps\n  for (let i = 0, l = currentData!.optimisticOrder.length; i < l; i++) {\n    const optimistic = map.optimistic.get(currentData!.optimisticOrder[i]);\n    if (optimistic !== undefined) {\n      extractNodeFields(fieldInfos, seenFieldKeys, optimistic.get(entityKey));\n    }\n  }\n};\n\n/** Garbage collects all entities that have been marked as having no references */\nexport const gc = () => {\n  // If we're currently awaiting deferred results, abort GC run\n  if (currentData!.optimisticOrder.length) return;\n\n  // Iterate over all entities that have been marked for deletion\n  // Entities have been marked for deletion in `updateRCForEntity` if\n  // their reference count dropped to 0\n  for (const entityKey of currentData!.gc.keys()) {\n    // Remove the current key from the GC batch\n    currentData!.gc.delete(entityKey);\n\n    // Check first whether the entity has any references,\n    // if so, we skip it from the GC run\n    const rc = currentData!.refCount.get(entityKey) || 0;\n    if (rc > 0) continue;\n\n    // Delete the reference count, and delete the entity from the GC batch\n    currentData!.refCount.delete(entityKey);\n    currentData!.records.base.delete(entityKey);\n    const linkNode = currentData!.links.base.get(entityKey);\n    if (linkNode) {\n      currentData!.links.base.delete(entityKey);\n      for (const fieldKey in linkNode) updateRCForLink(linkNode[fieldKey], -1);\n    }\n  }\n};\n\nconst updateDependencies = (entityKey: string, fieldKey?: string) => {\n  if (entityKey !== currentData!.queryRootKey) {\n    currentDependencies!.add(entityKey);\n  } else if (fieldKey !== undefined && fieldKey !== '__typename') {\n    currentDependencies!.add(joinKeys(entityKey, fieldKey));\n  }\n};\n\nconst updatePersist = (entityKey: string, fieldKey: string) => {\n  if (!currentOptimistic && currentData!.storage) {\n    currentData!.persist.add(serializeKeys(entityKey, fieldKey));\n  }\n};\n\n/** Reads an entity's field (a \"record\") from data */\nexport const readRecord = (\n  entityKey: string,\n  fieldKey: string\n): EntityField => {\n  updateDependencies(entityKey, fieldKey);\n  return getNode(currentData!.records, entityKey, fieldKey);\n};\n\n/** Reads an entity's link from data */\nexport const readLink = (\n  entityKey: string,\n  fieldKey: string\n): Link | undefined => {\n  updateDependencies(entityKey, fieldKey);\n  return getNode(currentData!.links, entityKey, fieldKey);\n};\n\n/** Writes an entity's field (a \"record\") to data */\nexport const writeRecord = (\n  entityKey: string,\n  fieldKey: string,\n  value?: EntityField\n) => {\n  updateDependencies(entityKey, fieldKey);\n  updatePersist(entityKey, fieldKey);\n  setNode(currentData!.records, entityKey, fieldKey, value);\n};\n\nexport const hasField = (entityKey: string, fieldKey: string): boolean =>\n  readRecord(entityKey, fieldKey) !== undefined ||\n  readLink(entityKey, fieldKey) !== undefined;\n\n/** Writes an entity's link to data */\nexport const writeLink = (\n  entityKey: string,\n  fieldKey: string,\n  link?: Link | undefined\n) => {\n  // Retrieve the link NodeMap from either an optimistic or the base layer\n  const links = currentOptimisticKey\n    ? currentData!.links.optimistic.get(currentOptimisticKey)\n    : currentData!.links.base;\n  // Update the reference count for the link\n  if (!currentOptimisticKey) {\n    const entityLinks = links && links.get(entityKey);\n    updateRCForLink(entityLinks && entityLinks[fieldKey], -1);\n    updateRCForLink(link, 1);\n  }\n  // Update persistence batch and dependencies\n  updateDependencies(entityKey, fieldKey);\n  updatePersist(entityKey, fieldKey);\n  // Update the link\n  setNode(currentData!.links, entityKey, fieldKey, link);\n};\n\n/** Reserves an optimistic layer and preorders it */\nexport const reserveLayer = (\n  data: InMemoryData,\n  layerKey: number,\n  hasNext?: boolean\n) => {\n  // Find the current index for the layer, and remove it from\n  // the order if it exists already\n  let index = data.optimisticOrder.indexOf(layerKey);\n  if (index > -1) data.optimisticOrder.splice(index, 1);\n\n  if (hasNext) {\n    data.deferredKeys.add(layerKey);\n    // If the layer has future results then we'll move it past any layer that's\n    // still empty, so currently pending operations will take precedence over it\n    for (\n      index = index > -1 ? index : 0;\n      index < data.optimisticOrder.length &&\n      !data.deferredKeys.has(data.optimisticOrder[index]) &&\n      (!data.dirtyKeys.has(data.optimisticOrder[index]) ||\n        !data.commutativeKeys.has(data.optimisticOrder[index]));\n      index++\n    );\n  } else {\n    data.deferredKeys.delete(layerKey);\n    // Protect optimistic layers from being turned into non-optimistic layers\n    // while preserving optimistic data\n    if (index > -1 && !data.commutativeKeys.has(layerKey))\n      clearLayer(data, layerKey);\n    index = 0;\n  }\n\n  // Register the layer with the deferred or \"top\" index and\n  // mark it as commutative\n  data.optimisticOrder.splice(index, 0, layerKey);\n  data.commutativeKeys.add(layerKey);\n};\n\n/** Creates an optimistic layer of links and records */\nconst createLayer = (data: InMemoryData, layerKey: number) => {\n  if (data.optimisticOrder.indexOf(layerKey) === -1) {\n    data.optimisticOrder.unshift(layerKey);\n  }\n\n  if (!data.dirtyKeys.has(layerKey)) {\n    data.dirtyKeys.add(layerKey);\n    data.links.optimistic.set(layerKey, new Map());\n    data.records.optimistic.set(layerKey, new Map());\n  }\n};\n\n/** Clears all links and records of an optimistic layer */\nconst clearLayer = (data: InMemoryData, layerKey: number) => {\n  if (data.dirtyKeys.has(layerKey)) {\n    data.dirtyKeys.delete(layerKey);\n    data.records.optimistic.delete(layerKey);\n    data.links.optimistic.delete(layerKey);\n    data.deferredKeys.delete(layerKey);\n  }\n};\n\n/** Deletes links and records of an optimistic layer, and the layer itself */\nconst deleteLayer = (data: InMemoryData, layerKey: number) => {\n  const index = data.optimisticOrder.indexOf(layerKey);\n  if (index > -1) {\n    data.optimisticOrder.splice(index, 1);\n    data.commutativeKeys.delete(layerKey);\n  }\n\n  clearLayer(data, layerKey);\n};\n\n/** Merges an optimistic layer of links and records into the base data */\nconst squashLayer = (layerKey: number) => {\n  // Hide current dependencies from squashing operations\n  const previousDependencies = currentDependencies;\n  currentDependencies = new Set();\n  currentOperation = 'write';\n\n  const links = currentData!.links.optimistic.get(layerKey);\n  if (links) {\n    for (const entry of links.entries()) {\n      const entityKey = entry[0];\n      const keyMap = entry[1];\n      for (const fieldKey in keyMap)\n        writeLink(entityKey, fieldKey, keyMap[fieldKey]);\n    }\n  }\n\n  const records = currentData!.records.optimistic.get(layerKey);\n  if (records) {\n    for (const entry of records.entries()) {\n      const entityKey = entry[0];\n      const keyMap = entry[1];\n      for (const fieldKey in keyMap)\n        writeRecord(entityKey, fieldKey, keyMap[fieldKey]);\n    }\n  }\n\n  currentDependencies = previousDependencies;\n  deleteLayer(currentData!, layerKey);\n};\n\n/** Return an array of FieldInfo (info on all the fields and their arguments) for a given entity */\nexport const inspectFields = (entityKey: string): FieldInfo[] => {\n  const { links, records } = currentData!;\n  const fieldInfos: FieldInfo[] = [];\n  const seenFieldKeys: Set<string> = new Set();\n  // Update dependencies\n  updateDependencies(entityKey);\n  // Extract FieldInfos to the fieldInfos array for links and records\n  // This also deduplicates by keeping track of fieldKeys in the seenFieldKeys Set\n  extractNodeMapFields(fieldInfos, seenFieldKeys, entityKey, links);\n  extractNodeMapFields(fieldInfos, seenFieldKeys, entityKey, records);\n  return fieldInfos;\n};\n\nexport const persistData = () => {\n  if (currentData!.storage) {\n    currentOptimistic = true;\n    currentOperation = 'read';\n    const entries: SerializedEntries = {};\n    for (const key of currentData!.persist.keys()) {\n      const { entityKey, fieldKey } = deserializeKeyInfo(key);\n      let x: void | Link | EntityField;\n      if ((x = readLink(entityKey, fieldKey)) !== undefined) {\n        entries[key] = `:${stringifyVariables(x)}`;\n      } else if ((x = readRecord(entityKey, fieldKey)) !== undefined) {\n        entries[key] = stringifyVariables(x);\n      } else {\n        entries[key] = undefined;\n      }\n    }\n\n    currentOptimistic = false;\n    currentData!.storage.writeData(entries);\n    currentData!.persist.clear();\n  }\n};\n\nexport const hydrateData = (\n  data: InMemoryData,\n  storage: StorageAdapter,\n  entries: SerializedEntries\n) => {\n  initDataState('write', data, null);\n\n  for (const key in entries) {\n    const value = entries[key];\n    if (value !== undefined) {\n      const { entityKey, fieldKey } = deserializeKeyInfo(key);\n      if (value[0] === ':') {\n        if (readLink(entityKey, fieldKey) === undefined)\n          writeLink(entityKey, fieldKey, JSON.parse(value.slice(1)));\n      } else {\n        if (readRecord(entityKey, fieldKey) === undefined)\n          writeRecord(entityKey, fieldKey, JSON.parse(value));\n      }\n    }\n  }\n\n  data.storage = storage;\n  data.hydrating = false;\n  clearDataState();\n};\n","import type { CombinedError, ErrorLike, FormattedNode } from '@urql/core';\n\nimport type {\n  FieldNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\nimport { Kind } from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport { isDeferred, getTypeCondition, getSelectionSet, getName } from '../ast';\n\nimport { warn, pushDebugNode, popDebugNode } from '../helpers/help';\nimport { hasField, currentOperation, currentOptimistic } from '../store/data';\nimport { keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\n\nimport { getFieldArguments, shouldInclude, isInterfaceOfType } from '../ast';\n\nimport type {\n  Fragments,\n  Variables,\n  DataField,\n  NullArray,\n  Link,\n  Entity,\n  Data,\n  Logger,\n} from '../types';\n\nexport interface Context {\n  store: Store;\n  variables: Variables;\n  fragments: Fragments;\n  parentTypeName: string;\n  parentKey: string;\n  parentFieldKey: string;\n  parent: Data;\n  fieldName: string;\n  error: ErrorLike | undefined;\n  partial: boolean;\n  hasNext: boolean;\n  optimistic: boolean;\n  __internal: {\n    path: Array<string | number>;\n    errorMap: { [path: string]: ErrorLike } | undefined;\n  };\n}\n\nexport let contextRef: Context | null = null;\nexport let deferRef = false;\n\n// Checks whether the current data field is a cache miss because of a GraphQLError\nexport const getFieldError = (ctx: Context): ErrorLike | undefined =>\n  ctx.__internal.path.length > 0 && ctx.__internal.errorMap\n    ? ctx.__internal.errorMap[ctx.__internal.path.join('.')]\n    : undefined;\n\nexport const makeContext = (\n  store: Store,\n  variables: Variables,\n  fragments: Fragments,\n  typename: string,\n  entityKey: string,\n  error: CombinedError | undefined\n): Context => {\n  const ctx: Context = {\n    store,\n    variables,\n    fragments,\n    parent: { __typename: typename },\n    parentTypeName: typename,\n    parentKey: entityKey,\n    parentFieldKey: '',\n    fieldName: '',\n    error: undefined,\n    partial: false,\n    hasNext: false,\n    optimistic: currentOptimistic,\n    __internal: {\n      path: [],\n      errorMap: undefined,\n    },\n  };\n\n  if (error && error.graphQLErrors) {\n    for (let i = 0; i < error.graphQLErrors.length; i++) {\n      const graphQLError = error.graphQLErrors[i];\n      if (graphQLError.path && graphQLError.path.length) {\n        if (!ctx.__internal.errorMap)\n          ctx.__internal.errorMap = Object.create(null);\n        ctx.__internal.errorMap![graphQLError.path.join('.')] = graphQLError;\n      }\n    }\n  }\n\n  return ctx;\n};\n\nexport const updateContext = (\n  ctx: Context,\n  data: Data,\n  typename: string,\n  entityKey: string,\n  fieldKey: string,\n  fieldName: string\n) => {\n  contextRef = ctx;\n  ctx.parent = data;\n  ctx.parentTypeName = typename;\n  ctx.parentKey = entityKey;\n  ctx.parentFieldKey = fieldKey;\n  ctx.fieldName = fieldName;\n  ctx.error = getFieldError(ctx);\n};\n\nconst isFragmentHeuristicallyMatching = (\n  node: FormattedNode<InlineFragmentNode | FragmentDefinitionNode>,\n  typename: void | string,\n  entityKey: string,\n  vars: Variables,\n  logger?: Logger\n) => {\n  if (!typename) return false;\n  const typeCondition = getTypeCondition(node);\n  if (!typeCondition || typename === typeCondition) return true;\n\n  warn(\n    'Heuristic Fragment Matching: A fragment is trying to match against the `' +\n      typename +\n      '` type, ' +\n      'but the type condition is `' +\n      typeCondition +\n      '`. Since GraphQL allows for interfaces `' +\n      typeCondition +\n      '` may be an ' +\n      'interface.\\nA schema needs to be defined for this match to be deterministic, ' +\n      'otherwise the fragment will be matched heuristically!',\n    16,\n    logger\n  );\n\n  return (\n    currentOperation === 'write' ||\n    !getSelectionSet(node).some(node => {\n      if (node.kind !== Kind.FIELD) return false;\n      const fieldKey = keyOfField(getName(node), getFieldArguments(node, vars));\n      return !hasField(entityKey, fieldKey);\n    })\n  );\n};\n\ninterface SelectionIterator {\n  (): FormattedNode<FieldNode> | undefined;\n}\n\nexport const makeSelectionIterator = (\n  typename: void | string,\n  entityKey: string,\n  defer: boolean,\n  selectionSet: FormattedNode<SelectionSet>,\n  ctx: Context\n): SelectionIterator => {\n  let child: SelectionIterator | void;\n  let index = 0;\n\n  return function next() {\n    let node: FormattedNode<FieldNode> | undefined;\n    while (child || index < selectionSet.length) {\n      node = undefined;\n      deferRef = defer;\n      if (child) {\n        if ((node = child())) {\n          return node;\n        } else {\n          child = undefined;\n          if (process.env.NODE_ENV !== 'production') popDebugNode();\n        }\n      } else {\n        const select = selectionSet[index++];\n        if (!shouldInclude(select, ctx.variables)) {\n          /*noop*/\n        } else if (select.kind !== Kind.FIELD) {\n          // A fragment is either referred to by FragmentSpread or inline\n          const fragment =\n            select.kind !== Kind.INLINE_FRAGMENT\n              ? ctx.fragments[getName(select)]\n              : select;\n          if (fragment) {\n            const isMatching =\n              !fragment.typeCondition ||\n              (ctx.store.schema\n                ? isInterfaceOfType(ctx.store.schema, fragment, typename)\n                : isFragmentHeuristicallyMatching(\n                    fragment,\n                    typename,\n                    entityKey,\n                    ctx.variables,\n                    ctx.store.logger\n                  ));\n            if (isMatching) {\n              if (process.env.NODE_ENV !== 'production')\n                pushDebugNode(typename, fragment);\n              child = makeSelectionIterator(\n                typename,\n                entityKey,\n                defer || isDeferred(select, ctx.variables),\n                getSelectionSet(fragment),\n                ctx\n              );\n            }\n          }\n        } else if (currentOperation === 'write' || !select._generated) {\n          return select;\n        }\n      }\n    }\n  };\n};\n\nexport const ensureData = (x: DataField): Data | NullArray<Data> | null =>\n  x == null ? null : (x as Data | NullArray<Data>);\n\nexport const ensureLink = (store: Store, ref: Link<Entity>): Link => {\n  if (!ref) {\n    return ref || null;\n  } else if (Array.isArray(ref)) {\n    const link = new Array(ref.length);\n    for (let i = 0, l = link.length; i < l; i++)\n      link[i] = ensureLink(store, ref[i]);\n    return link;\n  }\n\n  const link = store.keyOfEntity(ref);\n  if (!link && ref && typeof ref === 'object') {\n    warn(\n      \"Can't generate a key for link(...) item.\" +\n        '\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        ref.__typename +\n        '`.',\n      12,\n      store.logger\n    );\n  }\n\n  return link;\n};\n","import type { FormattedNode, CombinedError } from '@urql/core';\nimport { formatDocument } from '@urql/core';\n\nimport type {\n  FieldNode,\n  DocumentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  getSelectionSet,\n  getName,\n  getFragmentTypeName,\n  getFieldAlias,\n  getFragments,\n  getMainOperation,\n  normalizeVariables,\n  getFieldArguments,\n  getDirectives,\n} from '../ast';\n\nimport type {\n  Variables,\n  Data,\n  DataField,\n  Link,\n  OperationRequest,\n  Dependencies,\n  Resolver,\n} from '../types';\n\nimport { joinKeys, keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\nimport * as InMemoryData from '../store/data';\nimport { warn, pushDebugNode, popDebugNode } from '../helpers/help';\n\nimport type { Context } from './shared';\nimport {\n  makeSelectionIterator,\n  ensureData,\n  makeContext,\n  updateContext,\n  getFieldError,\n  deferRef,\n} from './shared';\n\nimport {\n  isFieldAvailableOnType,\n  isFieldNullable,\n  isListNullable,\n} from '../ast';\n\nexport interface QueryResult {\n  dependencies: Dependencies;\n  partial: boolean;\n  hasNext: boolean;\n  data: null | Data;\n}\n\n/** Reads a GraphQL query from the cache.\n * @internal\n */\nexport const __initAnd_query = (\n  store: Store,\n  request: OperationRequest,\n  data?: Data | null | undefined,\n  error?: CombinedError | undefined,\n  key?: number\n): QueryResult => {\n  InMemoryData.initDataState('read', store.data, key);\n  const result = _query(store, request, data, error);\n  InMemoryData.clearDataState();\n  return result;\n};\n\n/** Reads a GraphQL query from the cache.\n * @internal\n */\nexport const _query = (\n  store: Store,\n  request: OperationRequest,\n  input?: Data | null | undefined,\n  error?: CombinedError | undefined\n): QueryResult => {\n  const query = formatDocument(request.query);\n  const operation = getMainOperation(query);\n  const rootKey = store.rootFields[operation.operation];\n  const rootSelect = getSelectionSet(operation);\n\n  const ctx = makeContext(\n    store,\n    normalizeVariables(operation, request.variables),\n    getFragments(query),\n    rootKey,\n    rootKey,\n    error\n  );\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(rootKey, operation);\n  }\n\n  // NOTE: This may reuse \"previous result data\" as indicated by the\n  // `originalData` argument in readRoot(). This behaviour isn't used\n  // for readSelection() however, which always produces results from\n  // scratch\n  const data =\n    rootKey !== ctx.store.rootFields['query']\n      ? readRoot(ctx, rootKey, rootSelect, input || InMemoryData.makeData())\n      : readSelection(\n          ctx,\n          rootKey,\n          rootSelect,\n          input || InMemoryData.makeData()\n        );\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n    InMemoryData.getCurrentDependencies();\n  }\n\n  return {\n    dependencies: InMemoryData.currentDependencies!,\n    partial: ctx.partial || !data,\n    hasNext: ctx.hasNext,\n    data: data || null,\n  };\n};\n\nconst readRoot = (\n  ctx: Context,\n  entityKey: string,\n  select: FormattedNode<SelectionSet>,\n  input: Data\n): Data => {\n  const typename = ctx.store.rootNames[entityKey]\n    ? entityKey\n    : input.__typename;\n  if (typeof typename !== 'string') {\n    return input;\n  }\n\n  const iterate = makeSelectionIterator(\n    entityKey,\n    entityKey,\n    deferRef,\n    select,\n    ctx\n  );\n\n  let node: FormattedNode<FieldNode> | void;\n  let hasChanged = InMemoryData.currentForeignData;\n  const output = InMemoryData.makeData(input);\n  while ((node = iterate())) {\n    const fieldAlias = getFieldAlias(node);\n    const fieldValue = input[fieldAlias];\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n    // We temporarily store the data field in here, but undefined\n    // means that the value is missing from the cache\n    let dataFieldValue: void | DataField;\n    if (node.selectionSet && fieldValue !== null) {\n      dataFieldValue = readRootField(\n        ctx,\n        getSelectionSet(node),\n        ensureData(fieldValue)\n      );\n    } else {\n      dataFieldValue = fieldValue;\n    }\n\n    // Check for any referential changes in the field's value\n    hasChanged = hasChanged || dataFieldValue !== fieldValue;\n    if (dataFieldValue !== undefined) output[fieldAlias] = dataFieldValue!;\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n  }\n\n  return hasChanged ? output : input;\n};\n\nconst readRootField = (\n  ctx: Context,\n  select: FormattedNode<SelectionSet>,\n  originalData: Link<Data>\n): Link<Data> => {\n  if (Array.isArray(originalData)) {\n    const newData = new Array(originalData.length);\n    let hasChanged = InMemoryData.currentForeignData;\n    for (let i = 0, l = originalData.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read the root field's value\n      newData[i] = readRootField(ctx, select, originalData[i]);\n      hasChanged = hasChanged || newData[i] !== originalData[i];\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n    }\n\n    return hasChanged ? newData : originalData;\n  } else if (originalData === null) {\n    return null;\n  }\n\n  // Write entity to key that falls back to the given parentFieldKey\n  const entityKey = ctx.store.keyOfEntity(originalData);\n  if (entityKey !== null) {\n    // We assume that since this is used for result data this can never be undefined,\n    // since the result data has already been written to the cache\n    return readSelection(ctx, entityKey, select, originalData) || null;\n  } else {\n    return readRoot(ctx, originalData.__typename, select, originalData);\n  }\n};\n\nexport const _queryFragment = (\n  store: Store,\n  query: FormattedNode<DocumentNode>,\n  entity: Partial<Data> | string,\n  variables?: Variables,\n  fragmentName?: string\n): Data | null => {\n  const fragments = getFragments(query);\n\n  let fragment: FormattedNode<FragmentDefinitionNode>;\n  if (fragmentName) {\n    fragment = fragments[fragmentName]!;\n    if (!fragment) {\n      warn(\n        'readFragment(...) was called with a fragment name that does not exist.\\n' +\n          'You provided ' +\n          fragmentName +\n          ' but could only find ' +\n          Object.keys(fragments).join(', ') +\n          '.',\n        6,\n        store.logger\n      );\n\n      return null;\n    }\n  } else {\n    const names = Object.keys(fragments);\n    fragment = fragments[names[0]]!;\n    if (!fragment) {\n      warn(\n        'readFragment(...) was called with an empty fragment.\\n' +\n          'You have to call it with at least one fragment in your GraphQL document.',\n        6,\n        store.logger\n      );\n\n      return null;\n    }\n  }\n\n  const typename = getFragmentTypeName(fragment);\n  if (typeof entity !== 'string' && !entity.__typename)\n    entity.__typename = typename;\n  const entityKey = store.keyOfEntity(entity as Data);\n  if (!entityKey) {\n    warn(\n      \"Can't generate a key for readFragment(...).\\n\" +\n        'You have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        typename +\n        '`.',\n      7,\n      store.logger\n    );\n\n    return null;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(typename, fragment);\n  }\n\n  const ctx = makeContext(\n    store,\n    variables || {},\n    fragments,\n    typename,\n    entityKey,\n    undefined\n  );\n\n  const result =\n    readSelection(\n      ctx,\n      entityKey,\n      getSelectionSet(fragment),\n      InMemoryData.makeData()\n    ) || null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n\n  return result;\n};\n\nfunction getFieldResolver(\n  directives: ReturnType<typeof getDirectives>,\n  typename: string,\n  fieldName: string,\n  ctx: Context\n): Resolver | void {\n  const resolvers = ctx.store.resolvers[typename];\n  const fieldResolver = resolvers && resolvers[fieldName];\n\n  let directiveResolver: Resolver | undefined;\n  for (const name in directives) {\n    const directiveNode = directives[name];\n    if (\n      directiveNode &&\n      name !== 'include' &&\n      name !== 'skip' &&\n      ctx.store.directives[name]\n    ) {\n      directiveResolver = ctx.store.directives[name](\n        getFieldArguments(directiveNode, ctx.variables)\n      );\n      if (process.env.NODE_ENV === 'production') return directiveResolver;\n      break;\n    }\n  }\n\n  if (fieldResolver && directiveResolver) {\n    warn(\n      `A resolver and directive is being used at \"${typename}.${fieldName}\" simultaneously. Only the directive will apply.`,\n      28,\n      ctx.store.logger\n    );\n  }\n\n  return directiveResolver || fieldResolver;\n}\n\nconst readSelection = (\n  ctx: Context,\n  key: string,\n  select: FormattedNode<SelectionSet>,\n  input: Data,\n  result?: Data\n): Data | undefined => {\n  const { store } = ctx;\n  const isQuery = key === store.rootFields.query;\n\n  const entityKey = (result && store.keyOfEntity(result)) || key;\n  if (!isQuery && !!ctx.store.rootNames[entityKey]) {\n    warn(\n      'Invalid root traversal: A selection was being read on `' +\n        entityKey +\n        '` which is an uncached root type.\\n' +\n        'The `' +\n        ctx.store.rootFields.mutation +\n        '` and `' +\n        ctx.store.rootFields.subscription +\n        '` types are special ' +\n        'Operation Root Types and cannot be read back from the cache.',\n      25,\n      store.logger\n    );\n  }\n\n  const typename = !isQuery\n    ? InMemoryData.readRecord(entityKey, '__typename') ||\n      (result && result.__typename)\n    : key;\n\n  if (typeof typename !== 'string') {\n    return;\n  } else if (result && typename !== result.__typename) {\n    warn(\n      'Invalid resolver data: The resolver at `' +\n        entityKey +\n        '` returned an ' +\n        'invalid typename that could not be reconciled with the cache.',\n      8,\n      store.logger\n    );\n\n    return;\n  }\n\n  const iterate = makeSelectionIterator(\n    typename,\n    entityKey,\n    deferRef,\n    select,\n    ctx\n  );\n\n  let hasFields = false;\n  let hasNext = false;\n  let hasChanged = InMemoryData.currentForeignData;\n  let node: FormattedNode<FieldNode> | void;\n  const hasPartials = ctx.partial;\n  const output = InMemoryData.makeData(input);\n  while ((node = iterate()) !== undefined) {\n    // Derive the needed data from our node.\n    const fieldName = getName(node);\n    const fieldArgs = getFieldArguments(node, ctx.variables);\n    const fieldAlias = getFieldAlias(node);\n    const directives = getDirectives(node);\n    const resolver = getFieldResolver(directives, typename, fieldName, ctx);\n    const fieldKey = keyOfField(fieldName, fieldArgs);\n    const key = joinKeys(entityKey, fieldKey);\n    const fieldValue = InMemoryData.readRecord(entityKey, fieldKey);\n    const resultValue = result ? result[fieldName] : undefined;\n\n    if (process.env.NODE_ENV !== 'production' && store.schema && typename) {\n      isFieldAvailableOnType(\n        store.schema,\n        typename,\n        fieldName,\n        ctx.store.logger\n      );\n    }\n\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n    // We temporarily store the data field in here, but undefined\n    // means that the value is missing from the cache\n    let dataFieldValue: void | DataField = undefined;\n\n    if (fieldName === '__typename') {\n      // We directly assign the typename as it's already available\n      dataFieldValue = typename;\n    } else if (resultValue !== undefined && node.selectionSet === undefined) {\n      // The field is a scalar and can be retrieved directly from the result\n      dataFieldValue = resultValue;\n    } else if (InMemoryData.currentOperation === 'read' && resolver) {\n      // We have a resolver for this field.\n      // Prepare the actual fieldValue, so that the resolver can use it,\n      // as to avoid the user having to do `cache.resolve(parent, info.fieldKey)`\n      // only to get a scalar value.\n      let parent = output;\n      if (node.selectionSet === undefined && fieldValue !== undefined) {\n        parent = {\n          ...output,\n          [fieldAlias]: fieldValue,\n          [fieldName]: fieldValue,\n        };\n      }\n\n      // We have to update the information in context to reflect the info\n      // that the resolver will receive\n      updateContext(ctx, parent, typename, entityKey, fieldKey, fieldName);\n\n      dataFieldValue = resolver(\n        parent,\n        fieldArgs || ({} as Variables),\n        store,\n        ctx\n      );\n\n      if (node.selectionSet) {\n        // When it has a selection set we are resolving an entity with a\n        // subselection. This can either be a list or an object.\n        dataFieldValue = resolveResolverResult(\n          ctx,\n          typename,\n          fieldName,\n          key,\n          getSelectionSet(node),\n          (output[fieldAlias] !== undefined\n            ? output[fieldAlias]\n            : input[fieldAlias]) as Data,\n          dataFieldValue,\n          InMemoryData.ownsData(input)\n        );\n      }\n\n      if (\n        store.schema &&\n        dataFieldValue === null &&\n        !isFieldNullable(store.schema, typename, fieldName, ctx.store.logger)\n      ) {\n        // Special case for when null is not a valid value for the\n        // current field\n        return undefined;\n      }\n    } else if (!node.selectionSet) {\n      // The field is a scalar but isn't on the result, so it's retrieved from the cache\n      dataFieldValue = fieldValue;\n    } else if (resultValue !== undefined) {\n      // We start walking the nested resolver result here\n      dataFieldValue = resolveResolverResult(\n        ctx,\n        typename,\n        fieldName,\n        key,\n        getSelectionSet(node),\n        (output[fieldAlias] !== undefined\n          ? output[fieldAlias]\n          : input[fieldAlias]) as Data,\n        resultValue,\n        InMemoryData.ownsData(input)\n      );\n    } else {\n      // Otherwise we attempt to get the missing field from the cache\n      const link = InMemoryData.readLink(entityKey, fieldKey);\n\n      if (link !== undefined) {\n        dataFieldValue = resolveLink(\n          ctx,\n          link,\n          typename,\n          fieldName,\n          getSelectionSet(node),\n          (output[fieldAlias] !== undefined\n            ? output[fieldAlias]\n            : input[fieldAlias]) as Data,\n          InMemoryData.ownsData(input)\n        );\n      } else if (typeof fieldValue === 'object' && fieldValue !== null) {\n        // The entity on the field was invalid but can still be recovered\n        dataFieldValue = fieldValue;\n      }\n    }\n\n    // Now that dataFieldValue has been retrieved it'll be set on data\n    // If it's uncached (undefined) but nullable we can continue assembling\n    // a partial query result\n    if (\n      !deferRef &&\n      dataFieldValue === undefined &&\n      (directives.optional ||\n        !!getFieldError(ctx) ||\n        (store.schema &&\n          isFieldNullable(store.schema, typename, fieldName, ctx.store.logger)))\n    ) {\n      // The field is uncached or has errored, so it'll be set to null and skipped\n      ctx.partial = true;\n      dataFieldValue = null;\n    } else if (dataFieldValue === null && directives.required) {\n      if (\n        ctx.store.logger &&\n        process.env.NODE_ENV !== 'production' &&\n        InMemoryData.currentOperation === 'read'\n      ) {\n        ctx.store.logger(\n          'debug',\n          `Got value \"null\" for required field \"${fieldName}\"${\n            fieldArgs ? ` with args ${JSON.stringify(fieldArgs)}` : ''\n          } on entity \"${entityKey}\"`\n        );\n      }\n      dataFieldValue = undefined;\n    } else {\n      hasFields = hasFields || fieldName !== '__typename';\n    }\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n    // Check for any referential changes in the field's value\n    hasChanged = hasChanged || dataFieldValue !== input[fieldAlias];\n    if (dataFieldValue !== undefined) {\n      output[fieldAlias] = dataFieldValue;\n    } else if (deferRef) {\n      hasNext = true;\n    } else {\n      if (\n        ctx.store.logger &&\n        process.env.NODE_ENV !== 'production' &&\n        InMemoryData.currentOperation === 'read'\n      ) {\n        ctx.store.logger(\n          'debug',\n          `No value for field \"${fieldName}\"${\n            fieldArgs ? ` with args ${JSON.stringify(fieldArgs)}` : ''\n          } on entity \"${entityKey}\"`\n        );\n      }\n      // If the field isn't deferred or partial then we have to abort and also reset\n      // the partial field\n      ctx.partial = hasPartials;\n      return undefined;\n    }\n  }\n\n  ctx.partial = ctx.partial || hasPartials;\n  ctx.hasNext = ctx.hasNext || hasNext;\n  return isQuery && ctx.partial && !hasFields\n    ? undefined\n    : hasChanged\n    ? output\n    : input;\n};\n\nconst resolveResolverResult = (\n  ctx: Context,\n  typename: string,\n  fieldName: string,\n  key: string,\n  select: FormattedNode<SelectionSet>,\n  prevData: void | null | Data | Data[],\n  result: void | DataField,\n  isOwnedData: boolean\n): DataField | void => {\n  if (Array.isArray(result)) {\n    const { store } = ctx;\n    // Check whether values of the list may be null; for resolvers we assume\n    // that they can be, since it's user-provided data\n    const _isListNullable = store.schema\n      ? isListNullable(store.schema, typename, fieldName, ctx.store.logger)\n      : false;\n    const hasPartials = ctx.partial;\n    const data = InMemoryData.makeData(prevData, true);\n    let hasChanged =\n      InMemoryData.currentForeignData ||\n      !Array.isArray(prevData) ||\n      result.length !== prevData.length;\n    for (let i = 0, l = result.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read resolver result\n      const childResult = resolveResolverResult(\n        ctx,\n        typename,\n        fieldName,\n        joinKeys(key, `${i}`),\n        select,\n        prevData != null ? prevData[i] : undefined,\n        result[i],\n        isOwnedData\n      );\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n      // Check the result for cache-missed values\n      if (childResult === undefined && !_isListNullable) {\n        ctx.partial = hasPartials;\n        return undefined;\n      } else {\n        ctx.partial =\n          ctx.partial || (childResult === undefined && _isListNullable);\n        data[i] = childResult != null ? childResult : null;\n        hasChanged = hasChanged || data[i] !== prevData![i];\n      }\n    }\n\n    return hasChanged ? data : prevData;\n  } else if (result === null || result === undefined) {\n    return result;\n  } else if (isOwnedData && prevData === null) {\n    return null;\n  } else if (isDataOrKey(result)) {\n    const data = (prevData || InMemoryData.makeData(prevData)) as Data;\n    return typeof result === 'string'\n      ? readSelection(ctx, result, select, data)\n      : readSelection(ctx, key, select, data, result);\n  } else {\n    warn(\n      'Invalid resolver value: The field at `' +\n        key +\n        '` is a scalar (number, boolean, etc)' +\n        ', but the GraphQL query expects a selection set for this field.',\n      9,\n      ctx.store.logger\n    );\n\n    return undefined;\n  }\n};\n\nconst resolveLink = (\n  ctx: Context,\n  link: Link | Link[],\n  typename: string,\n  fieldName: string,\n  select: FormattedNode<SelectionSet>,\n  prevData: void | null | Data | Data[],\n  isOwnedData: boolean\n): DataField | undefined => {\n  if (Array.isArray(link)) {\n    const { store } = ctx;\n    const _isListNullable = store.schema\n      ? isListNullable(store.schema, typename, fieldName, ctx.store.logger)\n      : false;\n    const newLink = InMemoryData.makeData(prevData, true);\n    const hasPartials = ctx.partial;\n    let hasChanged =\n      InMemoryData.currentForeignData ||\n      !Array.isArray(prevData) ||\n      link.length !== prevData.length;\n    for (let i = 0, l = link.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read the link\n      const childLink = resolveLink(\n        ctx,\n        link[i],\n        typename,\n        fieldName,\n        select,\n        prevData != null ? prevData[i] : undefined,\n        isOwnedData\n      );\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n      // Check the result for cache-missed values\n      if (childLink === undefined && !_isListNullable) {\n        ctx.partial = hasPartials;\n        return undefined;\n      } else {\n        ctx.partial =\n          ctx.partial || (childLink === undefined && _isListNullable);\n        newLink[i] = childLink || null;\n        hasChanged = hasChanged || newLink[i] !== prevData![i];\n      }\n    }\n\n    return hasChanged ? newLink : (prevData as Data[]);\n  } else if (link === null || (prevData === null && isOwnedData)) {\n    return null;\n  }\n\n  return readSelection(\n    ctx,\n    link,\n    select,\n    (prevData || InMemoryData.makeData(prevData)) as Data\n  );\n};\n\nconst isDataOrKey = (x: any): x is string | Data =>\n  typeof x === 'string' ||\n  (typeof x === 'object' && typeof (x as any).__typename === 'string');\n","import type { FormattedNode, CombinedError } from '@urql/core';\nimport { formatDocument } from '@urql/core';\n\nimport type {\n  FieldNode,\n  DocumentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  getFragments,\n  getMainOperation,\n  normalizeVariables,\n  getFieldArguments,\n  isFieldAvailableOnType,\n  getSelectionSet,\n  getName,\n  getFragmentTypeName,\n  getFieldAlias,\n} from '../ast';\n\nimport { invariant, warn, pushDebugNode, popDebugNode } from '../helpers/help';\n\nimport type {\n  NullArray,\n  Variables,\n  Data,\n  Link,\n  OperationRequest,\n  Dependencies,\n  EntityField,\n  OptimisticMutationResolver,\n} from '../types';\n\nimport { joinKeys, keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\nimport * as InMemoryData from '../store/data';\n\nimport type { Context } from './shared';\nimport {\n  makeSelectionIterator,\n  ensureData,\n  makeContext,\n  updateContext,\n  getFieldError,\n  deferRef,\n} from './shared';\n\nexport interface WriteResult {\n  data: null | Data;\n  dependencies: Dependencies;\n}\n\n/** Writes a GraphQL response to the cache.\n * @internal\n */\nexport const __initAnd_write = (\n  store: Store,\n  request: OperationRequest,\n  data: Data,\n  error?: CombinedError | undefined,\n  key?: number\n): WriteResult => {\n  InMemoryData.initDataState('write', store.data, key || null);\n  const result = _write(store, request, data, error);\n  InMemoryData.clearDataState();\n  return result;\n};\n\nexport const __initAnd_writeOptimistic = (\n  store: Store,\n  request: OperationRequest,\n  key: number\n): WriteResult => {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      getMainOperation(request.query).operation === 'mutation',\n      'writeOptimistic(...) was called with an operation that is not a mutation.\\n' +\n        'This case is unsupported and should never occur.',\n      10\n    );\n  }\n\n  InMemoryData.initDataState('write', store.data, key, true);\n  const result = _write(store, request, {} as Data, undefined);\n  InMemoryData.clearDataState();\n  return result;\n};\n\nexport const _write = (\n  store: Store,\n  request: OperationRequest,\n  data?: Data,\n  error?: CombinedError | undefined\n) => {\n  if (process.env.NODE_ENV !== 'production') {\n    InMemoryData.getCurrentDependencies();\n  }\n\n  const query = formatDocument(request.query);\n  const operation = getMainOperation(query);\n  const result: WriteResult = {\n    data: data || InMemoryData.makeData(),\n    dependencies: InMemoryData.currentDependencies!,\n  };\n  const kind = store.rootFields[operation.operation];\n\n  const ctx = makeContext(\n    store,\n    normalizeVariables(operation, request.variables),\n    getFragments(query),\n    kind,\n    kind,\n    error\n  );\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(kind, operation);\n  }\n\n  writeSelection(ctx, kind, getSelectionSet(operation), result.data!);\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n\n  return result;\n};\n\nexport const _writeFragment = (\n  store: Store,\n  query: FormattedNode<DocumentNode>,\n  data: Partial<Data>,\n  variables?: Variables,\n  fragmentName?: string\n) => {\n  const fragments = getFragments(query);\n  let fragment: FormattedNode<FragmentDefinitionNode>;\n  if (fragmentName) {\n    fragment = fragments[fragmentName]!;\n    if (!fragment) {\n      warn(\n        'writeFragment(...) was called with a fragment name that does not exist.\\n' +\n          'You provided ' +\n          fragmentName +\n          ' but could only find ' +\n          Object.keys(fragments).join(', ') +\n          '.',\n        11,\n        store.logger\n      );\n\n      return null;\n    }\n  } else {\n    const names = Object.keys(fragments);\n    fragment = fragments[names[0]]!;\n    if (!fragment) {\n      warn(\n        'writeFragment(...) was called with an empty fragment.\\n' +\n          'You have to call it with at least one fragment in your GraphQL document.',\n        11,\n        store.logger\n      );\n\n      return null;\n    }\n  }\n\n  const typename = getFragmentTypeName(fragment);\n  const dataToWrite = { __typename: typename, ...data } as Data;\n  const entityKey = store.keyOfEntity(dataToWrite);\n  if (!entityKey) {\n    return warn(\n      \"Can't generate a key for writeFragment(...) data.\\n\" +\n        'You have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        typename +\n        '`.',\n      12,\n      store.logger\n    );\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(typename, fragment);\n  }\n\n  const ctx = makeContext(\n    store,\n    variables || {},\n    fragments,\n    typename,\n    entityKey,\n    undefined\n  );\n\n  writeSelection(ctx, entityKey, getSelectionSet(fragment), dataToWrite);\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n};\n\nconst writeSelection = (\n  ctx: Context,\n  entityKey: undefined | string,\n  select: FormattedNode<SelectionSet>,\n  data: Data\n) => {\n  // These fields determine how we write. The `Query` root type is written\n  // like a normal entity, hence, we use `rootField` with a default to determine\n  // this. All other root names (Subscription & Mutation) are in a different\n  // write mode\n  const rootField = ctx.store.rootNames[entityKey!] || 'query';\n  const isRoot = !!ctx.store.rootNames[entityKey!];\n\n  let typename = isRoot ? entityKey : data.__typename;\n  if (!typename && entityKey && ctx.optimistic) {\n    typename = InMemoryData.readRecord(entityKey, '__typename') as\n      | string\n      | undefined;\n  }\n\n  if (!typename) {\n    warn(\n      \"Couldn't find __typename when writing.\\n\" +\n        \"If you're writing to the cache manually have to pass a `__typename` property on each entity in your data.\",\n      14,\n      ctx.store.logger\n    );\n    return;\n  } else if (!isRoot && entityKey) {\n    InMemoryData.writeRecord(entityKey, '__typename', typename);\n  }\n\n  const updates = ctx.store.updates[typename];\n  const iterate = makeSelectionIterator(\n    typename,\n    entityKey || typename,\n    deferRef,\n    select,\n    ctx\n  );\n\n  let node: FormattedNode<FieldNode> | void;\n  while ((node = iterate())) {\n    const fieldName = getName(node);\n    const fieldArgs = getFieldArguments(node, ctx.variables);\n    const fieldKey = keyOfField(fieldName, fieldArgs);\n    const fieldAlias = getFieldAlias(node);\n    let fieldValue = data[ctx.optimistic ? fieldName : fieldAlias];\n\n    if (\n      // Skip typename fields and assume they've already been written above\n      fieldName === '__typename' ||\n      // Fields marked as deferred that aren't defined must be skipped\n      // Otherwise, we also ignore undefined values in optimistic updaters\n      (fieldValue === undefined &&\n        (deferRef || (ctx.optimistic && rootField === 'query')))\n    ) {\n      continue;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (ctx.store.schema && typename && fieldName !== '__typename') {\n        isFieldAvailableOnType(\n          ctx.store.schema,\n          typename,\n          fieldName,\n          ctx.store.logger\n        );\n      }\n    }\n\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n\n    // Execute optimistic mutation functions on root fields, or execute recursive functions\n    // that have been returned on optimistic objects\n    let resolver: OptimisticMutationResolver | undefined;\n    if (ctx.optimistic && rootField === 'mutation') {\n      resolver = ctx.store.optimisticMutations[fieldName];\n      if (!resolver) continue;\n    } else if (ctx.optimistic && typeof fieldValue === 'function') {\n      resolver = fieldValue as any;\n    }\n\n    // Execute the field-level resolver to retrieve its data\n    if (resolver) {\n      // We have to update the context to reflect up-to-date ResolveInfo\n      updateContext(\n        ctx,\n        data,\n        typename,\n        entityKey || typename,\n        fieldKey,\n        fieldName\n      );\n      fieldValue = ensureData(resolver(fieldArgs || {}, ctx.store, ctx));\n    }\n\n    if (fieldValue === undefined) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (\n          !entityKey ||\n          !InMemoryData.hasField(entityKey, fieldKey) ||\n          (ctx.optimistic && !InMemoryData.readRecord(entityKey, '__typename'))\n        ) {\n          const expected =\n            node.selectionSet === undefined\n              ? 'scalar (number, boolean, etc)'\n              : 'selection set';\n\n          warn(\n            'Invalid undefined: The field at `' +\n              fieldKey +\n              '` is `undefined`, but the GraphQL query expects a ' +\n              expected +\n              ' for this field.',\n            13,\n            ctx.store.logger\n          );\n        }\n      }\n\n      continue; // Skip this field\n    }\n\n    if (node.selectionSet) {\n      // Process the field and write links for the child entities that have been written\n      if (entityKey && rootField === 'query') {\n        const key = joinKeys(entityKey, fieldKey);\n        const link = writeField(\n          ctx,\n          getSelectionSet(node),\n          ensureData(fieldValue),\n          key,\n          ctx.optimistic\n            ? InMemoryData.readLink(entityKey || typename, fieldKey)\n            : undefined\n        );\n        InMemoryData.writeLink(entityKey || typename, fieldKey, link);\n      } else {\n        writeField(ctx, getSelectionSet(node), ensureData(fieldValue));\n      }\n    } else if (entityKey && rootField === 'query') {\n      // This is a leaf node, so we're setting the field's value directly\n      InMemoryData.writeRecord(\n        entityKey || typename,\n        fieldKey,\n        (fieldValue !== null || !getFieldError(ctx)\n          ? fieldValue\n          : undefined) as EntityField\n      );\n    }\n\n    // We run side-effect updates after the default, normalized updates\n    // so that the data is already available in-store if necessary\n    const updater = updates && updates[fieldName];\n    if (updater) {\n      // We have to update the context to reflect up-to-date ResolveInfo\n      updateContext(\n        ctx,\n        data,\n        typename,\n        entityKey || typename,\n        fieldKey,\n        fieldName\n      );\n\n      data[fieldName] = fieldValue;\n      updater(data, fieldArgs || {}, ctx.store, ctx);\n    }\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n  }\n};\n\n// A pattern to match typenames of types that are likely never keyable\nconst KEYLESS_TYPE_RE = /^__|PageInfo|(Connection|Edge)$/;\n\nconst writeField = (\n  ctx: Context,\n  select: FormattedNode<SelectionSet>,\n  data: null | Data | NullArray<Data>,\n  parentFieldKey?: string,\n  prevLink?: Link\n): Link | undefined => {\n  if (Array.isArray(data)) {\n    const newData = new Array(data.length);\n    for (let i = 0, l = data.length; i < l; i++) {\n      // Add the current index to the walked path before processing the link\n      ctx.__internal.path.push(i);\n      // Append the current index to the parentFieldKey fallback\n      const indexKey = parentFieldKey\n        ? joinKeys(parentFieldKey, `${i}`)\n        : undefined;\n      // Recursively write array data\n      const prevIndex = prevLink != null ? prevLink[i] : undefined;\n      const links = writeField(ctx, select, data[i], indexKey, prevIndex);\n      // Link cannot be expressed as a recursive type\n      newData[i] = links as string | null;\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n    }\n\n    return newData;\n  } else if (data === null) {\n    return getFieldError(ctx) ? undefined : null;\n  }\n\n  const entityKey =\n    ctx.store.keyOfEntity(data) ||\n    (typeof prevLink === 'string' ? prevLink : null);\n  const typename = data.__typename;\n\n  if (\n    parentFieldKey &&\n    !ctx.store.keys[data.__typename] &&\n    entityKey === null &&\n    typeof typename === 'string' &&\n    !KEYLESS_TYPE_RE.test(typename)\n  ) {\n    warn(\n      'Invalid key: The GraphQL query at the field at `' +\n        parentFieldKey +\n        '` has a selection set, ' +\n        'but no key could be generated for the data at this field.\\n' +\n        'You have to request `id` or `_id` fields for all selection sets or create ' +\n        'a custom `keys` config for `' +\n        typename +\n        '`.\\n' +\n        'Entities without keys will be embedded directly on the parent entity. ' +\n        'If this is intentional, create a `keys` config for `' +\n        typename +\n        '` that always returns null.',\n      15,\n      ctx.store.logger\n    );\n  }\n\n  const childKey = entityKey || parentFieldKey;\n  writeSelection(ctx, childKey, select, data);\n  return childKey || null;\n};\n","import type { TypedDocumentNode } from '@urql/core';\nimport { formatDocument, createRequest } from '@urql/core';\n\nimport type {\n  Cache,\n  FieldInfo,\n  ResolverConfig,\n  DataField,\n  Variables,\n  FieldArgs,\n  Link,\n  Data,\n  QueryInput,\n  UpdatesConfig,\n  OptimisticMutationConfig,\n  KeyingConfig,\n  Entity,\n  CacheExchangeOpts,\n  DirectivesConfig,\n  Logger,\n} from '../types';\n\nimport { invariant } from '../helpers/help';\nimport { contextRef, ensureLink } from '../operations/shared';\nimport { _query, _queryFragment } from '../operations/query';\nimport { _write, _writeFragment } from '../operations/write';\nimport { invalidateEntity } from '../operations/invalidate';\nimport { keyOfField } from './keys';\nimport * as InMemoryData from './data';\n\nimport type { SchemaIntrospector } from '../ast';\nimport {\n  buildClientSchema,\n  expectValidKeyingConfig,\n  expectValidUpdatesConfig,\n  expectValidResolversConfig,\n  expectValidOptimisticMutationsConfig,\n} from '../ast';\n\ntype DocumentNode = TypedDocumentNode<any, any>;\ntype RootField = 'query' | 'mutation' | 'subscription';\n\n/** Implementation of the {@link Cache} interface as created internally by the {@link cacheExchange}.\n * @internal\n */\nexport class Store<\n  C extends Partial<CacheExchangeOpts> = Partial<CacheExchangeOpts>,\n> implements Cache\n{\n  data: InMemoryData.InMemoryData;\n\n  logger?: Logger;\n  directives: DirectivesConfig;\n  resolvers: ResolverConfig;\n  updates: UpdatesConfig;\n  optimisticMutations: OptimisticMutationConfig;\n  keys: KeyingConfig;\n  globalIDs: Set<string> | boolean;\n  schema?: SchemaIntrospector;\n\n  rootFields: { query: string; mutation: string; subscription: string };\n  rootNames: { [name: string]: RootField | void };\n\n  constructor(opts?: C) {\n    if (!opts) opts = {} as C;\n\n    this.logger = opts.logger;\n    this.resolvers = opts.resolvers || {};\n    this.directives = opts.directives || {};\n    this.optimisticMutations = opts.optimistic || {};\n    this.keys = opts.keys || {};\n\n    this.globalIDs = Array.isArray(opts.globalIDs)\n      ? new Set(opts.globalIDs)\n      : !!opts.globalIDs;\n\n    let queryName = 'Query';\n    let mutationName = 'Mutation';\n    let subscriptionName = 'Subscription';\n    if (opts.schema) {\n      const schema = buildClientSchema(opts.schema);\n      queryName = schema.query || queryName;\n      mutationName = schema.mutation || mutationName;\n      subscriptionName = schema.subscription || subscriptionName;\n      // Only add schema introspector if it has types info\n      if (schema.types) this.schema = schema;\n    }\n\n    this.updates = opts.updates || {};\n\n    this.rootFields = {\n      query: queryName,\n      mutation: mutationName,\n      subscription: subscriptionName,\n    };\n\n    this.rootNames = {\n      [queryName]: 'query',\n      [mutationName]: 'mutation',\n      [subscriptionName]: 'subscription',\n    };\n\n    this.data = InMemoryData.make(queryName);\n\n    if (this.schema && process.env.NODE_ENV !== 'production') {\n      expectValidKeyingConfig(this.schema, this.keys, this.logger);\n      expectValidUpdatesConfig(this.schema, this.updates, this.logger);\n      expectValidResolversConfig(this.schema, this.resolvers, this.logger);\n      expectValidOptimisticMutationsConfig(\n        this.schema,\n        this.optimisticMutations,\n        this.logger\n      );\n    }\n  }\n\n  keyOfField(fieldName: string, fieldArgs?: FieldArgs) {\n    return keyOfField(fieldName, fieldArgs);\n  }\n\n  keyOfEntity(data: Entity) {\n    // In resolvers and updaters we may have a specific parent\n    // object available that can be used to skip to a specific parent\n    // key directly without looking at its incomplete properties\n    if (contextRef && data === contextRef.parent) {\n      return contextRef.parentKey;\n    } else if (data == null || typeof data === 'string') {\n      return data || null;\n    } else if (!data.__typename) {\n      return null;\n    } else if (this.rootNames[data.__typename]) {\n      return data.__typename;\n    }\n\n    let key: string | null = null;\n    if (this.keys[data.__typename]) {\n      key = this.keys[data.__typename](data) || null;\n    } else if (data.id != null) {\n      key = `${data.id}`;\n    } else if (data._id != null) {\n      key = `${data._id}`;\n    }\n\n    const typename = data.__typename;\n    const globalID =\n      this.globalIDs === true ||\n      (this.globalIDs && this.globalIDs.has(typename));\n    return globalID || !key ? key : `${typename}:${key}`;\n  }\n\n  resolve(\n    entity: Entity,\n    field: string,\n    args?: FieldArgs\n  ): DataField | undefined {\n    let fieldValue: DataField | undefined = null;\n    const entityKey = this.keyOfEntity(entity);\n    if (entityKey) {\n      const fieldKey = keyOfField(field, args);\n      fieldValue = InMemoryData.readRecord(entityKey, fieldKey);\n      if (fieldValue === undefined)\n        fieldValue = InMemoryData.readLink(entityKey, fieldKey);\n    }\n    return fieldValue;\n  }\n\n  resolveFieldByKey(entity: Entity, field: string, args?: FieldArgs) {\n    return this.resolve(entity, field, args);\n  }\n\n  invalidate(entity: Entity, field?: string, args?: FieldArgs) {\n    const entityKey = this.keyOfEntity(entity);\n\n    invariant(\n      entityKey,\n      \"Can't generate a key for invalidate(...).\\n\" +\n        'You have to pass an id or _id field or create a custom `keys` field for `' +\n        (typeof entity === 'object'\n          ? (entity as Data).__typename\n          : entity + '`.'),\n      19\n    );\n\n    invalidateEntity(entityKey, field, args);\n  }\n\n  inspectFields(entity: Entity): FieldInfo[] {\n    const entityKey = this.keyOfEntity(entity);\n    return entityKey ? InMemoryData.inspectFields(entityKey) : [];\n  }\n\n  updateQuery<T = Data, V = Variables>(\n    input: QueryInput<T, V>,\n    updater: (data: T | null) => T | null\n  ): void {\n    const request = createRequest(input.query, input.variables!);\n    const output = updater(this.readQuery(request));\n    if (output !== null) {\n      _write(this, request, output as any, undefined);\n    }\n  }\n\n  readQuery<T = Data, V = Variables>(input: QueryInput<T, V>): T | null {\n    const request = createRequest(input.query, input.variables!);\n    return _query(this, request, undefined, undefined).data as T | null;\n  }\n\n  readFragment<T = Data, V = Variables>(\n    fragment: DocumentNode | TypedDocumentNode<T, V>,\n    entity: string | Data | T,\n    variables?: V,\n    fragmentName?: string\n  ): T | null {\n    return _queryFragment(\n      this,\n      formatDocument(fragment),\n      entity as Data,\n      variables as any,\n      fragmentName\n    ) as T | null;\n  }\n\n  writeFragment<T = Data, V = Variables>(\n    fragment: DocumentNode | TypedDocumentNode<T, V>,\n    data: T,\n    variables?: V,\n    fragmentName?: string\n  ): void {\n    _writeFragment(\n      this,\n      formatDocument(fragment),\n      data as Data,\n      variables as any,\n      fragmentName\n    );\n  }\n\n  link(\n    entity: Entity,\n    field: string,\n    args: FieldArgs,\n    link: Link<Entity>\n  ): void;\n\n  link(entity: Entity, field: string, link: Link<Entity>): void;\n\n  link(\n    entity: Entity,\n    field: string,\n    ...rest: [FieldArgs, Link<Entity>] | [Link<Entity>]\n  ): void {\n    const args = rest.length === 2 ? rest[0] : null;\n    const link = rest.length === 2 ? rest[1] : rest[0];\n    const entityKey = this.keyOfEntity(entity);\n    if (entityKey) {\n      InMemoryData.writeLink(\n        entityKey,\n        keyOfField(field, args),\n        ensureLink(this, link)\n      );\n    }\n  }\n}\n","import type {\n  IntrospectionQuery,\n  IntrospectionTypeRef,\n  IntrospectionInputValue,\n  IntrospectionType,\n} from './graphql';\n\nexport interface SchemaField {\n  name: string;\n  type: IntrospectionTypeRef;\n  args(): Record<string, IntrospectionInputValue | void>;\n}\n\nexport interface SchemaObject {\n  name: string;\n  kind: 'INTERFACE' | 'OBJECT';\n  interfaces(): Record<string, unknown>;\n  fields(): Record<string, SchemaField | void>;\n}\n\nexport interface SchemaUnion {\n  name: string;\n  kind: 'UNION';\n  types(): Record<string, unknown>;\n}\n\nexport interface SchemaIntrospector {\n  query: string | null;\n  mutation: string | null;\n  subscription: string | null;\n  types?: Map<string, SchemaObject | SchemaUnion>;\n  isSubType(abstract: string, possible: string): boolean;\n}\n\nexport interface PartialIntrospectionSchema {\n  queryType: { name: string; kind?: any };\n  mutationType?: { name: string; kind?: any } | null;\n  subscriptionType?: { name: string; kind?: any } | null;\n  types?: readonly any[];\n}\n\nexport type IntrospectionData =\n  | IntrospectionQuery\n  | { __schema: PartialIntrospectionSchema };\n\nexport const buildClientSchema = ({\n  __schema,\n}: IntrospectionData): SchemaIntrospector => {\n  const typemap: Map<string, SchemaObject | SchemaUnion> = new Map();\n\n  const buildNameMap = <T extends { name: string }>(\n    arr: ReadonlyArray<T>\n  ): (() => { [name: string]: T }) => {\n    let map: Record<string, T> | void;\n    return () => {\n      if (!map) {\n        map = {};\n        for (let i = 0; i < arr.length; i++) map[arr[i].name] = arr[i];\n      }\n      return map;\n    };\n  };\n\n  const buildType = (\n    type: IntrospectionType\n  ): SchemaObject | SchemaUnion | void => {\n    switch (type.kind) {\n      case 'OBJECT':\n      case 'INTERFACE':\n        return {\n          name: type.name,\n          kind: type.kind as 'OBJECT' | 'INTERFACE',\n          interfaces: buildNameMap(type.interfaces || []),\n          fields: buildNameMap(\n            type.fields!.map((field: any) => ({\n              name: field.name,\n              type: field.type,\n              args: buildNameMap(field.args),\n            }))\n          ),\n        } as SchemaObject;\n      case 'UNION':\n        return {\n          name: type.name,\n          kind: type.kind as 'UNION',\n          types: buildNameMap(type.possibleTypes || []),\n        } as SchemaUnion;\n    }\n  };\n\n  const schema: SchemaIntrospector = {\n    query: __schema.queryType ? __schema.queryType.name : null,\n    mutation: __schema.mutationType ? __schema.mutationType.name : null,\n    subscription: __schema.subscriptionType\n      ? __schema.subscriptionType.name\n      : null,\n    types: undefined,\n    isSubType(abstract: string, possible: string) {\n      const abstractType = typemap.get(abstract);\n      const possibleType = typemap.get(possible);\n      if (!abstractType || !possibleType) {\n        return false;\n      } else if (abstractType.kind === 'UNION') {\n        return !!abstractType.types()[possible];\n      } else if (\n        abstractType.kind !== 'OBJECT' &&\n        possibleType.kind === 'OBJECT'\n      ) {\n        return !!possibleType.interfaces()[abstract];\n      } else {\n        return abstract === possible;\n      }\n    },\n  };\n\n  if (__schema.types) {\n    schema.types = typemap;\n    for (let i = 0; i < __schema.types.length; i++) {\n      const type = __schema.types[i];\n      if (type && type.name) {\n        const out = buildType(type);\n        if (out) typemap.set(type.name, out);\n      }\n    }\n  }\n\n  return schema;\n};\n","import * as InMemoryData from '../store/data';\nimport { keyOfField } from '../store/keys';\nimport type { FieldArgs } from '../types';\n\ninterface PartialFieldInfo {\n  fieldKey: string;\n}\n\nexport const invalidateEntity = (\n  entityKey: string,\n  field?: string,\n  args?: FieldArgs\n) => {\n  const fields: PartialFieldInfo[] = field\n    ? [{ fieldKey: keyOfField(field, args) }]\n    : InMemoryData.inspectFields(entityKey);\n\n  for (let i = 0, l = fields.length; i < l; i++) {\n    const { fieldKey } = fields[i];\n    if (InMemoryData.readLink(entityKey, fieldKey) !== undefined) {\n      InMemoryData.writeLink(entityKey, fieldKey, undefined);\n    } else {\n      InMemoryData.writeRecord(entityKey, fieldKey, undefined);\n    }\n  }\n};\n","import type { Operation, RequestPolicy, OperationDebugMeta } from '@urql/core';\nimport { makeOperation } from '@urql/core';\n\n// Returns the given operation result with added cacheOutcome meta field\nexport const addMetadata = (\n  operation: Operation,\n  meta: OperationDebugMeta\n): Operation =>\n  makeOperation(operation.kind, operation, {\n    ...operation.context,\n    meta: {\n      ...operation.context.meta,\n      ...meta,\n    },\n  });\n\n// Copy an operation and change the requestPolicy to skip the cache\nexport const toRequestPolicy = (\n  operation: Operation,\n  requestPolicy: RequestPolicy\n): Operation => {\n  return makeOperation(operation.kind, operation, {\n    ...operation.context,\n    requestPolicy,\n  });\n};\n","import type {\n  Exchange,\n  Operation,\n  OperationResult,\n  RequestPolicy,\n  CacheOutcome,\n} from '@urql/core';\nimport { formatDocument, makeOperation } from '@urql/core';\n\nimport type { Source } from 'wonka';\nimport {\n  filter,\n  map,\n  merge,\n  pipe,\n  share,\n  fromArray,\n  mergeMap,\n  empty,\n} from 'wonka';\n\nimport { _query } from './operations/query';\nimport { _write } from './operations/write';\nimport { addMetadata, toRequestPolicy } from './helpers/operation';\nimport { filterVariables, getMainOperation } from './ast';\nimport { Store } from './store/store';\nimport type { Data, Dependencies, CacheExchangeOpts } from './types';\n\nimport {\n  initDataState,\n  clearDataState,\n  noopDataState,\n  hydrateData,\n  reserveLayer,\n} from './store/data';\n\ninterface OperationResultWithMeta extends Partial<OperationResult> {\n  operation: Operation;\n  outcome: CacheOutcome;\n  dependencies: Dependencies;\n  hasNext: boolean;\n}\n\ntype Operations = Set<number>;\ntype OperationMap = Map<number, Operation>;\ntype ResultMap = Map<number, Data | null>;\ntype OptimisticDependencies = Map<number, Dependencies>;\ntype DependentOperations = Map<string, Operations>;\n\n/** Exchange factory that creates a normalized cache exchange.\n *\n * @param opts - A {@link CacheExchangeOpts} configuration object.\n * @returns the created normalized cache {@link Exchange}.\n *\n * @remarks\n * Graphcache is a normalized cache, enabled by using the `cacheExchange`\n * in place of `@urql/core`’s. A normalized GraphQL cache uses typenames\n * and key fields in the result to share a single copy for each unique\n * entity across all queries.\n *\n * The `cacheExchange` may be passed a {@link CacheExchangeOpts} object\n * to define custom resolvers, custom updates for mutations,\n * optimistic updates, or to add custom key fields per type.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache} for the full Graphcache docs.\n */\nexport const cacheExchange =\n  <C extends Partial<CacheExchangeOpts>>(opts?: C): Exchange =>\n  ({ forward, client, dispatchDebug }) => {\n    const store = new Store<C>(opts);\n\n    if (opts && opts.storage) {\n      store.data.hydrating = true;\n      opts.storage.readData().then(entries => {\n        hydrateData(store.data, opts!.storage!, entries);\n        if (opts.storage!.onCacheHydrated) opts.storage!.onCacheHydrated();\n      });\n    }\n\n    const optimisticKeysToDependencies: OptimisticDependencies = new Map();\n    const mutationResultBuffer: OperationResult[] = [];\n    const operations: OperationMap = new Map();\n    const results: ResultMap = new Map();\n    const blockedDependencies: Dependencies = new Set();\n    const requestedRefetch: Operations = new Set();\n    const deps: DependentOperations = new Map();\n\n    let reexecutingOperations: Operations = new Set();\n    let dependentOperations: Operations = new Set();\n\n    const isBlockedByOptimisticUpdate = (\n      dependencies: Dependencies\n    ): boolean => {\n      for (const dep of dependencies.values())\n        if (blockedDependencies.has(dep)) return true;\n      return false;\n    };\n\n    const collectPendingOperations = (\n      pendingOperations: Operations,\n      dependencies: undefined | Dependencies\n    ) => {\n      if (dependencies) {\n        // Collect operations that will be updated due to cache changes\n        for (const dep of dependencies.values()) {\n          const keys = deps.get(dep);\n          if (keys) for (const key of keys.values()) pendingOperations.add(key);\n        }\n      }\n    };\n\n    const executePendingOperations = (\n      operation: Operation,\n      pendingOperations: Operations,\n      isOptimistic: boolean\n    ) => {\n      // Reexecute collected operations and delete them from the mapping\n      for (const key of pendingOperations.values()) {\n        if (key !== operation.key) {\n          const op = operations.get(key);\n          if (op) {\n            // Collect all dependent operations if the reexecuting operation is a query\n            if (operation.kind === 'query') dependentOperations.add(key);\n            let policy: RequestPolicy = 'cache-first';\n            if (requestedRefetch.has(key)) {\n              requestedRefetch.delete(key);\n              policy = 'cache-and-network';\n            }\n            client.reexecuteOperation(toRequestPolicy(op, policy));\n          }\n        }\n      }\n\n      if (!isOptimistic) {\n        // Upon completion, all dependent operations become reexecuting operations, preventing\n        // them from reexecuting prior operations again, causing infinite loops\n        const _reexecutingOperations = reexecutingOperations;\n        if (operation.kind === 'query') {\n          (reexecutingOperations = dependentOperations).add(operation.key);\n        }\n        (dependentOperations = _reexecutingOperations).clear();\n      }\n    };\n\n    // This registers queries with the data layer to ensure commutativity\n    const prepareForwardedOperation = (operation: Operation) => {\n      let optimistic = false;\n      if (operation.kind === 'query') {\n        // Pre-reserve the position of the result layer\n        reserveLayer(store.data, operation.key);\n        operations.set(operation.key, operation);\n      } else if (operation.kind === 'teardown') {\n        // Delete reference to operation if any exists to release it\n        operations.delete(operation.key);\n        results.delete(operation.key);\n        reexecutingOperations.delete(operation.key);\n        // Mark operation layer as done\n        noopDataState(store.data, operation.key);\n        return operation;\n      } else if (\n        operation.kind === 'mutation' &&\n        operation.context.requestPolicy !== 'network-only'\n      ) {\n        operations.set(operation.key, operation);\n        // This executes an optimistic update for mutations and registers it if necessary\n        initDataState('write', store.data, operation.key, true, false);\n        const { dependencies } = _write(\n          store,\n          operation as any,\n          undefined,\n          undefined\n        );\n        clearDataState();\n        if (dependencies.size) {\n          // Update blocked optimistic dependencies\n          for (const dep of dependencies.values()) blockedDependencies.add(dep);\n          // Store optimistic dependencies for update\n          optimisticKeysToDependencies.set(operation.key, dependencies);\n          // Update related queries\n          const pendingOperations: Operations = new Set();\n          collectPendingOperations(pendingOperations, dependencies);\n          executePendingOperations(operation, pendingOperations, true);\n          // Mark operation as optimistic\n          optimistic = true;\n        }\n      }\n\n      return makeOperation(\n        operation.kind,\n        {\n          key: operation.key,\n          query: formatDocument(operation.query),\n          variables: operation.variables\n            ? filterVariables(\n                getMainOperation(operation.query),\n                operation.variables\n              )\n            : operation.variables,\n        },\n        { ...operation.context, optimistic }\n      );\n    };\n\n    // This updates the known dependencies for the passed operation\n    const updateDependencies = (op: Operation, dependencies: Dependencies) => {\n      for (const dep of dependencies.values()) {\n        let depOps = deps.get(dep);\n        if (!depOps) deps.set(dep, (depOps = new Set()));\n        depOps.add(op.key);\n      }\n    };\n\n    // Retrieves a query result from cache and adds an `isComplete` hint\n    // This hint indicates whether the result is \"complete\" or not\n    const operationResultFromCache = (\n      operation: Operation\n    ): OperationResultWithMeta => {\n      initDataState('read', store.data, undefined, false, false);\n      const result = _query(\n        store,\n        operation,\n        results.get(operation.key),\n        undefined\n      );\n      clearDataState();\n      const cacheOutcome: CacheOutcome = result.data\n        ? !result.partial && !result.hasNext\n          ? 'hit'\n          : 'partial'\n        : 'miss';\n\n      results.set(operation.key, result.data);\n      operations.set(operation.key, operation);\n      updateDependencies(operation, result.dependencies);\n\n      return {\n        outcome: cacheOutcome,\n        operation,\n        data: result.data,\n        dependencies: result.dependencies,\n        hasNext: result.hasNext,\n      };\n    };\n\n    // Take any OperationResult and update the cache with it\n    const updateCacheWithResult = (\n      result: OperationResult,\n      pendingOperations: Operations\n    ): OperationResult => {\n      // Retrieve the original operation to get unfiltered variables\n      const operation =\n        operations.get(result.operation.key) || result.operation;\n      if (operation.kind === 'mutation') {\n        // Collect previous dependencies that have been written for optimistic updates\n        const dependencies = optimisticKeysToDependencies.get(operation.key);\n        collectPendingOperations(pendingOperations, dependencies);\n        optimisticKeysToDependencies.delete(operation.key);\n      }\n\n      if (operation.kind === 'subscription' || result.hasNext)\n        reserveLayer(store.data, operation.key, true);\n\n      let queryDependencies: undefined | Dependencies;\n      let data: Data | null = result.data;\n      if (data) {\n        // Write the result to cache and collect all dependencies that need to be\n        // updated\n        initDataState('write', store.data, operation.key, false, false);\n        const writeDependencies = _write(\n          store,\n          operation,\n          data,\n          result.error\n        ).dependencies;\n        clearDataState();\n        collectPendingOperations(pendingOperations, writeDependencies);\n        const prevData =\n          operation.kind === 'query' ? results.get(operation.key) : null;\n        initDataState(\n          'read',\n          store.data,\n          operation.key,\n          false,\n          prevData !== data\n        );\n        const queryResult = _query(\n          store,\n          operation,\n          prevData || data,\n          result.error\n        );\n        clearDataState();\n        data = queryResult.data;\n        if (operation.kind === 'query') {\n          // Collect the query's dependencies for future pending operation updates\n          queryDependencies = queryResult.dependencies;\n          collectPendingOperations(pendingOperations, queryDependencies);\n          results.set(operation.key, data);\n        }\n      } else {\n        noopDataState(store.data, operation.key);\n      }\n\n      // Update this operation's dependencies if it's a query\n      if (queryDependencies) {\n        updateDependencies(result.operation, queryDependencies);\n      }\n\n      return {\n        operation,\n        data,\n        error: result.error,\n        extensions: result.extensions,\n        hasNext: result.hasNext,\n        stale: result.stale,\n      };\n    };\n\n    return operations$ => {\n      // Filter by operations that are cacheable and attempt to query them from the cache\n      const cacheOps$ = pipe(\n        operations$,\n        filter(\n          op =>\n            op.kind === 'query' && op.context.requestPolicy !== 'network-only'\n        ),\n        map(operationResultFromCache),\n        share\n      );\n\n      const nonCacheOps$ = pipe(\n        operations$,\n        filter(\n          op =>\n            op.kind !== 'query' || op.context.requestPolicy === 'network-only'\n        )\n      );\n\n      // Rebound operations that are incomplete, i.e. couldn't be queried just from the cache\n      const cacheMissOps$ = pipe(\n        cacheOps$,\n        filter(\n          res =>\n            res.outcome === 'miss' &&\n            res.operation.context.requestPolicy !== 'cache-only' &&\n            !isBlockedByOptimisticUpdate(res.dependencies) &&\n            !reexecutingOperations.has(res.operation.key)\n        ),\n        map(res => {\n          dispatchDebug({\n            type: 'cacheMiss',\n            message: 'The result could not be retrieved from the cache',\n            operation: res.operation,\n          });\n          return addMetadata(res.operation, { cacheOutcome: 'miss' });\n        })\n      );\n\n      // Resolve OperationResults that the cache was able to assemble completely and trigger\n      // a network request if the current operation's policy is cache-and-network\n      const cacheResult$ = pipe(\n        cacheOps$,\n        filter(\n          res =>\n            res.outcome !== 'miss' ||\n            res.operation.context.requestPolicy === 'cache-only'\n        ),\n        map((res: OperationResultWithMeta): OperationResult => {\n          const { requestPolicy } = res.operation.context;\n\n          // We reexecute requests marked as `cache-and-network`, and partial responses,\n          // if we wouldn't cause a request loop\n          const shouldReexecute =\n            requestPolicy !== 'cache-only' &&\n            (res.hasNext ||\n              requestPolicy === 'cache-and-network' ||\n              (requestPolicy === 'cache-first' &&\n                res.outcome === 'partial' &&\n                !reexecutingOperations.has(res.operation.key)));\n\n          const result: OperationResult = {\n            operation: addMetadata(res.operation, {\n              cacheOutcome: res.outcome,\n            }),\n            data: res.data,\n            error: res.error,\n            extensions: res.extensions,\n            stale: shouldReexecute && !res.hasNext,\n            hasNext: shouldReexecute && res.hasNext,\n          };\n\n          if (!shouldReexecute) {\n            /*noop*/\n          } else if (!isBlockedByOptimisticUpdate(res.dependencies)) {\n            client.reexecuteOperation(\n              toRequestPolicy(\n                operations.get(res.operation.key) || res.operation,\n                'network-only'\n              )\n            );\n          } else if (requestPolicy === 'cache-and-network') {\n            requestedRefetch.add(res.operation.key);\n          }\n\n          dispatchDebug({\n            type: 'cacheHit',\n            message: `A requested operation was found and returned from the cache.`,\n            operation: res.operation,\n            data: {\n              value: result,\n            },\n          });\n\n          return result;\n        })\n      );\n\n      // Forward operations that aren't cacheable and rebound operations\n      // Also update the cache with any network results\n      const result$ = pipe(\n        merge([nonCacheOps$, cacheMissOps$]),\n        map(prepareForwardedOperation),\n        forward\n      );\n\n      // Results that can immediately be resolved\n      const nonOptimisticResults$ = pipe(\n        result$,\n        filter(\n          result => !optimisticKeysToDependencies.has(result.operation.key)\n        ),\n        map(result => {\n          const pendingOperations: Operations = new Set();\n          // Update the cache with the incoming API result\n          const cacheResult = updateCacheWithResult(result, pendingOperations);\n          // Execute all dependent queries\n          executePendingOperations(result.operation, pendingOperations, false);\n          return cacheResult;\n        })\n      );\n\n      // Prevent mutations that were previously optimistic from being flushed\n      // immediately and instead clear them out slowly\n      const optimisticMutationCompletion$ = pipe(\n        result$,\n        filter(result =>\n          optimisticKeysToDependencies.has(result.operation.key)\n        ),\n        mergeMap((result: OperationResult): Source<OperationResult> => {\n          const length = mutationResultBuffer.push(result);\n          if (length < optimisticKeysToDependencies.size) {\n            return empty;\n          }\n\n          for (let i = 0; i < mutationResultBuffer.length; i++) {\n            reserveLayer(store.data, mutationResultBuffer[i].operation.key);\n          }\n\n          blockedDependencies.clear();\n\n          const results: OperationResult[] = [];\n          const pendingOperations: Operations = new Set();\n\n          let bufferedResult: OperationResult | void;\n          while ((bufferedResult = mutationResultBuffer.shift()))\n            results.push(\n              updateCacheWithResult(bufferedResult, pendingOperations)\n            );\n\n          // Execute all dependent queries as a single batch\n          executePendingOperations(result.operation, pendingOperations, false);\n\n          return fromArray(results);\n        })\n      );\n\n      return merge([\n        nonOptimisticResults$,\n        optimisticMutationCompletion$,\n        cacheResult$,\n      ]);\n    };\n  };\n","import { pipe, share, merge, makeSubject, filter, onPush } from 'wonka';\n\nimport type {\n  Operation,\n  OperationResult,\n  Exchange,\n  ExchangeIO,\n  CombinedError,\n  RequestPolicy,\n} from '@urql/core';\nimport { stringifyDocument, createRequest, makeOperation } from '@urql/core';\n\nimport type {\n  SerializedRequest,\n  CacheExchangeOpts,\n  StorageAdapter,\n} from './types';\nimport { cacheExchange } from './cacheExchange';\nimport { toRequestPolicy } from './helpers/operation';\n\nconst policyLevel = {\n  'cache-only': 0,\n  'cache-first': 1,\n  'network-only': 2,\n  'cache-and-network': 3,\n} as const;\n\n/** Input parameters for the {@link offlineExchange}.\n * @remarks\n * This configuration object extends the {@link CacheExchangeOpts}\n * as the `offlineExchange` extends the regular {@link cacheExchange}.\n */\nexport interface OfflineExchangeOpts extends CacheExchangeOpts {\n  /** Configures an offline storage adapter for Graphcache.\n   *\n   * @remarks\n   * A {@link StorageAdapter} allows Graphcache to write data to an external,\n   * asynchronous storage, and hydrate data from it when it first loads.\n   * This allows you to preserve normalized data between restarts/reloads.\n   *\n   * @see {@link https://urql.dev/goto/docs/graphcache/offline} for the full Offline Support docs.\n   */\n  storage: StorageAdapter;\n  /** Predicate function to determine whether a {@link CombinedError} hints at a network error.\n   *\n   * @remarks\n   * Not ever {@link CombinedError} means that the device is offline and by default\n   * the `offlineExchange` will check for common network error messages and check\n   * `navigator.onLine`. However, when `isOfflineError` is passed it can replace\n   * the default offline detection.\n   */\n  isOfflineError?(\n    error: undefined | CombinedError,\n    result: OperationResult\n  ): boolean;\n}\n\n/** Exchange factory that creates a normalized cache exchange in Offline Support mode.\n *\n * @param opts - A {@link OfflineExchangeOpts} configuration object.\n * @returns the created normalized, offline cache {@link Exchange}.\n *\n * @remarks\n * The `offlineExchange` is a wrapper around the regular {@link cacheExchange}\n * which adds logic via the {@link OfflineExchangeOpts.storage} adapter to\n * recognize when it’s offline, when to retry failed mutations, and how\n * to handle longer periods of being offline.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache/offline} for the full Offline Support docs.\n */\nexport const offlineExchange =\n  <C extends OfflineExchangeOpts>(opts: C): Exchange =>\n  input => {\n    const { storage } = opts;\n\n    const isOfflineError =\n      opts.isOfflineError ||\n      ((error: undefined | CombinedError) =>\n        error &&\n        error.networkError &&\n        !error.response &&\n        ((typeof navigator !== 'undefined' && navigator.onLine === false) ||\n          /request failed|failed to fetch|network\\s?error/i.test(\n            error.networkError.message\n          )));\n\n    if (\n      storage &&\n      storage.onOnline &&\n      storage.readMetadata &&\n      storage.writeMetadata\n    ) {\n      const { forward: outerForward, client, dispatchDebug } = input;\n      const { source: reboundOps$, next } = makeSubject<Operation>();\n      const failedQueue: Operation[] = [];\n      let hasRehydrated = false;\n      let isFlushingQueue = false;\n\n      const updateMetadata = () => {\n        if (hasRehydrated) {\n          const requests: SerializedRequest[] = [];\n          for (let i = 0; i < failedQueue.length; i++) {\n            const operation = failedQueue[i];\n            if (operation.kind === 'mutation') {\n              requests.push({\n                query: stringifyDocument(operation.query),\n                variables: operation.variables,\n                extensions: operation.extensions,\n              });\n            }\n          }\n          storage.writeMetadata!(requests);\n        }\n      };\n\n      const filterQueue = (key: number) => {\n        for (let i = failedQueue.length - 1; i >= 0; i--)\n          if (failedQueue[i].key === key) failedQueue.splice(i, 1);\n      };\n\n      const flushQueue = () => {\n        if (!isFlushingQueue) {\n          const sent = new Set<number>();\n          isFlushingQueue = true;\n          for (let i = 0; i < failedQueue.length; i++) {\n            const operation = failedQueue[i];\n            if (operation.kind === 'mutation' || !sent.has(operation.key)) {\n              sent.add(operation.key);\n              if (operation.kind !== 'subscription') {\n                next(makeOperation('teardown', operation));\n                let overridePolicy: RequestPolicy = 'cache-first';\n                for (let i = 0; i < failedQueue.length; i++) {\n                  const { requestPolicy } = failedQueue[i].context;\n                  if (policyLevel[requestPolicy] > policyLevel[overridePolicy])\n                    overridePolicy = requestPolicy;\n                }\n                next(toRequestPolicy(operation, overridePolicy));\n              } else {\n                next(toRequestPolicy(operation, 'cache-first'));\n              }\n            }\n          }\n          isFlushingQueue = false;\n          failedQueue.length = 0;\n          updateMetadata();\n        }\n      };\n\n      const forward: ExchangeIO = ops$ => {\n        return pipe(\n          outerForward(ops$),\n          filter(res => {\n            if (\n              hasRehydrated &&\n              res.operation.kind === 'mutation' &&\n              res.operation.context.optimistic &&\n              isOfflineError(res.error, res)\n            ) {\n              failedQueue.push(res.operation);\n              updateMetadata();\n              return false;\n            }\n\n            return true;\n          }),\n          share\n        );\n      };\n\n      const cacheResults$ = cacheExchange({\n        ...opts,\n        storage: {\n          ...storage,\n          readData() {\n            const hydrate = storage.readData();\n            return {\n              async then(onEntries) {\n                const mutations = await storage.readMetadata!();\n                for (let i = 0; mutations && i < mutations.length; i++) {\n                  failedQueue.push(\n                    client.createRequestOperation(\n                      'mutation',\n                      createRequest(mutations[i].query, mutations[i].variables),\n                      mutations[i].extensions\n                    )\n                  );\n                }\n                onEntries!(await hydrate);\n                storage.onOnline!(flushQueue);\n                hasRehydrated = true;\n                flushQueue();\n              },\n            };\n          },\n        },\n      })({\n        client,\n        dispatchDebug,\n        forward,\n      });\n\n      return operations$ => {\n        const opsAndRebound$ = merge([\n          reboundOps$,\n          pipe(\n            operations$,\n            onPush(operation => {\n              if (operation.kind === 'query' && !hasRehydrated) {\n                failedQueue.push(operation);\n              } else if (operation.kind === 'teardown') {\n                filterQueue(operation.key);\n              }\n            })\n          ),\n        ]);\n\n        return pipe(\n          cacheResults$(opsAndRebound$),\n          filter(res => {\n            if (res.operation.kind === 'query') {\n              if (isOfflineError(res.error, res)) {\n                next(toRequestPolicy(res.operation, 'cache-only'));\n                failedQueue.push(res.operation);\n                return false;\n              } else if (!hasRehydrated) {\n                filterQueue(res.operation.key);\n              }\n            }\n            return true;\n          })\n        );\n      };\n    }\n\n    return cacheExchange(opts)(input);\n  };\n"],"names":["helpUrl","cache","Set","currentDebugStack","popDebugNode","pop","pushDebugNode","typename","node","identifier","kind","Kind","INLINE_FRAGMENT","OPERATION_DEFINITION","name","value","operation","FRAGMENT_DEFINITION","push","getDebugOutput","length","join","invariant","condition","message","code","errorMessage","process","env","NODE_ENV","error","Error","warn","logger","has","console","add","EMPTY_DIRECTIVES","getDirectives","_directives","getName","getFragmentTypeName","typeCondition","getFieldAlias","alias","emptySelectionSet","getSelectionSet","selectionSet","selections","getTypeCondition","getFieldArguments","vars","args","arguments","i","l","arg","valueFromASTUntyped","filterVariables","input","variableDefinitions","variable","normalizeVariables","def","undefined","defaultValue","key","getMainOperation","doc","definitions","getFragments","fragments","shouldInclude","directives","include","skip","directive","isDeferred","defer","argument","BUILTIN_NAME","isFieldNullable","schema","fieldName","field","getField","type","isListNullable","ofType","isFieldAvailableOnType","indexOf","isInterfaceOfType","types","get","expectAbstractType","expectObjectType","isSubType","fields","warnAboutResolver","warnAboutAbstractResolver","keyOfField","stringifyVariables","joinKeys","parentKey","fieldInfoOfKey","fieldKey","parenIndex","slice","JSON","parse","deserializeKeyInfo","dotIndex","entityKey","replace","currentOwnership","currentDataMapping","currentData","currentOptimisticKey","currentOperation","currentDependencies","currentForeignData","currentOptimistic","makeData","data","isArray","newData","set","ownsData","initDataState","operationType","layerKey","isOptimistic","isForeignData","WeakSet","WeakMap","hydrating","optimisticOrder","commutativeKeys","reserveLayer","splice","delete","createLayer","deleteLayer","clearDataState","getCurrentDependencies","dirtyKeys","squashLayer","storage","setTimeout","gc","persistData","noopDataState","deferredKeys","setNode","map","keymap","optimistic","base","entity","Object","create","getNode","updateRCForLink","link","by","Array","updateRCForEntity","count","refCount","newCount","extractNodeFields","fieldInfos","seenFieldKeys","extractNodeMapFields","keys","records","linkNode","links","updateDependencies","queryRootKey","updatePersist","persist","serializeKeys","readRecord","readLink","writeRecord","hasField","writeLink","entityLinks","hasNext","index","clearLayer","unshift","Map","previousDependencies","entry","entries","keyMap","inspectFields","x","writeData","clear","contextRef","deferRef","getFieldError","ctx","__internal","path","errorMap","makeContext","store","variables","parent","__typename","parentTypeName","parentFieldKey","partial","graphQLErrors","graphQLError","updateContext","isFragmentHeuristicallyMatching","some","FIELD","makeSelectionIterator","child","next","select","fragment","_generated","ensureData","ensureLink","ref","keyOfEntity","_query","request","query","formatDocument","rootKey","rootFields","rootSelect","readRoot","InMemoryData","readSelection","dependencies","rootNames","iterate","hasChanged","output","fieldAlias","fieldValue","dataFieldValue","readRootField","originalData","getFieldResolver","resolvers","fieldResolver","directiveResolver","directiveNode","result","isQuery","mutation","subscription","hasFields","hasPartials","fieldArgs","resolver","resultValue","resolveResolverResult","resolveLink","optional","required","stringify","prevData","isOwnedData","_isListNullable","childResult","isDataOrKey","newLink","childLink","_write","writeSelection","rootField","isRoot","updates","optimisticMutations","writeField","updater","KEYLESS_TYPE_RE","prevLink","indexKey","test","childKey","Store","constructor","opts","this","globalIDs","queryName","mutationName","subscriptionName","buildClientSchema","__schema","typemap","buildNameMap","arr","buildType","interfaces","possibleTypes","queryType","mutationType","subscriptionType","abstract","possible","abstractType","possibleType","out","expectValidKeyingConfig","expectValidUpdatesConfig","addition","expectValidResolversConfig","validQueries","resolverQuery","Query","validTypeProperties","resolverProperty","expectValidOptimisticMutationsConfig","validMutations","id","_id","resolve","resolveFieldByKey","invalidate","invalidateEntity","updateQuery","createRequest","readQuery","readFragment","fragmentName","_queryFragment","writeFragment","_writeFragment","dataToWrite","rest","addMetadata","meta","makeOperation","context","toRequestPolicy","requestPolicy","cacheExchange","forward","client","dispatchDebug","readData","then","hydrateData","onCacheHydrated","optimisticKeysToDependencies","mutationResultBuffer","operations","results","blockedDependencies","requestedRefetch","deps","reexecutingOperations","dependentOperations","isBlockedByOptimisticUpdate","dep","values","collectPendingOperations","pendingOperations","executePendingOperations","op","policy","reexecuteOperation","_reexecutingOperations","prepareForwardedOperation","size","depOps","operationResultFromCache","cacheOutcome","outcome","updateCacheWithResult","queryDependencies","writeDependencies","queryResult","extensions","stale","operations$","cacheOps$","share","filter","nonCacheOps$","cacheMissOps$","res","source","cacheResult$","shouldReexecute","result$","merge","nonOptimisticResults$","cacheResult","optimisticMutationCompletion$","mergeMap","empty","bufferedResult","shift","fromArray","policyLevel","offlineExchange","isOfflineError","networkError","response","navigator","onLine","onOnline","readMetadata","writeMetadata","outerForward","reboundOps$","makeSubject","failedQueue","hasRehydrated","isFlushingQueue","updateMetadata","requests","stringifyDocument","filterQueue","flushQueue","sent","overridePolicy","cacheResults$","hydrate","async","onEntries","mutations","createRequestOperation","ops$","opsAndRebound$","onPush"],"mappings":"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"}