import { HTMLProps, ReactNode } from 'react';
import { ContextData, Middleware, Placement, ReferenceElement } from '@floating-ui/react';
import { BaseStyleProps } from "../../style/dist/keystar-ui-style.cjs.js";
export type EditorPopoverProps = {
    children: ReactNode;
    reference: ReferenceElement;
    placement?: Placement;
    /**
     * How the popover should adapt when constrained by available space in the viewport.
     * @default 'flip'
     */
    adaptToViewport?: 'flip' | 'stick' | 'stretch';
} & Pick<BaseStyleProps, 'height' | 'width' | 'maxHeight' | 'maxWidth' | 'minHeight' | 'minWidth' | 'UNSAFE_className' | 'UNSAFE_style'>;
export type EditorPopoverRef = {
    context: ContextData;
    update: () => void;
};
export declare const EditorPopover: import("react").ForwardRefExoticComponent<{
    children: ReactNode;
    reference: ReferenceElement;
    placement?: Placement | undefined;
    /**
     * How the popover should adapt when constrained by available space in the viewport.
     * @default 'flip'
     */
    adaptToViewport?: "stretch" | "flip" | "stick" | undefined;
} & Pick<BaseStyleProps, "UNSAFE_className" | "UNSAFE_style" | "height" | "width" | "minWidth" | "minHeight" | "maxWidth" | "maxHeight"> & import("react").RefAttributes<EditorPopoverRef>>;
export declare const DEFAULT_OFFSET = 8;
export declare function getMiddleware(props: EditorPopoverProps): Array<Middleware | null | undefined | false>;
export declare const DialogElement: import("react").ForwardRefExoticComponent<Omit<HTMLProps<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
