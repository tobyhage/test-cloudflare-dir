{"version":3,"file":"urql-exchange-graphcache.js","sources":["../src/helpers/help.ts","../src/ast/node.ts","../src/ast/variables.ts","../src/ast/traversal.ts","../src/ast/schema.ts","../src/ast/schemaPredicates.ts","../src/store/keys.ts","../src/store/data.ts","../src/operations/shared.ts","../src/operations/query.ts","../src/operations/write.ts","../src/operations/invalidate.ts","../src/store/store.ts","../src/helpers/operation.ts","../src/cacheExchange.ts","../src/offlineExchange.ts"],"sourcesContent":["// These are guards that are used throughout the codebase to warn or error on\n// unexpected behaviour or conditions.\n// Every warning and error comes with a number that uniquely identifies them.\n// You can read more about the messages themselves in `docs/graphcache/errors.md`\n\nimport type {\n  ExecutableDefinitionNode,\n  InlineFragmentNode,\n} from '@0no-co/graphql.web';\nimport type { Logger } from '../types';\nimport { Kind } from '@0no-co/graphql.web';\n\nexport type ErrorCode =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25\n  | 26\n  | 27\n  | 28;\n\ntype DebugNode = ExecutableDefinitionNode | InlineFragmentNode;\n\n// URL unfurls to https://formidable.com/open-source/urql/docs/graphcache/errors/\nconst helpUrl = '\\nhttps://bit.ly/2XbVrpR#';\nconst cache = new Set<string>();\n\nexport const currentDebugStack: string[] = [];\n\nexport const popDebugNode = () => currentDebugStack.pop();\n\nexport const pushDebugNode = (typename: void | string, node: DebugNode) => {\n  let identifier = '';\n  if (node.kind === Kind.INLINE_FRAGMENT) {\n    identifier = typename\n      ? `Inline Fragment on \"${typename}\"`\n      : 'Inline Fragment';\n  } else if (node.kind === Kind.OPERATION_DEFINITION) {\n    const name = node.name ? `\"${node.name.value}\"` : 'Unnamed';\n    identifier = `${name} ${node.operation}`;\n  } else if (node.kind === Kind.FRAGMENT_DEFINITION) {\n    identifier = `\"${node.name.value}\" Fragment`;\n  }\n\n  if (identifier) {\n    currentDebugStack.push(identifier);\n  }\n};\n\nconst getDebugOutput = (): string =>\n  currentDebugStack.length\n    ? '\\n(Caused At: ' + currentDebugStack.join(', ') + ')'\n    : '';\n\nexport function invariant(\n  condition: any,\n  message: string,\n  code: ErrorCode\n): asserts condition {\n  if (!condition) {\n    let errorMessage = message || 'Minfied Error #' + code + '\\n';\n    if (process.env.NODE_ENV !== 'production') {\n      errorMessage += getDebugOutput();\n    }\n\n    const error = new Error(errorMessage + helpUrl + code);\n    error.name = 'Graphcache Error';\n    throw error;\n  }\n}\n\nexport function warn(\n  message: string,\n  code: ErrorCode,\n  logger: Logger | undefined\n) {\n  if (!cache.has(message)) {\n    if (logger) {\n      logger('warn', message + getDebugOutput() + helpUrl + code);\n    } else {\n      console.warn(message + getDebugOutput() + helpUrl + code);\n    }\n    cache.add(message);\n  }\n}\n","import type {\n  NamedTypeNode,\n  NameNode,\n  DirectiveNode,\n  SelectionNode,\n  SelectionSetNode,\n  FieldNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { FormattedNode } from '@urql/core';\n\nexport type SelectionSet = readonly FormattedNode<SelectionNode>[];\n\nconst EMPTY_DIRECTIVES: Record<string, DirectiveNode | undefined> = {};\n\n/** Returns the directives dictionary of a given node */\nexport const getDirectives = (node: {\n  _directives?: Record<string, DirectiveNode | undefined>;\n}) => node._directives || EMPTY_DIRECTIVES;\n\n/** Returns the name of a given node */\nexport const getName = (node: { name: NameNode }): string => node.name.value;\n\nexport const getFragmentTypeName = (node: FragmentDefinitionNode): string =>\n  node.typeCondition.name.value;\n\n/** Returns either the field's name or the field's alias */\nexport const getFieldAlias = (node: FieldNode): string =>\n  node.alias ? node.alias.value : node.name.value;\n\nconst emptySelectionSet: SelectionSet = [];\n\n/** Returns the SelectionSet for a given inline or defined fragment node */\nexport const getSelectionSet = (node: {\n  selectionSet?: FormattedNode<SelectionSetNode>;\n}): FormattedNode<SelectionSet> =>\n  (node.selectionSet\n    ? node.selectionSet.selections\n    : emptySelectionSet) as FormattedNode<SelectionSet>;\n\nexport const getTypeCondition = (node: {\n  typeCondition?: NamedTypeNode;\n}): string | null =>\n  node.typeCondition ? node.typeCondition.name.value : null;\n","import type {\n  FieldNode,\n  DirectiveNode,\n  OperationDefinitionNode,\n} from '@0no-co/graphql.web';\nimport { valueFromASTUntyped } from '@0no-co/graphql.web';\n\nimport { getName } from './node';\n\nimport type { Variables } from '../types';\n\n/** Evaluates a fields arguments taking vars into account */\nexport const getFieldArguments = (\n  node: FieldNode | DirectiveNode,\n  vars: Variables\n): null | Variables => {\n  let args: null | Variables = null;\n  if (node.arguments) {\n    for (let i = 0, l = node.arguments.length; i < l; i++) {\n      const arg = node.arguments[i];\n      const value = valueFromASTUntyped(arg.value, vars);\n      if (value !== undefined && value !== null) {\n        if (!args) args = {};\n        args[getName(arg)] = value as any;\n      }\n    }\n  }\n  return args;\n};\n\n/** Returns a filtered form of variables with values missing that the query doesn't require */\nexport const filterVariables = (\n  node: OperationDefinitionNode,\n  input: void | object\n) => {\n  if (!input || !node.variableDefinitions) {\n    return undefined;\n  }\n\n  const vars = {};\n  for (let i = 0, l = node.variableDefinitions.length; i < l; i++) {\n    const name = getName(node.variableDefinitions[i].variable);\n    vars[name] = input[name];\n  }\n\n  return vars;\n};\n\n/** Returns a normalized form of variables with defaulted values */\nexport const normalizeVariables = (\n  node: OperationDefinitionNode,\n  input: void | Record<string, unknown>\n): Variables => {\n  const vars = {};\n  if (!input) return vars;\n\n  if (node.variableDefinitions) {\n    for (let i = 0, l = node.variableDefinitions.length; i < l; i++) {\n      const def = node.variableDefinitions[i];\n      const name = getName(def.variable);\n      vars[name] =\n        input[name] === undefined && def.defaultValue\n          ? valueFromASTUntyped(def.defaultValue, input)\n          : input[name];\n    }\n  }\n\n  for (const key in input) {\n    if (!(key in vars)) vars[key] = input[key];\n  }\n\n  return vars;\n};\n","import type {\n  SelectionNode,\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n} from '@0no-co/graphql.web';\nimport { valueFromASTUntyped, Kind } from '@0no-co/graphql.web';\n\nimport type { FormattedNode } from '@urql/core';\nimport { getName, getDirectives } from './node';\nimport { invariant } from '../helpers/help';\nimport type { Fragments, Variables } from '../types';\n\nfunction getMainOperation(\n  doc: FormattedNode<DocumentNode>\n): FormattedNode<OperationDefinitionNode>;\nfunction getMainOperation(doc: DocumentNode): OperationDefinitionNode;\n\n/** Returns the main operation's definition */\nfunction getMainOperation(doc: DocumentNode): OperationDefinitionNode {\n  for (let i = 0; i < doc.definitions.length; i++) {\n    if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n      return doc.definitions[i] as FormattedNode<OperationDefinitionNode>;\n    }\n  }\n\n  invariant(\n    false,\n    'Invalid GraphQL document: All GraphQL documents must contain an OperationDefinition' +\n      'node for a query, subscription, or mutation.',\n    1\n  );\n}\n\nexport { getMainOperation };\n\n/** Returns a mapping from fragment names to their selections */\nexport const getFragments = (doc: FormattedNode<DocumentNode>): Fragments => {\n  const fragments: Fragments = {};\n  for (let i = 0; i < doc.definitions.length; i++) {\n    const node = doc.definitions[i];\n    if (node.kind === Kind.FRAGMENT_DEFINITION) {\n      fragments[getName(node)] = node;\n    }\n  }\n\n  return fragments;\n};\n\n/** Resolves @include and @skip directives to determine whether field is included. */\nexport const shouldInclude = (\n  node: FormattedNode<SelectionNode>,\n  vars: Variables\n): boolean => {\n  const directives = getDirectives(node);\n  if (directives.include || directives.skip) {\n    // Finds any @include or @skip directive that forces the node to be skipped\n    for (const name in directives) {\n      const directive = directives[name];\n      if (\n        directive &&\n        (name === 'include' || name === 'skip') &&\n        directive.arguments &&\n        directive.arguments[0] &&\n        getName(directive.arguments[0]) === 'if'\n      ) {\n        // Return whether this directive forces us to skip\n        // `@include(if: false)` or `@skip(if: true)`\n        const value = valueFromASTUntyped(directive.arguments[0].value, vars);\n        return name === 'include' ? !!value : !value;\n      }\n    }\n  }\n  return true;\n};\n\n/** Resolves @defer directive to determine whether a fragment is potentially skipped. */\nexport const isDeferred = (\n  node: FormattedNode<FragmentSpreadNode | InlineFragmentNode>,\n  vars: Variables\n): boolean => {\n  const { defer } = getDirectives(node);\n  if (defer) {\n    for (const argument of defer.arguments || []) {\n      if (getName(argument) === 'if') {\n        // Return whether `@defer(if: )` is enabled\n        return !!valueFromASTUntyped(argument.value, vars);\n      }\n    }\n    return true;\n  }\n\n  return false;\n};\n","import type {\n  IntrospectionQuery,\n  IntrospectionTypeRef,\n  IntrospectionInputValue,\n  IntrospectionType,\n} from './graphql';\n\nexport interface SchemaField {\n  name: string;\n  type: IntrospectionTypeRef;\n  args(): Record<string, IntrospectionInputValue | void>;\n}\n\nexport interface SchemaObject {\n  name: string;\n  kind: 'INTERFACE' | 'OBJECT';\n  interfaces(): Record<string, unknown>;\n  fields(): Record<string, SchemaField | void>;\n}\n\nexport interface SchemaUnion {\n  name: string;\n  kind: 'UNION';\n  types(): Record<string, unknown>;\n}\n\nexport interface SchemaIntrospector {\n  query: string | null;\n  mutation: string | null;\n  subscription: string | null;\n  types?: Map<string, SchemaObject | SchemaUnion>;\n  isSubType(abstract: string, possible: string): boolean;\n}\n\nexport interface PartialIntrospectionSchema {\n  queryType: { name: string; kind?: any };\n  mutationType?: { name: string; kind?: any } | null;\n  subscriptionType?: { name: string; kind?: any } | null;\n  types?: readonly any[];\n}\n\nexport type IntrospectionData =\n  | IntrospectionQuery\n  | { __schema: PartialIntrospectionSchema };\n\nexport const buildClientSchema = ({\n  __schema,\n}: IntrospectionData): SchemaIntrospector => {\n  const typemap: Map<string, SchemaObject | SchemaUnion> = new Map();\n\n  const buildNameMap = <T extends { name: string }>(\n    arr: ReadonlyArray<T>\n  ): (() => { [name: string]: T }) => {\n    let map: Record<string, T> | void;\n    return () => {\n      if (!map) {\n        map = {};\n        for (let i = 0; i < arr.length; i++) map[arr[i].name] = arr[i];\n      }\n      return map;\n    };\n  };\n\n  const buildType = (\n    type: IntrospectionType\n  ): SchemaObject | SchemaUnion | void => {\n    switch (type.kind) {\n      case 'OBJECT':\n      case 'INTERFACE':\n        return {\n          name: type.name,\n          kind: type.kind as 'OBJECT' | 'INTERFACE',\n          interfaces: buildNameMap(type.interfaces || []),\n          fields: buildNameMap(\n            type.fields!.map((field: any) => ({\n              name: field.name,\n              type: field.type,\n              args: buildNameMap(field.args),\n            }))\n          ),\n        } as SchemaObject;\n      case 'UNION':\n        return {\n          name: type.name,\n          kind: type.kind as 'UNION',\n          types: buildNameMap(type.possibleTypes || []),\n        } as SchemaUnion;\n    }\n  };\n\n  const schema: SchemaIntrospector = {\n    query: __schema.queryType ? __schema.queryType.name : null,\n    mutation: __schema.mutationType ? __schema.mutationType.name : null,\n    subscription: __schema.subscriptionType\n      ? __schema.subscriptionType.name\n      : null,\n    types: undefined,\n    isSubType(abstract: string, possible: string) {\n      const abstractType = typemap.get(abstract);\n      const possibleType = typemap.get(possible);\n      if (!abstractType || !possibleType) {\n        return false;\n      } else if (abstractType.kind === 'UNION') {\n        return !!abstractType.types()[possible];\n      } else if (\n        abstractType.kind !== 'OBJECT' &&\n        possibleType.kind === 'OBJECT'\n      ) {\n        return !!possibleType.interfaces()[abstract];\n      } else {\n        return abstract === possible;\n      }\n    },\n  };\n\n  if (__schema.types) {\n    schema.types = typemap;\n    for (let i = 0; i < __schema.types.length; i++) {\n      const type = __schema.types[i];\n      if (type && type.name) {\n        const out = buildType(type);\n        if (out) typemap.set(type.name, out);\n      }\n    }\n  }\n\n  return schema;\n};\n","import type {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport { warn, invariant } from '../helpers/help';\nimport { getTypeCondition } from './node';\nimport type { SchemaIntrospector, SchemaObject } from './schema';\n\nimport type {\n  KeyingConfig,\n  UpdatesConfig,\n  ResolverConfig,\n  OptimisticMutationConfig,\n  Logger,\n} from '../types';\n\nconst BUILTIN_NAME = '__';\n\nexport const isFieldNullable = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean => {\n  const field = getField(schema, typename, fieldName, logger);\n  return !!field && field.type.kind !== 'NON_NULL';\n};\n\nexport const isListNullable = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean => {\n  const field = getField(schema, typename, fieldName, logger);\n  if (!field) return false;\n  const ofType =\n    field.type.kind === 'NON_NULL' ? field.type.ofType : field.type;\n  return ofType.kind === 'LIST' && ofType.ofType.kind !== 'NON_NULL';\n};\n\nexport const isFieldAvailableOnType = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean =>\n  fieldName.indexOf(BUILTIN_NAME) === 0 ||\n  typename.indexOf(BUILTIN_NAME) === 0 ||\n  !!getField(schema, typename, fieldName, logger);\n\nexport const isInterfaceOfType = (\n  schema: SchemaIntrospector,\n  node: InlineFragmentNode | FragmentDefinitionNode,\n  typename: string | void\n): boolean => {\n  if (!typename) return false;\n  const typeCondition = getTypeCondition(node);\n  if (!typeCondition || typename === typeCondition) {\n    return true;\n  } else if (\n    schema.types!.has(typeCondition) &&\n    schema.types!.get(typeCondition)!.kind === 'OBJECT'\n  ) {\n    return typeCondition === typename;\n  }\n\n  expectAbstractType(schema, typeCondition!);\n  expectObjectType(schema, typename!);\n  return schema.isSubType(typeCondition, typename);\n};\n\nconst getField = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n) => {\n  if (\n    fieldName.indexOf(BUILTIN_NAME) === 0 ||\n    typename.indexOf(BUILTIN_NAME) === 0\n  )\n    return;\n\n  expectObjectType(schema, typename);\n  const object = schema.types!.get(typename) as SchemaObject;\n  const field = object.fields()[fieldName];\n  if (!field) {\n    warn(\n      'Invalid field: The field `' +\n        fieldName +\n        '` does not exist on `' +\n        typename +\n        '`, ' +\n        'but the GraphQL document expects it to exist.\\n' +\n        'Traversal will continue, however this may lead to undefined behavior!',\n      4,\n      logger\n    );\n  }\n\n  return field;\n};\n\nfunction expectObjectType(schema: SchemaIntrospector, typename: string) {\n  invariant(\n    schema.types!.has(typename) &&\n      schema.types!.get(typename)!.kind === 'OBJECT',\n    'Invalid Object type: The type `' +\n      typename +\n      '` is not an object in the defined schema, ' +\n      'but the GraphQL document is traversing it.',\n    3\n  );\n}\n\nfunction expectAbstractType(schema: SchemaIntrospector, typename: string) {\n  invariant(\n    schema.types!.has(typename) &&\n      (schema.types!.get(typename)!.kind === 'INTERFACE' ||\n        schema.types!.get(typename)!.kind === 'UNION'),\n    'Invalid Abstract type: The type `' +\n      typename +\n      '` is not an Interface or Union type in the defined schema, ' +\n      'but a fragment in the GraphQL document is using it as a type condition.',\n    5\n  );\n}\n\nexport function expectValidKeyingConfig(\n  schema: SchemaIntrospector,\n  keys: KeyingConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const key in keys) {\n      if (!schema.types!.has(key)) {\n        warn(\n          'Invalid Object type: The type `' +\n            key +\n            '` is not an object in the defined schema, but the `keys` option is referencing it.',\n          20,\n          logger\n        );\n      }\n    }\n  }\n}\n\nexport function expectValidUpdatesConfig(\n  schema: SchemaIntrospector,\n  updates: UpdatesConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  for (const typename in updates) {\n    if (!updates[typename]) {\n      continue;\n    } else if (!schema.types!.has(typename)) {\n      let addition = '';\n\n      if (\n        typename === 'Mutation' &&\n        schema.mutation &&\n        schema.mutation !== 'Mutation'\n      ) {\n        addition +=\n          '\\nMaybe your config should reference `' + schema.mutation + '`?';\n      } else if (\n        typename === 'Subscription' &&\n        schema.subscription &&\n        schema.subscription !== 'Subscription'\n      ) {\n        addition +=\n          '\\nMaybe your config should reference `' + schema.subscription + '`?';\n      }\n\n      return warn(\n        'Invalid updates type: The type `' +\n          typename +\n          '` is not an object in the defined schema, but the `updates` config is referencing it.' +\n          addition,\n        21,\n        logger\n      );\n    }\n\n    const fields = (schema.types!.get(typename)! as SchemaObject).fields();\n    for (const fieldName in updates[typename]!) {\n      if (!fields[fieldName]) {\n        warn(\n          'Invalid updates field: `' +\n            fieldName +\n            '` on `' +\n            typename +\n            '` is not in the defined schema, but the `updates` config is referencing it.',\n          22,\n          logger\n        );\n      }\n    }\n  }\n}\n\nfunction warnAboutResolver(name: string, logger: Logger | undefined): void {\n  warn(\n    `Invalid resolver: \\`${name}\\` is not in the defined schema, but the \\`resolvers\\` option is referencing it.`,\n    23,\n    logger\n  );\n}\n\nfunction warnAboutAbstractResolver(\n  name: string,\n  kind: 'UNION' | 'INTERFACE',\n  logger: Logger | undefined\n): void {\n  warn(\n    `Invalid resolver: \\`${name}\\` does not match to a concrete type in the schema, but the \\`resolvers\\` option is referencing it. Implement the resolver for the types that ${\n      kind === 'UNION' ? 'make up the union' : 'implement the interface'\n    } instead.`,\n    26,\n    logger\n  );\n}\n\nexport function expectValidResolversConfig(\n  schema: SchemaIntrospector,\n  resolvers: ResolverConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  for (const key in resolvers) {\n    if (key === 'Query') {\n      if (schema.query) {\n        const validQueries = (\n          schema.types!.get(schema.query) as SchemaObject\n        ).fields();\n        for (const resolverQuery in resolvers.Query || {}) {\n          if (!validQueries[resolverQuery]) {\n            warnAboutResolver('Query.' + resolverQuery, logger);\n          }\n        }\n      } else {\n        warnAboutResolver('Query', logger);\n      }\n    } else {\n      if (!schema.types!.has(key)) {\n        warnAboutResolver(key, logger);\n      } else if (\n        schema.types!.get(key)!.kind === 'INTERFACE' ||\n        schema.types!.get(key)!.kind === 'UNION'\n      ) {\n        warnAboutAbstractResolver(\n          key,\n          schema.types!.get(key)!.kind as 'INTERFACE' | 'UNION',\n          logger\n        );\n      } else {\n        const validTypeProperties = (\n          schema.types!.get(key) as SchemaObject\n        ).fields();\n        for (const resolverProperty in resolvers[key] || {}) {\n          if (!validTypeProperties[resolverProperty]) {\n            warnAboutResolver(key + '.' + resolverProperty, logger);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function expectValidOptimisticMutationsConfig(\n  schema: SchemaIntrospector,\n  optimisticMutations: OptimisticMutationConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  if (schema.mutation) {\n    const validMutations = (\n      schema.types!.get(schema.mutation) as SchemaObject\n    ).fields();\n    for (const mutation in optimisticMutations) {\n      if (!validMutations[mutation]) {\n        warn(\n          `Invalid optimistic mutation field: \\`${mutation}\\` is not a mutation field in the defined schema, but the \\`optimistic\\` option is referencing it.`,\n          24,\n          logger\n        );\n      }\n    }\n  }\n}\n","import { stringifyVariables } from '@urql/core';\nimport type { FieldArgs, FieldInfo, KeyInfo } from '../types';\n\nexport const keyOfField = (fieldName: string, args?: FieldArgs) =>\n  args ? `${fieldName}(${stringifyVariables(args)})` : fieldName;\n\nexport const joinKeys = (parentKey: string, key: string) =>\n  `${parentKey}.${key}`;\n\nexport const fieldInfoOfKey = (fieldKey: string): FieldInfo => {\n  const parenIndex = fieldKey.indexOf('(');\n  if (parenIndex > -1) {\n    return {\n      fieldKey,\n      fieldName: fieldKey.slice(0, parenIndex),\n      arguments: JSON.parse(fieldKey.slice(parenIndex + 1, -1)),\n    };\n  } else {\n    return {\n      fieldKey,\n      fieldName: fieldKey,\n      arguments: null,\n    };\n  }\n};\n\nexport const serializeKeys = (entityKey: string, fieldKey: string) =>\n  `${entityKey.replace(/\\./g, '%2e')}.${fieldKey}`;\n\nexport const deserializeKeyInfo = (key: string): KeyInfo => {\n  const dotIndex = key.indexOf('.');\n  const entityKey = key.slice(0, dotIndex).replace(/%2e/g, '.');\n  const fieldKey = key.slice(dotIndex + 1);\n  return { entityKey, fieldKey };\n};\n","import { stringifyVariables } from '@urql/core';\n\nimport type {\n  Link,\n  EntityField,\n  FieldInfo,\n  StorageAdapter,\n  SerializedEntries,\n  Dependencies,\n  OperationType,\n  DataField,\n  Data,\n} from '../types';\n\nimport {\n  serializeKeys,\n  deserializeKeyInfo,\n  fieldInfoOfKey,\n  joinKeys,\n} from './keys';\n\nimport { invariant, currentDebugStack } from '../helpers/help';\n\ntype Dict<T> = Record<string, T>;\ntype KeyMap<T> = Map<string, T>;\ntype OperationMap<T> = Map<number, T>;\n\ninterface NodeMap<T> {\n  optimistic: OperationMap<KeyMap<Dict<T | undefined>>>;\n  base: KeyMap<Dict<T>>;\n}\n\nexport interface InMemoryData {\n  /** Flag for whether the data is waiting for hydration */\n  hydrating: boolean;\n  /** Flag for whether deferred tasks have been scheduled yet */\n  defer: boolean;\n  /** A list of entities that have been flagged for gargabe collection since no references to them are left */\n  gc: Set<string>;\n  /** A list of entity+field keys that will be persisted */\n  persist: Set<string>;\n  /** The API's \"Query\" typename which is needed to filter dependencies */\n  queryRootKey: string;\n  /** Number of references to each entity (except \"Query\") */\n  refCount: KeyMap<number>;\n  /** A map of entity fields (key-value entries per entity) */\n  records: NodeMap<EntityField>;\n  /** A map of entity links which are connections from one entity to another (key-value entries per entity) */\n  links: NodeMap<Link>;\n  /** A set of Query operation keys that are in-flight and deferred/streamed */\n  deferredKeys: Set<number>;\n  /** A set of Query operation keys that are in-flight and awaiting a result */\n  commutativeKeys: Set<number>;\n  /** A set of Query operation keys that have been written to */\n  dirtyKeys: Set<number>;\n  /** The order of optimistic layers */\n  optimisticOrder: number[];\n  /** This may be a persistence adapter that will receive changes in a batch */\n  storage: StorageAdapter | null;\n}\n\nlet currentOwnership: null | WeakSet<any> = null;\nlet currentDataMapping: null | WeakMap<any, any> = null;\nlet currentData: null | InMemoryData = null;\nlet currentOptimisticKey: null | number = null;\nexport let currentOperation: null | OperationType = null;\nexport let currentDependencies: null | Dependencies = null;\nexport let currentForeignData = false;\nexport let currentOptimistic = false;\n\nexport function makeData(data: DataField | void, isArray?: false): Data;\nexport function makeData(data: DataField | void, isArray: true): DataField[];\n\n/** Creates a new data object unless it's been created in this data run */\nexport function makeData(data?: DataField | void, isArray?: boolean) {\n  let newData: Data | Data[] | undefined;\n  if (data) {\n    if (currentOwnership!.has(data)) return data;\n    newData = currentDataMapping!.get(data) as any;\n  }\n\n  if (newData == null) {\n    newData = (isArray ? [] : {}) as any;\n  }\n\n  if (data) {\n    currentDataMapping!.set(data, newData);\n  }\n\n  currentOwnership!.add(newData);\n  return newData;\n}\n\nexport const ownsData = (data?: Data): boolean =>\n  !!data && currentOwnership!.has(data);\n\n/** Before reading or writing the global state needs to be initialised */\nexport const initDataState = (\n  operationType: OperationType,\n  data: InMemoryData,\n  layerKey?: number | null,\n  isOptimistic?: boolean,\n  isForeignData?: boolean\n) => {\n  currentOwnership = new WeakSet();\n  currentDataMapping = new WeakMap();\n  currentOperation = operationType;\n  currentData = data;\n  currentDependencies = new Set();\n  currentOptimistic = !!isOptimistic;\n  currentForeignData = !!isForeignData;\n  if (process.env.NODE_ENV !== 'production') {\n    currentDebugStack.length = 0;\n  }\n\n  if (!layerKey) {\n    currentOptimisticKey = null;\n  } else if (currentOperation === 'read') {\n    // We don't create new layers for read operations and instead simply\n    // apply the currently available layer, if any\n    currentOptimisticKey = layerKey;\n  } else if (\n    isOptimistic ||\n    data.hydrating ||\n    data.optimisticOrder.length > 1\n  ) {\n    // If this operation isn't optimistic and we see it for the first time,\n    // then it must've been optimistic in the past, so we can proactively\n    // clear the optimistic data before writing\n    if (!isOptimistic && !data.commutativeKeys.has(layerKey)) {\n      reserveLayer(data, layerKey);\n    } else if (isOptimistic) {\n      if (\n        data.optimisticOrder.indexOf(layerKey) !== -1 &&\n        !data.commutativeKeys.has(layerKey)\n      ) {\n        data.optimisticOrder.splice(data.optimisticOrder.indexOf(layerKey), 1);\n      }\n      // NOTE: This optimally shouldn't happen as it implies that an optimistic\n      // write is being performed after a concrete write.\n      data.commutativeKeys.delete(layerKey);\n    }\n\n    // An optimistic update of a mutation may force an optimistic layer,\n    // or this Query update may be applied optimistically since it's part\n    // of a commutative chain\n    currentOptimisticKey = layerKey;\n    createLayer(data, layerKey);\n  } else {\n    // Otherwise we don't create an optimistic layer and clear the\n    // operation's one if it already exists\n    // We also do this when only one layer exists to avoid having to squash\n    // any layers at the end of writing this layer\n    currentOptimisticKey = null;\n    deleteLayer(data, layerKey);\n  }\n};\n\n/** Reset the data state after read/write is complete */\nexport const clearDataState = () => {\n  // NOTE: This is only called to check for the invariant to pass\n  if (process.env.NODE_ENV !== 'production') {\n    getCurrentDependencies();\n  }\n\n  const data = currentData!;\n  const layerKey = currentOptimisticKey;\n  currentOptimistic = false;\n  currentOptimisticKey = null;\n\n  // Determine whether the current operation has been a commutative layer\n  if (\n    !data.hydrating &&\n    layerKey &&\n    data.optimisticOrder.indexOf(layerKey) > -1\n  ) {\n    // Squash all layers in reverse order (low priority upwards) that have\n    // been written already\n    let i = data.optimisticOrder.length;\n    while (\n      --i >= 0 &&\n      data.dirtyKeys.has(data.optimisticOrder[i]) &&\n      data.commutativeKeys.has(data.optimisticOrder[i])\n    )\n      squashLayer(data.optimisticOrder[i]);\n  }\n\n  currentOwnership = null;\n  currentDataMapping = null;\n  currentOperation = null;\n  currentData = null;\n  currentDependencies = null;\n  if (process.env.NODE_ENV !== 'production') {\n    currentDebugStack.length = 0;\n  }\n\n  if (process.env.NODE_ENV !== 'test') {\n    // Schedule deferred tasks if we haven't already, and if either a persist or GC run\n    // are likely to be needed\n    if (!data.defer && (data.storage || !data.optimisticOrder.length)) {\n      data.defer = true;\n      setTimeout(() => {\n        initDataState('read', data, null);\n        gc();\n        persistData();\n        clearDataState();\n        data.defer = false;\n      });\n    }\n  }\n};\n\n/** Initialises then resets the data state, which may squash this layer if necessary */\nexport const noopDataState = (\n  data: InMemoryData,\n  layerKey: number | null,\n  isOptimistic?: boolean\n) => {\n  if (layerKey && !isOptimistic) data.deferredKeys.delete(layerKey);\n  initDataState('write', data, layerKey, isOptimistic);\n  clearDataState();\n};\n\n/** As we're writing, we keep around all the records and links we've read or have written to */\nexport const getCurrentDependencies = (): Dependencies => {\n  invariant(\n    currentDependencies !== null,\n    'Invalid Cache call: The cache may only be accessed or mutated during' +\n      'operations like write or query, or as part of its resolvers, updaters, ' +\n      'or optimistic configs.',\n    2\n  );\n\n  return currentDependencies;\n};\n\nexport const make = (queryRootKey: string): InMemoryData => ({\n  hydrating: false,\n  defer: false,\n  gc: new Set(),\n  persist: new Set(),\n  queryRootKey,\n  refCount: new Map(),\n  links: {\n    optimistic: new Map(),\n    base: new Map(),\n  },\n  records: {\n    optimistic: new Map(),\n    base: new Map(),\n  },\n  deferredKeys: new Set(),\n  commutativeKeys: new Set(),\n  dirtyKeys: new Set(),\n  optimisticOrder: [],\n  storage: null,\n});\n\n/** Adds a node value to a NodeMap (taking optimistic values into account */\nconst setNode = <T>(\n  map: NodeMap<T>,\n  entityKey: string,\n  fieldKey: string,\n  value: T\n) => {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      currentOperation !== 'read',\n      'Invalid Cache write: You may not write to the cache during cache reads. ' +\n        ' Accesses to `cache.writeFragment`, `cache.updateQuery`, and `cache.link` may ' +\n        ' not be made inside `resolvers` for instance.',\n      27\n    );\n  }\n\n  // Optimistic values are written to a map in the optimistic dict\n  // All other values are written to the base map\n  const keymap: KeyMap<Dict<T | undefined>> = currentOptimisticKey\n    ? map.optimistic.get(currentOptimisticKey)!\n    : map.base;\n\n  // On the map itself we get or create the entity as a dict\n  let entity = keymap.get(entityKey) as Dict<T | undefined>;\n  if (entity === undefined) {\n    keymap.set(entityKey, (entity = Object.create(null)));\n  }\n\n  // If we're setting undefined we delete the node's entry\n  // On optimistic layers we actually set undefined so it can\n  // override the base value\n  if (value === undefined && !currentOptimisticKey) {\n    delete entity[fieldKey];\n  } else {\n    entity[fieldKey] = value;\n  }\n};\n\n/** Gets a node value from a NodeMap (taking optimistic values into account */\nconst getNode = <T>(\n  map: NodeMap<T>,\n  entityKey: string,\n  fieldKey: string\n): T | undefined => {\n  let node: Dict<T | undefined> | undefined;\n  // A read may be initialised to skip layers until its own, which is useful for\n  // reading back written data. It won't skip over optimistic layers however\n  let skip =\n    !currentOptimistic &&\n    currentOperation === 'read' &&\n    currentOptimisticKey &&\n    currentData!.commutativeKeys.has(currentOptimisticKey);\n  // This first iterates over optimistic layers (in order)\n  for (let i = 0, l = currentData!.optimisticOrder.length; i < l; i++) {\n    const layerKey = currentData!.optimisticOrder[i];\n    const optimistic = map.optimistic.get(layerKey);\n    // If we're reading starting from a specific layer, we skip until a match\n    skip = skip && layerKey !== currentOptimisticKey;\n    // If the node and node value exists it is returned, including undefined\n    if (\n      optimistic &&\n      (!skip || !currentData!.commutativeKeys.has(layerKey)) &&\n      (!currentOptimistic ||\n        currentOperation === 'write' ||\n        currentData!.commutativeKeys.has(layerKey)) &&\n      (node = optimistic.get(entityKey)) !== undefined &&\n      fieldKey in node\n    ) {\n      return node[fieldKey];\n    }\n  }\n\n  // Otherwise we read the non-optimistic base value\n  node = map.base.get(entityKey);\n  return node !== undefined ? node[fieldKey] : undefined;\n};\n\n/** Adjusts the reference count of an entity on a refCount dict by \"by\" and updates the gc */\nconst updateRCForEntity = (entityKey: string, by: number): void => {\n  // Retrieve the reference count and adjust it by \"by\"\n  const count = currentData!.refCount.get(entityKey) || 0;\n  const newCount = count + by > 0 ? count + by : 0;\n  currentData!.refCount.set(entityKey, newCount);\n  // Add it to the garbage collection batch if it needs to be deleted or remove it\n  // from the batch if it needs to be kept\n  if (!newCount) currentData!.gc.add(entityKey);\n  else if (!count && newCount) currentData!.gc.delete(entityKey);\n};\n\n/** Adjusts the reference counts of all entities of a link on a refCount dict by \"by\" and updates the gc */\nconst updateRCForLink = (link: Link | undefined, by: number): void => {\n  if (Array.isArray(link)) {\n    for (let i = 0, l = link.length; i < l; i++) updateRCForLink(link[i], by);\n  } else if (typeof link === 'string') {\n    updateRCForEntity(link, by);\n  }\n};\n\n/** Writes all parsed FieldInfo objects of a given node dict to a given array if it hasn't been seen */\nconst extractNodeFields = <T>(\n  fieldInfos: FieldInfo[],\n  seenFieldKeys: Set<string>,\n  node: Dict<T> | undefined\n): void => {\n  if (node !== undefined) {\n    for (const fieldKey in node) {\n      if (!seenFieldKeys.has(fieldKey)) {\n        // If the node hasn't been seen the serialized fieldKey is turnt back into\n        // a rich FieldInfo object that also contains the field's name and arguments\n        fieldInfos.push(fieldInfoOfKey(fieldKey));\n        seenFieldKeys.add(fieldKey);\n      }\n    }\n  }\n};\n\n/** Writes all parsed FieldInfo objects of all nodes in a NodeMap to a given array */\nconst extractNodeMapFields = <T>(\n  fieldInfos: FieldInfo[],\n  seenFieldKeys: Set<string>,\n  entityKey: string,\n  map: NodeMap<T>\n) => {\n  // Extracts FieldInfo for the entity in the base map\n  extractNodeFields(fieldInfos, seenFieldKeys, map.base.get(entityKey));\n\n  // Then extracts FieldInfo for the entity from the optimistic maps\n  for (let i = 0, l = currentData!.optimisticOrder.length; i < l; i++) {\n    const optimistic = map.optimistic.get(currentData!.optimisticOrder[i]);\n    if (optimistic !== undefined) {\n      extractNodeFields(fieldInfos, seenFieldKeys, optimistic.get(entityKey));\n    }\n  }\n};\n\n/** Garbage collects all entities that have been marked as having no references */\nexport const gc = () => {\n  // If we're currently awaiting deferred results, abort GC run\n  if (currentData!.optimisticOrder.length) return;\n\n  // Iterate over all entities that have been marked for deletion\n  // Entities have been marked for deletion in `updateRCForEntity` if\n  // their reference count dropped to 0\n  for (const entityKey of currentData!.gc.keys()) {\n    // Remove the current key from the GC batch\n    currentData!.gc.delete(entityKey);\n\n    // Check first whether the entity has any references,\n    // if so, we skip it from the GC run\n    const rc = currentData!.refCount.get(entityKey) || 0;\n    if (rc > 0) continue;\n\n    // Delete the reference count, and delete the entity from the GC batch\n    currentData!.refCount.delete(entityKey);\n    currentData!.records.base.delete(entityKey);\n    const linkNode = currentData!.links.base.get(entityKey);\n    if (linkNode) {\n      currentData!.links.base.delete(entityKey);\n      for (const fieldKey in linkNode) updateRCForLink(linkNode[fieldKey], -1);\n    }\n  }\n};\n\nconst updateDependencies = (entityKey: string, fieldKey?: string) => {\n  if (entityKey !== currentData!.queryRootKey) {\n    currentDependencies!.add(entityKey);\n  } else if (fieldKey !== undefined && fieldKey !== '__typename') {\n    currentDependencies!.add(joinKeys(entityKey, fieldKey));\n  }\n};\n\nconst updatePersist = (entityKey: string, fieldKey: string) => {\n  if (!currentOptimistic && currentData!.storage) {\n    currentData!.persist.add(serializeKeys(entityKey, fieldKey));\n  }\n};\n\n/** Reads an entity's field (a \"record\") from data */\nexport const readRecord = (\n  entityKey: string,\n  fieldKey: string\n): EntityField => {\n  updateDependencies(entityKey, fieldKey);\n  return getNode(currentData!.records, entityKey, fieldKey);\n};\n\n/** Reads an entity's link from data */\nexport const readLink = (\n  entityKey: string,\n  fieldKey: string\n): Link | undefined => {\n  updateDependencies(entityKey, fieldKey);\n  return getNode(currentData!.links, entityKey, fieldKey);\n};\n\n/** Writes an entity's field (a \"record\") to data */\nexport const writeRecord = (\n  entityKey: string,\n  fieldKey: string,\n  value?: EntityField\n) => {\n  updateDependencies(entityKey, fieldKey);\n  updatePersist(entityKey, fieldKey);\n  setNode(currentData!.records, entityKey, fieldKey, value);\n};\n\nexport const hasField = (entityKey: string, fieldKey: string): boolean =>\n  readRecord(entityKey, fieldKey) !== undefined ||\n  readLink(entityKey, fieldKey) !== undefined;\n\n/** Writes an entity's link to data */\nexport const writeLink = (\n  entityKey: string,\n  fieldKey: string,\n  link?: Link | undefined\n) => {\n  // Retrieve the link NodeMap from either an optimistic or the base layer\n  const links = currentOptimisticKey\n    ? currentData!.links.optimistic.get(currentOptimisticKey)\n    : currentData!.links.base;\n  // Update the reference count for the link\n  if (!currentOptimisticKey) {\n    const entityLinks = links && links.get(entityKey);\n    updateRCForLink(entityLinks && entityLinks[fieldKey], -1);\n    updateRCForLink(link, 1);\n  }\n  // Update persistence batch and dependencies\n  updateDependencies(entityKey, fieldKey);\n  updatePersist(entityKey, fieldKey);\n  // Update the link\n  setNode(currentData!.links, entityKey, fieldKey, link);\n};\n\n/** Reserves an optimistic layer and preorders it */\nexport const reserveLayer = (\n  data: InMemoryData,\n  layerKey: number,\n  hasNext?: boolean\n) => {\n  // Find the current index for the layer, and remove it from\n  // the order if it exists already\n  let index = data.optimisticOrder.indexOf(layerKey);\n  if (index > -1) data.optimisticOrder.splice(index, 1);\n\n  if (hasNext) {\n    data.deferredKeys.add(layerKey);\n    // If the layer has future results then we'll move it past any layer that's\n    // still empty, so currently pending operations will take precedence over it\n    for (\n      index = index > -1 ? index : 0;\n      index < data.optimisticOrder.length &&\n      !data.deferredKeys.has(data.optimisticOrder[index]) &&\n      (!data.dirtyKeys.has(data.optimisticOrder[index]) ||\n        !data.commutativeKeys.has(data.optimisticOrder[index]));\n      index++\n    );\n  } else {\n    data.deferredKeys.delete(layerKey);\n    // Protect optimistic layers from being turned into non-optimistic layers\n    // while preserving optimistic data\n    if (index > -1 && !data.commutativeKeys.has(layerKey))\n      clearLayer(data, layerKey);\n    index = 0;\n  }\n\n  // Register the layer with the deferred or \"top\" index and\n  // mark it as commutative\n  data.optimisticOrder.splice(index, 0, layerKey);\n  data.commutativeKeys.add(layerKey);\n};\n\n/** Creates an optimistic layer of links and records */\nconst createLayer = (data: InMemoryData, layerKey: number) => {\n  if (data.optimisticOrder.indexOf(layerKey) === -1) {\n    data.optimisticOrder.unshift(layerKey);\n  }\n\n  if (!data.dirtyKeys.has(layerKey)) {\n    data.dirtyKeys.add(layerKey);\n    data.links.optimistic.set(layerKey, new Map());\n    data.records.optimistic.set(layerKey, new Map());\n  }\n};\n\n/** Clears all links and records of an optimistic layer */\nconst clearLayer = (data: InMemoryData, layerKey: number) => {\n  if (data.dirtyKeys.has(layerKey)) {\n    data.dirtyKeys.delete(layerKey);\n    data.records.optimistic.delete(layerKey);\n    data.links.optimistic.delete(layerKey);\n    data.deferredKeys.delete(layerKey);\n  }\n};\n\n/** Deletes links and records of an optimistic layer, and the layer itself */\nconst deleteLayer = (data: InMemoryData, layerKey: number) => {\n  const index = data.optimisticOrder.indexOf(layerKey);\n  if (index > -1) {\n    data.optimisticOrder.splice(index, 1);\n    data.commutativeKeys.delete(layerKey);\n  }\n\n  clearLayer(data, layerKey);\n};\n\n/** Merges an optimistic layer of links and records into the base data */\nconst squashLayer = (layerKey: number) => {\n  // Hide current dependencies from squashing operations\n  const previousDependencies = currentDependencies;\n  currentDependencies = new Set();\n  currentOperation = 'write';\n\n  const links = currentData!.links.optimistic.get(layerKey);\n  if (links) {\n    for (const entry of links.entries()) {\n      const entityKey = entry[0];\n      const keyMap = entry[1];\n      for (const fieldKey in keyMap)\n        writeLink(entityKey, fieldKey, keyMap[fieldKey]);\n    }\n  }\n\n  const records = currentData!.records.optimistic.get(layerKey);\n  if (records) {\n    for (const entry of records.entries()) {\n      const entityKey = entry[0];\n      const keyMap = entry[1];\n      for (const fieldKey in keyMap)\n        writeRecord(entityKey, fieldKey, keyMap[fieldKey]);\n    }\n  }\n\n  currentDependencies = previousDependencies;\n  deleteLayer(currentData!, layerKey);\n};\n\n/** Return an array of FieldInfo (info on all the fields and their arguments) for a given entity */\nexport const inspectFields = (entityKey: string): FieldInfo[] => {\n  const { links, records } = currentData!;\n  const fieldInfos: FieldInfo[] = [];\n  const seenFieldKeys: Set<string> = new Set();\n  // Update dependencies\n  updateDependencies(entityKey);\n  // Extract FieldInfos to the fieldInfos array for links and records\n  // This also deduplicates by keeping track of fieldKeys in the seenFieldKeys Set\n  extractNodeMapFields(fieldInfos, seenFieldKeys, entityKey, links);\n  extractNodeMapFields(fieldInfos, seenFieldKeys, entityKey, records);\n  return fieldInfos;\n};\n\nexport const persistData = () => {\n  if (currentData!.storage) {\n    currentOptimistic = true;\n    currentOperation = 'read';\n    const entries: SerializedEntries = {};\n    for (const key of currentData!.persist.keys()) {\n      const { entityKey, fieldKey } = deserializeKeyInfo(key);\n      let x: void | Link | EntityField;\n      if ((x = readLink(entityKey, fieldKey)) !== undefined) {\n        entries[key] = `:${stringifyVariables(x)}`;\n      } else if ((x = readRecord(entityKey, fieldKey)) !== undefined) {\n        entries[key] = stringifyVariables(x);\n      } else {\n        entries[key] = undefined;\n      }\n    }\n\n    currentOptimistic = false;\n    currentData!.storage.writeData(entries);\n    currentData!.persist.clear();\n  }\n};\n\nexport const hydrateData = (\n  data: InMemoryData,\n  storage: StorageAdapter,\n  entries: SerializedEntries\n) => {\n  initDataState('write', data, null);\n\n  for (const key in entries) {\n    const value = entries[key];\n    if (value !== undefined) {\n      const { entityKey, fieldKey } = deserializeKeyInfo(key);\n      if (value[0] === ':') {\n        if (readLink(entityKey, fieldKey) === undefined)\n          writeLink(entityKey, fieldKey, JSON.parse(value.slice(1)));\n      } else {\n        if (readRecord(entityKey, fieldKey) === undefined)\n          writeRecord(entityKey, fieldKey, JSON.parse(value));\n      }\n    }\n  }\n\n  data.storage = storage;\n  data.hydrating = false;\n  clearDataState();\n};\n","import type { CombinedError, ErrorLike, FormattedNode } from '@urql/core';\n\nimport type {\n  FieldNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\nimport { Kind } from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport { isDeferred, getTypeCondition, getSelectionSet, getName } from '../ast';\n\nimport { warn, pushDebugNode, popDebugNode } from '../helpers/help';\nimport { hasField, currentOperation, currentOptimistic } from '../store/data';\nimport { keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\n\nimport { getFieldArguments, shouldInclude, isInterfaceOfType } from '../ast';\n\nimport type {\n  Fragments,\n  Variables,\n  DataField,\n  NullArray,\n  Link,\n  Entity,\n  Data,\n  Logger,\n} from '../types';\n\nexport interface Context {\n  store: Store;\n  variables: Variables;\n  fragments: Fragments;\n  parentTypeName: string;\n  parentKey: string;\n  parentFieldKey: string;\n  parent: Data;\n  fieldName: string;\n  error: ErrorLike | undefined;\n  partial: boolean;\n  hasNext: boolean;\n  optimistic: boolean;\n  __internal: {\n    path: Array<string | number>;\n    errorMap: { [path: string]: ErrorLike } | undefined;\n  };\n}\n\nexport let contextRef: Context | null = null;\nexport let deferRef = false;\n\n// Checks whether the current data field is a cache miss because of a GraphQLError\nexport const getFieldError = (ctx: Context): ErrorLike | undefined =>\n  ctx.__internal.path.length > 0 && ctx.__internal.errorMap\n    ? ctx.__internal.errorMap[ctx.__internal.path.join('.')]\n    : undefined;\n\nexport const makeContext = (\n  store: Store,\n  variables: Variables,\n  fragments: Fragments,\n  typename: string,\n  entityKey: string,\n  error: CombinedError | undefined\n): Context => {\n  const ctx: Context = {\n    store,\n    variables,\n    fragments,\n    parent: { __typename: typename },\n    parentTypeName: typename,\n    parentKey: entityKey,\n    parentFieldKey: '',\n    fieldName: '',\n    error: undefined,\n    partial: false,\n    hasNext: false,\n    optimistic: currentOptimistic,\n    __internal: {\n      path: [],\n      errorMap: undefined,\n    },\n  };\n\n  if (error && error.graphQLErrors) {\n    for (let i = 0; i < error.graphQLErrors.length; i++) {\n      const graphQLError = error.graphQLErrors[i];\n      if (graphQLError.path && graphQLError.path.length) {\n        if (!ctx.__internal.errorMap)\n          ctx.__internal.errorMap = Object.create(null);\n        ctx.__internal.errorMap![graphQLError.path.join('.')] = graphQLError;\n      }\n    }\n  }\n\n  return ctx;\n};\n\nexport const updateContext = (\n  ctx: Context,\n  data: Data,\n  typename: string,\n  entityKey: string,\n  fieldKey: string,\n  fieldName: string\n) => {\n  contextRef = ctx;\n  ctx.parent = data;\n  ctx.parentTypeName = typename;\n  ctx.parentKey = entityKey;\n  ctx.parentFieldKey = fieldKey;\n  ctx.fieldName = fieldName;\n  ctx.error = getFieldError(ctx);\n};\n\nconst isFragmentHeuristicallyMatching = (\n  node: FormattedNode<InlineFragmentNode | FragmentDefinitionNode>,\n  typename: void | string,\n  entityKey: string,\n  vars: Variables,\n  logger?: Logger\n) => {\n  if (!typename) return false;\n  const typeCondition = getTypeCondition(node);\n  if (!typeCondition || typename === typeCondition) return true;\n\n  warn(\n    'Heuristic Fragment Matching: A fragment is trying to match against the `' +\n      typename +\n      '` type, ' +\n      'but the type condition is `' +\n      typeCondition +\n      '`. Since GraphQL allows for interfaces `' +\n      typeCondition +\n      '` may be an ' +\n      'interface.\\nA schema needs to be defined for this match to be deterministic, ' +\n      'otherwise the fragment will be matched heuristically!',\n    16,\n    logger\n  );\n\n  return (\n    currentOperation === 'write' ||\n    !getSelectionSet(node).some(node => {\n      if (node.kind !== Kind.FIELD) return false;\n      const fieldKey = keyOfField(getName(node), getFieldArguments(node, vars));\n      return !hasField(entityKey, fieldKey);\n    })\n  );\n};\n\ninterface SelectionIterator {\n  (): FormattedNode<FieldNode> | undefined;\n}\n\nexport const makeSelectionIterator = (\n  typename: void | string,\n  entityKey: string,\n  defer: boolean,\n  selectionSet: FormattedNode<SelectionSet>,\n  ctx: Context\n): SelectionIterator => {\n  let child: SelectionIterator | void;\n  let index = 0;\n\n  return function next() {\n    let node: FormattedNode<FieldNode> | undefined;\n    while (child || index < selectionSet.length) {\n      node = undefined;\n      deferRef = defer;\n      if (child) {\n        if ((node = child())) {\n          return node;\n        } else {\n          child = undefined;\n          if (process.env.NODE_ENV !== 'production') popDebugNode();\n        }\n      } else {\n        const select = selectionSet[index++];\n        if (!shouldInclude(select, ctx.variables)) {\n          /*noop*/\n        } else if (select.kind !== Kind.FIELD) {\n          // A fragment is either referred to by FragmentSpread or inline\n          const fragment =\n            select.kind !== Kind.INLINE_FRAGMENT\n              ? ctx.fragments[getName(select)]\n              : select;\n          if (fragment) {\n            const isMatching =\n              !fragment.typeCondition ||\n              (ctx.store.schema\n                ? isInterfaceOfType(ctx.store.schema, fragment, typename)\n                : isFragmentHeuristicallyMatching(\n                    fragment,\n                    typename,\n                    entityKey,\n                    ctx.variables,\n                    ctx.store.logger\n                  ));\n            if (isMatching) {\n              if (process.env.NODE_ENV !== 'production')\n                pushDebugNode(typename, fragment);\n              child = makeSelectionIterator(\n                typename,\n                entityKey,\n                defer || isDeferred(select, ctx.variables),\n                getSelectionSet(fragment),\n                ctx\n              );\n            }\n          }\n        } else if (currentOperation === 'write' || !select._generated) {\n          return select;\n        }\n      }\n    }\n  };\n};\n\nexport const ensureData = (x: DataField): Data | NullArray<Data> | null =>\n  x == null ? null : (x as Data | NullArray<Data>);\n\nexport const ensureLink = (store: Store, ref: Link<Entity>): Link => {\n  if (!ref) {\n    return ref || null;\n  } else if (Array.isArray(ref)) {\n    const link = new Array(ref.length);\n    for (let i = 0, l = link.length; i < l; i++)\n      link[i] = ensureLink(store, ref[i]);\n    return link;\n  }\n\n  const link = store.keyOfEntity(ref);\n  if (!link && ref && typeof ref === 'object') {\n    warn(\n      \"Can't generate a key for link(...) item.\" +\n        '\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        ref.__typename +\n        '`.',\n      12,\n      store.logger\n    );\n  }\n\n  return link;\n};\n","import type { FormattedNode, CombinedError } from '@urql/core';\nimport { formatDocument } from '@urql/core';\n\nimport type {\n  FieldNode,\n  DocumentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  getSelectionSet,\n  getName,\n  getFragmentTypeName,\n  getFieldAlias,\n  getFragments,\n  getMainOperation,\n  normalizeVariables,\n  getFieldArguments,\n  getDirectives,\n} from '../ast';\n\nimport type {\n  Variables,\n  Data,\n  DataField,\n  Link,\n  OperationRequest,\n  Dependencies,\n  Resolver,\n} from '../types';\n\nimport { joinKeys, keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\nimport * as InMemoryData from '../store/data';\nimport { warn, pushDebugNode, popDebugNode } from '../helpers/help';\n\nimport type { Context } from './shared';\nimport {\n  makeSelectionIterator,\n  ensureData,\n  makeContext,\n  updateContext,\n  getFieldError,\n  deferRef,\n} from './shared';\n\nimport {\n  isFieldAvailableOnType,\n  isFieldNullable,\n  isListNullable,\n} from '../ast';\n\nexport interface QueryResult {\n  dependencies: Dependencies;\n  partial: boolean;\n  hasNext: boolean;\n  data: null | Data;\n}\n\n/** Reads a GraphQL query from the cache.\n * @internal\n */\nexport const __initAnd_query = (\n  store: Store,\n  request: OperationRequest,\n  data?: Data | null | undefined,\n  error?: CombinedError | undefined,\n  key?: number\n): QueryResult => {\n  InMemoryData.initDataState('read', store.data, key);\n  const result = _query(store, request, data, error);\n  InMemoryData.clearDataState();\n  return result;\n};\n\n/** Reads a GraphQL query from the cache.\n * @internal\n */\nexport const _query = (\n  store: Store,\n  request: OperationRequest,\n  input?: Data | null | undefined,\n  error?: CombinedError | undefined\n): QueryResult => {\n  const query = formatDocument(request.query);\n  const operation = getMainOperation(query);\n  const rootKey = store.rootFields[operation.operation];\n  const rootSelect = getSelectionSet(operation);\n\n  const ctx = makeContext(\n    store,\n    normalizeVariables(operation, request.variables),\n    getFragments(query),\n    rootKey,\n    rootKey,\n    error\n  );\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(rootKey, operation);\n  }\n\n  // NOTE: This may reuse \"previous result data\" as indicated by the\n  // `originalData` argument in readRoot(). This behaviour isn't used\n  // for readSelection() however, which always produces results from\n  // scratch\n  const data =\n    rootKey !== ctx.store.rootFields['query']\n      ? readRoot(ctx, rootKey, rootSelect, input || InMemoryData.makeData())\n      : readSelection(\n          ctx,\n          rootKey,\n          rootSelect,\n          input || InMemoryData.makeData()\n        );\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n    InMemoryData.getCurrentDependencies();\n  }\n\n  return {\n    dependencies: InMemoryData.currentDependencies!,\n    partial: ctx.partial || !data,\n    hasNext: ctx.hasNext,\n    data: data || null,\n  };\n};\n\nconst readRoot = (\n  ctx: Context,\n  entityKey: string,\n  select: FormattedNode<SelectionSet>,\n  input: Data\n): Data => {\n  const typename = ctx.store.rootNames[entityKey]\n    ? entityKey\n    : input.__typename;\n  if (typeof typename !== 'string') {\n    return input;\n  }\n\n  const iterate = makeSelectionIterator(\n    entityKey,\n    entityKey,\n    deferRef,\n    select,\n    ctx\n  );\n\n  let node: FormattedNode<FieldNode> | void;\n  let hasChanged = InMemoryData.currentForeignData;\n  const output = InMemoryData.makeData(input);\n  while ((node = iterate())) {\n    const fieldAlias = getFieldAlias(node);\n    const fieldValue = input[fieldAlias];\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n    // We temporarily store the data field in here, but undefined\n    // means that the value is missing from the cache\n    let dataFieldValue: void | DataField;\n    if (node.selectionSet && fieldValue !== null) {\n      dataFieldValue = readRootField(\n        ctx,\n        getSelectionSet(node),\n        ensureData(fieldValue)\n      );\n    } else {\n      dataFieldValue = fieldValue;\n    }\n\n    // Check for any referential changes in the field's value\n    hasChanged = hasChanged || dataFieldValue !== fieldValue;\n    if (dataFieldValue !== undefined) output[fieldAlias] = dataFieldValue!;\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n  }\n\n  return hasChanged ? output : input;\n};\n\nconst readRootField = (\n  ctx: Context,\n  select: FormattedNode<SelectionSet>,\n  originalData: Link<Data>\n): Link<Data> => {\n  if (Array.isArray(originalData)) {\n    const newData = new Array(originalData.length);\n    let hasChanged = InMemoryData.currentForeignData;\n    for (let i = 0, l = originalData.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read the root field's value\n      newData[i] = readRootField(ctx, select, originalData[i]);\n      hasChanged = hasChanged || newData[i] !== originalData[i];\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n    }\n\n    return hasChanged ? newData : originalData;\n  } else if (originalData === null) {\n    return null;\n  }\n\n  // Write entity to key that falls back to the given parentFieldKey\n  const entityKey = ctx.store.keyOfEntity(originalData);\n  if (entityKey !== null) {\n    // We assume that since this is used for result data this can never be undefined,\n    // since the result data has already been written to the cache\n    return readSelection(ctx, entityKey, select, originalData) || null;\n  } else {\n    return readRoot(ctx, originalData.__typename, select, originalData);\n  }\n};\n\nexport const _queryFragment = (\n  store: Store,\n  query: FormattedNode<DocumentNode>,\n  entity: Partial<Data> | string,\n  variables?: Variables,\n  fragmentName?: string\n): Data | null => {\n  const fragments = getFragments(query);\n\n  let fragment: FormattedNode<FragmentDefinitionNode>;\n  if (fragmentName) {\n    fragment = fragments[fragmentName]!;\n    if (!fragment) {\n      warn(\n        'readFragment(...) was called with a fragment name that does not exist.\\n' +\n          'You provided ' +\n          fragmentName +\n          ' but could only find ' +\n          Object.keys(fragments).join(', ') +\n          '.',\n        6,\n        store.logger\n      );\n\n      return null;\n    }\n  } else {\n    const names = Object.keys(fragments);\n    fragment = fragments[names[0]]!;\n    if (!fragment) {\n      warn(\n        'readFragment(...) was called with an empty fragment.\\n' +\n          'You have to call it with at least one fragment in your GraphQL document.',\n        6,\n        store.logger\n      );\n\n      return null;\n    }\n  }\n\n  const typename = getFragmentTypeName(fragment);\n  if (typeof entity !== 'string' && !entity.__typename)\n    entity.__typename = typename;\n  const entityKey = store.keyOfEntity(entity as Data);\n  if (!entityKey) {\n    warn(\n      \"Can't generate a key for readFragment(...).\\n\" +\n        'You have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        typename +\n        '`.',\n      7,\n      store.logger\n    );\n\n    return null;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(typename, fragment);\n  }\n\n  const ctx = makeContext(\n    store,\n    variables || {},\n    fragments,\n    typename,\n    entityKey,\n    undefined\n  );\n\n  const result =\n    readSelection(\n      ctx,\n      entityKey,\n      getSelectionSet(fragment),\n      InMemoryData.makeData()\n    ) || null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n\n  return result;\n};\n\nfunction getFieldResolver(\n  directives: ReturnType<typeof getDirectives>,\n  typename: string,\n  fieldName: string,\n  ctx: Context\n): Resolver | void {\n  const resolvers = ctx.store.resolvers[typename];\n  const fieldResolver = resolvers && resolvers[fieldName];\n\n  let directiveResolver: Resolver | undefined;\n  for (const name in directives) {\n    const directiveNode = directives[name];\n    if (\n      directiveNode &&\n      name !== 'include' &&\n      name !== 'skip' &&\n      ctx.store.directives[name]\n    ) {\n      directiveResolver = ctx.store.directives[name](\n        getFieldArguments(directiveNode, ctx.variables)\n      );\n      if (process.env.NODE_ENV === 'production') return directiveResolver;\n      break;\n    }\n  }\n\n  if (fieldResolver && directiveResolver) {\n    warn(\n      `A resolver and directive is being used at \"${typename}.${fieldName}\" simultaneously. Only the directive will apply.`,\n      28,\n      ctx.store.logger\n    );\n  }\n\n  return directiveResolver || fieldResolver;\n}\n\nconst readSelection = (\n  ctx: Context,\n  key: string,\n  select: FormattedNode<SelectionSet>,\n  input: Data,\n  result?: Data\n): Data | undefined => {\n  const { store } = ctx;\n  const isQuery = key === store.rootFields.query;\n\n  const entityKey = (result && store.keyOfEntity(result)) || key;\n  if (!isQuery && !!ctx.store.rootNames[entityKey]) {\n    warn(\n      'Invalid root traversal: A selection was being read on `' +\n        entityKey +\n        '` which is an uncached root type.\\n' +\n        'The `' +\n        ctx.store.rootFields.mutation +\n        '` and `' +\n        ctx.store.rootFields.subscription +\n        '` types are special ' +\n        'Operation Root Types and cannot be read back from the cache.',\n      25,\n      store.logger\n    );\n  }\n\n  const typename = !isQuery\n    ? InMemoryData.readRecord(entityKey, '__typename') ||\n      (result && result.__typename)\n    : key;\n\n  if (typeof typename !== 'string') {\n    return;\n  } else if (result && typename !== result.__typename) {\n    warn(\n      'Invalid resolver data: The resolver at `' +\n        entityKey +\n        '` returned an ' +\n        'invalid typename that could not be reconciled with the cache.',\n      8,\n      store.logger\n    );\n\n    return;\n  }\n\n  const iterate = makeSelectionIterator(\n    typename,\n    entityKey,\n    deferRef,\n    select,\n    ctx\n  );\n\n  let hasFields = false;\n  let hasNext = false;\n  let hasChanged = InMemoryData.currentForeignData;\n  let node: FormattedNode<FieldNode> | void;\n  const hasPartials = ctx.partial;\n  const output = InMemoryData.makeData(input);\n  while ((node = iterate()) !== undefined) {\n    // Derive the needed data from our node.\n    const fieldName = getName(node);\n    const fieldArgs = getFieldArguments(node, ctx.variables);\n    const fieldAlias = getFieldAlias(node);\n    const directives = getDirectives(node);\n    const resolver = getFieldResolver(directives, typename, fieldName, ctx);\n    const fieldKey = keyOfField(fieldName, fieldArgs);\n    const key = joinKeys(entityKey, fieldKey);\n    const fieldValue = InMemoryData.readRecord(entityKey, fieldKey);\n    const resultValue = result ? result[fieldName] : undefined;\n\n    if (process.env.NODE_ENV !== 'production' && store.schema && typename) {\n      isFieldAvailableOnType(\n        store.schema,\n        typename,\n        fieldName,\n        ctx.store.logger\n      );\n    }\n\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n    // We temporarily store the data field in here, but undefined\n    // means that the value is missing from the cache\n    let dataFieldValue: void | DataField = undefined;\n\n    if (fieldName === '__typename') {\n      // We directly assign the typename as it's already available\n      dataFieldValue = typename;\n    } else if (resultValue !== undefined && node.selectionSet === undefined) {\n      // The field is a scalar and can be retrieved directly from the result\n      dataFieldValue = resultValue;\n    } else if (InMemoryData.currentOperation === 'read' && resolver) {\n      // We have a resolver for this field.\n      // Prepare the actual fieldValue, so that the resolver can use it,\n      // as to avoid the user having to do `cache.resolve(parent, info.fieldKey)`\n      // only to get a scalar value.\n      let parent = output;\n      if (node.selectionSet === undefined && fieldValue !== undefined) {\n        parent = {\n          ...output,\n          [fieldAlias]: fieldValue,\n          [fieldName]: fieldValue,\n        };\n      }\n\n      // We have to update the information in context to reflect the info\n      // that the resolver will receive\n      updateContext(ctx, parent, typename, entityKey, fieldKey, fieldName);\n\n      dataFieldValue = resolver(\n        parent,\n        fieldArgs || ({} as Variables),\n        store,\n        ctx\n      );\n\n      if (node.selectionSet) {\n        // When it has a selection set we are resolving an entity with a\n        // subselection. This can either be a list or an object.\n        dataFieldValue = resolveResolverResult(\n          ctx,\n          typename,\n          fieldName,\n          key,\n          getSelectionSet(node),\n          (output[fieldAlias] !== undefined\n            ? output[fieldAlias]\n            : input[fieldAlias]) as Data,\n          dataFieldValue,\n          InMemoryData.ownsData(input)\n        );\n      }\n\n      if (\n        store.schema &&\n        dataFieldValue === null &&\n        !isFieldNullable(store.schema, typename, fieldName, ctx.store.logger)\n      ) {\n        // Special case for when null is not a valid value for the\n        // current field\n        return undefined;\n      }\n    } else if (!node.selectionSet) {\n      // The field is a scalar but isn't on the result, so it's retrieved from the cache\n      dataFieldValue = fieldValue;\n    } else if (resultValue !== undefined) {\n      // We start walking the nested resolver result here\n      dataFieldValue = resolveResolverResult(\n        ctx,\n        typename,\n        fieldName,\n        key,\n        getSelectionSet(node),\n        (output[fieldAlias] !== undefined\n          ? output[fieldAlias]\n          : input[fieldAlias]) as Data,\n        resultValue,\n        InMemoryData.ownsData(input)\n      );\n    } else {\n      // Otherwise we attempt to get the missing field from the cache\n      const link = InMemoryData.readLink(entityKey, fieldKey);\n\n      if (link !== undefined) {\n        dataFieldValue = resolveLink(\n          ctx,\n          link,\n          typename,\n          fieldName,\n          getSelectionSet(node),\n          (output[fieldAlias] !== undefined\n            ? output[fieldAlias]\n            : input[fieldAlias]) as Data,\n          InMemoryData.ownsData(input)\n        );\n      } else if (typeof fieldValue === 'object' && fieldValue !== null) {\n        // The entity on the field was invalid but can still be recovered\n        dataFieldValue = fieldValue;\n      }\n    }\n\n    // Now that dataFieldValue has been retrieved it'll be set on data\n    // If it's uncached (undefined) but nullable we can continue assembling\n    // a partial query result\n    if (\n      !deferRef &&\n      dataFieldValue === undefined &&\n      (directives.optional ||\n        !!getFieldError(ctx) ||\n        (store.schema &&\n          isFieldNullable(store.schema, typename, fieldName, ctx.store.logger)))\n    ) {\n      // The field is uncached or has errored, so it'll be set to null and skipped\n      ctx.partial = true;\n      dataFieldValue = null;\n    } else if (dataFieldValue === null && directives.required) {\n      if (\n        ctx.store.logger &&\n        process.env.NODE_ENV !== 'production' &&\n        InMemoryData.currentOperation === 'read'\n      ) {\n        ctx.store.logger(\n          'debug',\n          `Got value \"null\" for required field \"${fieldName}\"${\n            fieldArgs ? ` with args ${JSON.stringify(fieldArgs)}` : ''\n          } on entity \"${entityKey}\"`\n        );\n      }\n      dataFieldValue = undefined;\n    } else {\n      hasFields = hasFields || fieldName !== '__typename';\n    }\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n    // Check for any referential changes in the field's value\n    hasChanged = hasChanged || dataFieldValue !== input[fieldAlias];\n    if (dataFieldValue !== undefined) {\n      output[fieldAlias] = dataFieldValue;\n    } else if (deferRef) {\n      hasNext = true;\n    } else {\n      if (\n        ctx.store.logger &&\n        process.env.NODE_ENV !== 'production' &&\n        InMemoryData.currentOperation === 'read'\n      ) {\n        ctx.store.logger(\n          'debug',\n          `No value for field \"${fieldName}\"${\n            fieldArgs ? ` with args ${JSON.stringify(fieldArgs)}` : ''\n          } on entity \"${entityKey}\"`\n        );\n      }\n      // If the field isn't deferred or partial then we have to abort and also reset\n      // the partial field\n      ctx.partial = hasPartials;\n      return undefined;\n    }\n  }\n\n  ctx.partial = ctx.partial || hasPartials;\n  ctx.hasNext = ctx.hasNext || hasNext;\n  return isQuery && ctx.partial && !hasFields\n    ? undefined\n    : hasChanged\n    ? output\n    : input;\n};\n\nconst resolveResolverResult = (\n  ctx: Context,\n  typename: string,\n  fieldName: string,\n  key: string,\n  select: FormattedNode<SelectionSet>,\n  prevData: void | null | Data | Data[],\n  result: void | DataField,\n  isOwnedData: boolean\n): DataField | void => {\n  if (Array.isArray(result)) {\n    const { store } = ctx;\n    // Check whether values of the list may be null; for resolvers we assume\n    // that they can be, since it's user-provided data\n    const _isListNullable = store.schema\n      ? isListNullable(store.schema, typename, fieldName, ctx.store.logger)\n      : false;\n    const hasPartials = ctx.partial;\n    const data = InMemoryData.makeData(prevData, true);\n    let hasChanged =\n      InMemoryData.currentForeignData ||\n      !Array.isArray(prevData) ||\n      result.length !== prevData.length;\n    for (let i = 0, l = result.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read resolver result\n      const childResult = resolveResolverResult(\n        ctx,\n        typename,\n        fieldName,\n        joinKeys(key, `${i}`),\n        select,\n        prevData != null ? prevData[i] : undefined,\n        result[i],\n        isOwnedData\n      );\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n      // Check the result for cache-missed values\n      if (childResult === undefined && !_isListNullable) {\n        ctx.partial = hasPartials;\n        return undefined;\n      } else {\n        ctx.partial =\n          ctx.partial || (childResult === undefined && _isListNullable);\n        data[i] = childResult != null ? childResult : null;\n        hasChanged = hasChanged || data[i] !== prevData![i];\n      }\n    }\n\n    return hasChanged ? data : prevData;\n  } else if (result === null || result === undefined) {\n    return result;\n  } else if (isOwnedData && prevData === null) {\n    return null;\n  } else if (isDataOrKey(result)) {\n    const data = (prevData || InMemoryData.makeData(prevData)) as Data;\n    return typeof result === 'string'\n      ? readSelection(ctx, result, select, data)\n      : readSelection(ctx, key, select, data, result);\n  } else {\n    warn(\n      'Invalid resolver value: The field at `' +\n        key +\n        '` is a scalar (number, boolean, etc)' +\n        ', but the GraphQL query expects a selection set for this field.',\n      9,\n      ctx.store.logger\n    );\n\n    return undefined;\n  }\n};\n\nconst resolveLink = (\n  ctx: Context,\n  link: Link | Link[],\n  typename: string,\n  fieldName: string,\n  select: FormattedNode<SelectionSet>,\n  prevData: void | null | Data | Data[],\n  isOwnedData: boolean\n): DataField | undefined => {\n  if (Array.isArray(link)) {\n    const { store } = ctx;\n    const _isListNullable = store.schema\n      ? isListNullable(store.schema, typename, fieldName, ctx.store.logger)\n      : false;\n    const newLink = InMemoryData.makeData(prevData, true);\n    const hasPartials = ctx.partial;\n    let hasChanged =\n      InMemoryData.currentForeignData ||\n      !Array.isArray(prevData) ||\n      link.length !== prevData.length;\n    for (let i = 0, l = link.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read the link\n      const childLink = resolveLink(\n        ctx,\n        link[i],\n        typename,\n        fieldName,\n        select,\n        prevData != null ? prevData[i] : undefined,\n        isOwnedData\n      );\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n      // Check the result for cache-missed values\n      if (childLink === undefined && !_isListNullable) {\n        ctx.partial = hasPartials;\n        return undefined;\n      } else {\n        ctx.partial =\n          ctx.partial || (childLink === undefined && _isListNullable);\n        newLink[i] = childLink || null;\n        hasChanged = hasChanged || newLink[i] !== prevData![i];\n      }\n    }\n\n    return hasChanged ? newLink : (prevData as Data[]);\n  } else if (link === null || (prevData === null && isOwnedData)) {\n    return null;\n  }\n\n  return readSelection(\n    ctx,\n    link,\n    select,\n    (prevData || InMemoryData.makeData(prevData)) as Data\n  );\n};\n\nconst isDataOrKey = (x: any): x is string | Data =>\n  typeof x === 'string' ||\n  (typeof x === 'object' && typeof (x as any).__typename === 'string');\n","import type { FormattedNode, CombinedError } from '@urql/core';\nimport { formatDocument } from '@urql/core';\n\nimport type {\n  FieldNode,\n  DocumentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  getFragments,\n  getMainOperation,\n  normalizeVariables,\n  getFieldArguments,\n  isFieldAvailableOnType,\n  getSelectionSet,\n  getName,\n  getFragmentTypeName,\n  getFieldAlias,\n} from '../ast';\n\nimport { invariant, warn, pushDebugNode, popDebugNode } from '../helpers/help';\n\nimport type {\n  NullArray,\n  Variables,\n  Data,\n  Link,\n  OperationRequest,\n  Dependencies,\n  EntityField,\n  OptimisticMutationResolver,\n} from '../types';\n\nimport { joinKeys, keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\nimport * as InMemoryData from '../store/data';\n\nimport type { Context } from './shared';\nimport {\n  makeSelectionIterator,\n  ensureData,\n  makeContext,\n  updateContext,\n  getFieldError,\n  deferRef,\n} from './shared';\n\nexport interface WriteResult {\n  data: null | Data;\n  dependencies: Dependencies;\n}\n\n/** Writes a GraphQL response to the cache.\n * @internal\n */\nexport const __initAnd_write = (\n  store: Store,\n  request: OperationRequest,\n  data: Data,\n  error?: CombinedError | undefined,\n  key?: number\n): WriteResult => {\n  InMemoryData.initDataState('write', store.data, key || null);\n  const result = _write(store, request, data, error);\n  InMemoryData.clearDataState();\n  return result;\n};\n\nexport const __initAnd_writeOptimistic = (\n  store: Store,\n  request: OperationRequest,\n  key: number\n): WriteResult => {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      getMainOperation(request.query).operation === 'mutation',\n      'writeOptimistic(...) was called with an operation that is not a mutation.\\n' +\n        'This case is unsupported and should never occur.',\n      10\n    );\n  }\n\n  InMemoryData.initDataState('write', store.data, key, true);\n  const result = _write(store, request, {} as Data, undefined);\n  InMemoryData.clearDataState();\n  return result;\n};\n\nexport const _write = (\n  store: Store,\n  request: OperationRequest,\n  data?: Data,\n  error?: CombinedError | undefined\n) => {\n  if (process.env.NODE_ENV !== 'production') {\n    InMemoryData.getCurrentDependencies();\n  }\n\n  const query = formatDocument(request.query);\n  const operation = getMainOperation(query);\n  const result: WriteResult = {\n    data: data || InMemoryData.makeData(),\n    dependencies: InMemoryData.currentDependencies!,\n  };\n  const kind = store.rootFields[operation.operation];\n\n  const ctx = makeContext(\n    store,\n    normalizeVariables(operation, request.variables),\n    getFragments(query),\n    kind,\n    kind,\n    error\n  );\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(kind, operation);\n  }\n\n  writeSelection(ctx, kind, getSelectionSet(operation), result.data!);\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n\n  return result;\n};\n\nexport const _writeFragment = (\n  store: Store,\n  query: FormattedNode<DocumentNode>,\n  data: Partial<Data>,\n  variables?: Variables,\n  fragmentName?: string\n) => {\n  const fragments = getFragments(query);\n  let fragment: FormattedNode<FragmentDefinitionNode>;\n  if (fragmentName) {\n    fragment = fragments[fragmentName]!;\n    if (!fragment) {\n      warn(\n        'writeFragment(...) was called with a fragment name that does not exist.\\n' +\n          'You provided ' +\n          fragmentName +\n          ' but could only find ' +\n          Object.keys(fragments).join(', ') +\n          '.',\n        11,\n        store.logger\n      );\n\n      return null;\n    }\n  } else {\n    const names = Object.keys(fragments);\n    fragment = fragments[names[0]]!;\n    if (!fragment) {\n      warn(\n        'writeFragment(...) was called with an empty fragment.\\n' +\n          'You have to call it with at least one fragment in your GraphQL document.',\n        11,\n        store.logger\n      );\n\n      return null;\n    }\n  }\n\n  const typename = getFragmentTypeName(fragment);\n  const dataToWrite = { __typename: typename, ...data } as Data;\n  const entityKey = store.keyOfEntity(dataToWrite);\n  if (!entityKey) {\n    return warn(\n      \"Can't generate a key for writeFragment(...) data.\\n\" +\n        'You have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        typename +\n        '`.',\n      12,\n      store.logger\n    );\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(typename, fragment);\n  }\n\n  const ctx = makeContext(\n    store,\n    variables || {},\n    fragments,\n    typename,\n    entityKey,\n    undefined\n  );\n\n  writeSelection(ctx, entityKey, getSelectionSet(fragment), dataToWrite);\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n};\n\nconst writeSelection = (\n  ctx: Context,\n  entityKey: undefined | string,\n  select: FormattedNode<SelectionSet>,\n  data: Data\n) => {\n  // These fields determine how we write. The `Query` root type is written\n  // like a normal entity, hence, we use `rootField` with a default to determine\n  // this. All other root names (Subscription & Mutation) are in a different\n  // write mode\n  const rootField = ctx.store.rootNames[entityKey!] || 'query';\n  const isRoot = !!ctx.store.rootNames[entityKey!];\n\n  let typename = isRoot ? entityKey : data.__typename;\n  if (!typename && entityKey && ctx.optimistic) {\n    typename = InMemoryData.readRecord(entityKey, '__typename') as\n      | string\n      | undefined;\n  }\n\n  if (!typename) {\n    warn(\n      \"Couldn't find __typename when writing.\\n\" +\n        \"If you're writing to the cache manually have to pass a `__typename` property on each entity in your data.\",\n      14,\n      ctx.store.logger\n    );\n    return;\n  } else if (!isRoot && entityKey) {\n    InMemoryData.writeRecord(entityKey, '__typename', typename);\n  }\n\n  const updates = ctx.store.updates[typename];\n  const iterate = makeSelectionIterator(\n    typename,\n    entityKey || typename,\n    deferRef,\n    select,\n    ctx\n  );\n\n  let node: FormattedNode<FieldNode> | void;\n  while ((node = iterate())) {\n    const fieldName = getName(node);\n    const fieldArgs = getFieldArguments(node, ctx.variables);\n    const fieldKey = keyOfField(fieldName, fieldArgs);\n    const fieldAlias = getFieldAlias(node);\n    let fieldValue = data[ctx.optimistic ? fieldName : fieldAlias];\n\n    if (\n      // Skip typename fields and assume they've already been written above\n      fieldName === '__typename' ||\n      // Fields marked as deferred that aren't defined must be skipped\n      // Otherwise, we also ignore undefined values in optimistic updaters\n      (fieldValue === undefined &&\n        (deferRef || (ctx.optimistic && rootField === 'query')))\n    ) {\n      continue;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (ctx.store.schema && typename && fieldName !== '__typename') {\n        isFieldAvailableOnType(\n          ctx.store.schema,\n          typename,\n          fieldName,\n          ctx.store.logger\n        );\n      }\n    }\n\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n\n    // Execute optimistic mutation functions on root fields, or execute recursive functions\n    // that have been returned on optimistic objects\n    let resolver: OptimisticMutationResolver | undefined;\n    if (ctx.optimistic && rootField === 'mutation') {\n      resolver = ctx.store.optimisticMutations[fieldName];\n      if (!resolver) continue;\n    } else if (ctx.optimistic && typeof fieldValue === 'function') {\n      resolver = fieldValue as any;\n    }\n\n    // Execute the field-level resolver to retrieve its data\n    if (resolver) {\n      // We have to update the context to reflect up-to-date ResolveInfo\n      updateContext(\n        ctx,\n        data,\n        typename,\n        entityKey || typename,\n        fieldKey,\n        fieldName\n      );\n      fieldValue = ensureData(resolver(fieldArgs || {}, ctx.store, ctx));\n    }\n\n    if (fieldValue === undefined) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (\n          !entityKey ||\n          !InMemoryData.hasField(entityKey, fieldKey) ||\n          (ctx.optimistic && !InMemoryData.readRecord(entityKey, '__typename'))\n        ) {\n          const expected =\n            node.selectionSet === undefined\n              ? 'scalar (number, boolean, etc)'\n              : 'selection set';\n\n          warn(\n            'Invalid undefined: The field at `' +\n              fieldKey +\n              '` is `undefined`, but the GraphQL query expects a ' +\n              expected +\n              ' for this field.',\n            13,\n            ctx.store.logger\n          );\n        }\n      }\n\n      continue; // Skip this field\n    }\n\n    if (node.selectionSet) {\n      // Process the field and write links for the child entities that have been written\n      if (entityKey && rootField === 'query') {\n        const key = joinKeys(entityKey, fieldKey);\n        const link = writeField(\n          ctx,\n          getSelectionSet(node),\n          ensureData(fieldValue),\n          key,\n          ctx.optimistic\n            ? InMemoryData.readLink(entityKey || typename, fieldKey)\n            : undefined\n        );\n        InMemoryData.writeLink(entityKey || typename, fieldKey, link);\n      } else {\n        writeField(ctx, getSelectionSet(node), ensureData(fieldValue));\n      }\n    } else if (entityKey && rootField === 'query') {\n      // This is a leaf node, so we're setting the field's value directly\n      InMemoryData.writeRecord(\n        entityKey || typename,\n        fieldKey,\n        (fieldValue !== null || !getFieldError(ctx)\n          ? fieldValue\n          : undefined) as EntityField\n      );\n    }\n\n    // We run side-effect updates after the default, normalized updates\n    // so that the data is already available in-store if necessary\n    const updater = updates && updates[fieldName];\n    if (updater) {\n      // We have to update the context to reflect up-to-date ResolveInfo\n      updateContext(\n        ctx,\n        data,\n        typename,\n        entityKey || typename,\n        fieldKey,\n        fieldName\n      );\n\n      data[fieldName] = fieldValue;\n      updater(data, fieldArgs || {}, ctx.store, ctx);\n    }\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n  }\n};\n\n// A pattern to match typenames of types that are likely never keyable\nconst KEYLESS_TYPE_RE = /^__|PageInfo|(Connection|Edge)$/;\n\nconst writeField = (\n  ctx: Context,\n  select: FormattedNode<SelectionSet>,\n  data: null | Data | NullArray<Data>,\n  parentFieldKey?: string,\n  prevLink?: Link\n): Link | undefined => {\n  if (Array.isArray(data)) {\n    const newData = new Array(data.length);\n    for (let i = 0, l = data.length; i < l; i++) {\n      // Add the current index to the walked path before processing the link\n      ctx.__internal.path.push(i);\n      // Append the current index to the parentFieldKey fallback\n      const indexKey = parentFieldKey\n        ? joinKeys(parentFieldKey, `${i}`)\n        : undefined;\n      // Recursively write array data\n      const prevIndex = prevLink != null ? prevLink[i] : undefined;\n      const links = writeField(ctx, select, data[i], indexKey, prevIndex);\n      // Link cannot be expressed as a recursive type\n      newData[i] = links as string | null;\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n    }\n\n    return newData;\n  } else if (data === null) {\n    return getFieldError(ctx) ? undefined : null;\n  }\n\n  const entityKey =\n    ctx.store.keyOfEntity(data) ||\n    (typeof prevLink === 'string' ? prevLink : null);\n  const typename = data.__typename;\n\n  if (\n    parentFieldKey &&\n    !ctx.store.keys[data.__typename] &&\n    entityKey === null &&\n    typeof typename === 'string' &&\n    !KEYLESS_TYPE_RE.test(typename)\n  ) {\n    warn(\n      'Invalid key: The GraphQL query at the field at `' +\n        parentFieldKey +\n        '` has a selection set, ' +\n        'but no key could be generated for the data at this field.\\n' +\n        'You have to request `id` or `_id` fields for all selection sets or create ' +\n        'a custom `keys` config for `' +\n        typename +\n        '`.\\n' +\n        'Entities without keys will be embedded directly on the parent entity. ' +\n        'If this is intentional, create a `keys` config for `' +\n        typename +\n        '` that always returns null.',\n      15,\n      ctx.store.logger\n    );\n  }\n\n  const childKey = entityKey || parentFieldKey;\n  writeSelection(ctx, childKey, select, data);\n  return childKey || null;\n};\n","import * as InMemoryData from '../store/data';\nimport { keyOfField } from '../store/keys';\nimport type { FieldArgs } from '../types';\n\ninterface PartialFieldInfo {\n  fieldKey: string;\n}\n\nexport const invalidateEntity = (\n  entityKey: string,\n  field?: string,\n  args?: FieldArgs\n) => {\n  const fields: PartialFieldInfo[] = field\n    ? [{ fieldKey: keyOfField(field, args) }]\n    : InMemoryData.inspectFields(entityKey);\n\n  for (let i = 0, l = fields.length; i < l; i++) {\n    const { fieldKey } = fields[i];\n    if (InMemoryData.readLink(entityKey, fieldKey) !== undefined) {\n      InMemoryData.writeLink(entityKey, fieldKey, undefined);\n    } else {\n      InMemoryData.writeRecord(entityKey, fieldKey, undefined);\n    }\n  }\n};\n","import type { TypedDocumentNode } from '@urql/core';\nimport { formatDocument, createRequest } from '@urql/core';\n\nimport type {\n  Cache,\n  FieldInfo,\n  ResolverConfig,\n  DataField,\n  Variables,\n  FieldArgs,\n  Link,\n  Data,\n  QueryInput,\n  UpdatesConfig,\n  OptimisticMutationConfig,\n  KeyingConfig,\n  Entity,\n  CacheExchangeOpts,\n  DirectivesConfig,\n  Logger,\n} from '../types';\n\nimport { invariant } from '../helpers/help';\nimport { contextRef, ensureLink } from '../operations/shared';\nimport { _query, _queryFragment } from '../operations/query';\nimport { _write, _writeFragment } from '../operations/write';\nimport { invalidateEntity } from '../operations/invalidate';\nimport { keyOfField } from './keys';\nimport * as InMemoryData from './data';\n\nimport type { SchemaIntrospector } from '../ast';\nimport {\n  buildClientSchema,\n  expectValidKeyingConfig,\n  expectValidUpdatesConfig,\n  expectValidResolversConfig,\n  expectValidOptimisticMutationsConfig,\n} from '../ast';\n\ntype DocumentNode = TypedDocumentNode<any, any>;\ntype RootField = 'query' | 'mutation' | 'subscription';\n\n/** Implementation of the {@link Cache} interface as created internally by the {@link cacheExchange}.\n * @internal\n */\nexport class Store<\n  C extends Partial<CacheExchangeOpts> = Partial<CacheExchangeOpts>,\n> implements Cache\n{\n  data: InMemoryData.InMemoryData;\n\n  logger?: Logger;\n  directives: DirectivesConfig;\n  resolvers: ResolverConfig;\n  updates: UpdatesConfig;\n  optimisticMutations: OptimisticMutationConfig;\n  keys: KeyingConfig;\n  globalIDs: Set<string> | boolean;\n  schema?: SchemaIntrospector;\n\n  rootFields: { query: string; mutation: string; subscription: string };\n  rootNames: { [name: string]: RootField | void };\n\n  constructor(opts?: C) {\n    if (!opts) opts = {} as C;\n\n    this.logger = opts.logger;\n    this.resolvers = opts.resolvers || {};\n    this.directives = opts.directives || {};\n    this.optimisticMutations = opts.optimistic || {};\n    this.keys = opts.keys || {};\n\n    this.globalIDs = Array.isArray(opts.globalIDs)\n      ? new Set(opts.globalIDs)\n      : !!opts.globalIDs;\n\n    let queryName = 'Query';\n    let mutationName = 'Mutation';\n    let subscriptionName = 'Subscription';\n    if (opts.schema) {\n      const schema = buildClientSchema(opts.schema);\n      queryName = schema.query || queryName;\n      mutationName = schema.mutation || mutationName;\n      subscriptionName = schema.subscription || subscriptionName;\n      // Only add schema introspector if it has types info\n      if (schema.types) this.schema = schema;\n    }\n\n    this.updates = opts.updates || {};\n\n    this.rootFields = {\n      query: queryName,\n      mutation: mutationName,\n      subscription: subscriptionName,\n    };\n\n    this.rootNames = {\n      [queryName]: 'query',\n      [mutationName]: 'mutation',\n      [subscriptionName]: 'subscription',\n    };\n\n    this.data = InMemoryData.make(queryName);\n\n    if (this.schema && process.env.NODE_ENV !== 'production') {\n      expectValidKeyingConfig(this.schema, this.keys, this.logger);\n      expectValidUpdatesConfig(this.schema, this.updates, this.logger);\n      expectValidResolversConfig(this.schema, this.resolvers, this.logger);\n      expectValidOptimisticMutationsConfig(\n        this.schema,\n        this.optimisticMutations,\n        this.logger\n      );\n    }\n  }\n\n  keyOfField(fieldName: string, fieldArgs?: FieldArgs) {\n    return keyOfField(fieldName, fieldArgs);\n  }\n\n  keyOfEntity(data: Entity) {\n    // In resolvers and updaters we may have a specific parent\n    // object available that can be used to skip to a specific parent\n    // key directly without looking at its incomplete properties\n    if (contextRef && data === contextRef.parent) {\n      return contextRef.parentKey;\n    } else if (data == null || typeof data === 'string') {\n      return data || null;\n    } else if (!data.__typename) {\n      return null;\n    } else if (this.rootNames[data.__typename]) {\n      return data.__typename;\n    }\n\n    let key: string | null = null;\n    if (this.keys[data.__typename]) {\n      key = this.keys[data.__typename](data) || null;\n    } else if (data.id != null) {\n      key = `${data.id}`;\n    } else if (data._id != null) {\n      key = `${data._id}`;\n    }\n\n    const typename = data.__typename;\n    const globalID =\n      this.globalIDs === true ||\n      (this.globalIDs && this.globalIDs.has(typename));\n    return globalID || !key ? key : `${typename}:${key}`;\n  }\n\n  resolve(\n    entity: Entity,\n    field: string,\n    args?: FieldArgs\n  ): DataField | undefined {\n    let fieldValue: DataField | undefined = null;\n    const entityKey = this.keyOfEntity(entity);\n    if (entityKey) {\n      const fieldKey = keyOfField(field, args);\n      fieldValue = InMemoryData.readRecord(entityKey, fieldKey);\n      if (fieldValue === undefined)\n        fieldValue = InMemoryData.readLink(entityKey, fieldKey);\n    }\n    return fieldValue;\n  }\n\n  resolveFieldByKey(entity: Entity, field: string, args?: FieldArgs) {\n    return this.resolve(entity, field, args);\n  }\n\n  invalidate(entity: Entity, field?: string, args?: FieldArgs) {\n    const entityKey = this.keyOfEntity(entity);\n\n    invariant(\n      entityKey,\n      \"Can't generate a key for invalidate(...).\\n\" +\n        'You have to pass an id or _id field or create a custom `keys` field for `' +\n        (typeof entity === 'object'\n          ? (entity as Data).__typename\n          : entity + '`.'),\n      19\n    );\n\n    invalidateEntity(entityKey, field, args);\n  }\n\n  inspectFields(entity: Entity): FieldInfo[] {\n    const entityKey = this.keyOfEntity(entity);\n    return entityKey ? InMemoryData.inspectFields(entityKey) : [];\n  }\n\n  updateQuery<T = Data, V = Variables>(\n    input: QueryInput<T, V>,\n    updater: (data: T | null) => T | null\n  ): void {\n    const request = createRequest(input.query, input.variables!);\n    const output = updater(this.readQuery(request));\n    if (output !== null) {\n      _write(this, request, output as any, undefined);\n    }\n  }\n\n  readQuery<T = Data, V = Variables>(input: QueryInput<T, V>): T | null {\n    const request = createRequest(input.query, input.variables!);\n    return _query(this, request, undefined, undefined).data as T | null;\n  }\n\n  readFragment<T = Data, V = Variables>(\n    fragment: DocumentNode | TypedDocumentNode<T, V>,\n    entity: string | Data | T,\n    variables?: V,\n    fragmentName?: string\n  ): T | null {\n    return _queryFragment(\n      this,\n      formatDocument(fragment),\n      entity as Data,\n      variables as any,\n      fragmentName\n    ) as T | null;\n  }\n\n  writeFragment<T = Data, V = Variables>(\n    fragment: DocumentNode | TypedDocumentNode<T, V>,\n    data: T,\n    variables?: V,\n    fragmentName?: string\n  ): void {\n    _writeFragment(\n      this,\n      formatDocument(fragment),\n      data as Data,\n      variables as any,\n      fragmentName\n    );\n  }\n\n  link(\n    entity: Entity,\n    field: string,\n    args: FieldArgs,\n    link: Link<Entity>\n  ): void;\n\n  link(entity: Entity, field: string, link: Link<Entity>): void;\n\n  link(\n    entity: Entity,\n    field: string,\n    ...rest: [FieldArgs, Link<Entity>] | [Link<Entity>]\n  ): void {\n    const args = rest.length === 2 ? rest[0] : null;\n    const link = rest.length === 2 ? rest[1] : rest[0];\n    const entityKey = this.keyOfEntity(entity);\n    if (entityKey) {\n      InMemoryData.writeLink(\n        entityKey,\n        keyOfField(field, args),\n        ensureLink(this, link)\n      );\n    }\n  }\n}\n","import type { Operation, RequestPolicy, OperationDebugMeta } from '@urql/core';\nimport { makeOperation } from '@urql/core';\n\n// Returns the given operation result with added cacheOutcome meta field\nexport const addMetadata = (\n  operation: Operation,\n  meta: OperationDebugMeta\n): Operation =>\n  makeOperation(operation.kind, operation, {\n    ...operation.context,\n    meta: {\n      ...operation.context.meta,\n      ...meta,\n    },\n  });\n\n// Copy an operation and change the requestPolicy to skip the cache\nexport const toRequestPolicy = (\n  operation: Operation,\n  requestPolicy: RequestPolicy\n): Operation => {\n  return makeOperation(operation.kind, operation, {\n    ...operation.context,\n    requestPolicy,\n  });\n};\n","import type {\n  Exchange,\n  Operation,\n  OperationResult,\n  RequestPolicy,\n  CacheOutcome,\n} from '@urql/core';\nimport { formatDocument, makeOperation } from '@urql/core';\n\nimport type { Source } from 'wonka';\nimport {\n  filter,\n  map,\n  merge,\n  pipe,\n  share,\n  fromArray,\n  mergeMap,\n  empty,\n} from 'wonka';\n\nimport { _query } from './operations/query';\nimport { _write } from './operations/write';\nimport { addMetadata, toRequestPolicy } from './helpers/operation';\nimport { filterVariables, getMainOperation } from './ast';\nimport { Store } from './store/store';\nimport type { Data, Dependencies, CacheExchangeOpts } from './types';\n\nimport {\n  initDataState,\n  clearDataState,\n  noopDataState,\n  hydrateData,\n  reserveLayer,\n} from './store/data';\n\ninterface OperationResultWithMeta extends Partial<OperationResult> {\n  operation: Operation;\n  outcome: CacheOutcome;\n  dependencies: Dependencies;\n  hasNext: boolean;\n}\n\ntype Operations = Set<number>;\ntype OperationMap = Map<number, Operation>;\ntype ResultMap = Map<number, Data | null>;\ntype OptimisticDependencies = Map<number, Dependencies>;\ntype DependentOperations = Map<string, Operations>;\n\n/** Exchange factory that creates a normalized cache exchange.\n *\n * @param opts - A {@link CacheExchangeOpts} configuration object.\n * @returns the created normalized cache {@link Exchange}.\n *\n * @remarks\n * Graphcache is a normalized cache, enabled by using the `cacheExchange`\n * in place of `@urql/core`’s. A normalized GraphQL cache uses typenames\n * and key fields in the result to share a single copy for each unique\n * entity across all queries.\n *\n * The `cacheExchange` may be passed a {@link CacheExchangeOpts} object\n * to define custom resolvers, custom updates for mutations,\n * optimistic updates, or to add custom key fields per type.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache} for the full Graphcache docs.\n */\nexport const cacheExchange =\n  <C extends Partial<CacheExchangeOpts>>(opts?: C): Exchange =>\n  ({ forward, client, dispatchDebug }) => {\n    const store = new Store<C>(opts);\n\n    if (opts && opts.storage) {\n      store.data.hydrating = true;\n      opts.storage.readData().then(entries => {\n        hydrateData(store.data, opts!.storage!, entries);\n        if (opts.storage!.onCacheHydrated) opts.storage!.onCacheHydrated();\n      });\n    }\n\n    const optimisticKeysToDependencies: OptimisticDependencies = new Map();\n    const mutationResultBuffer: OperationResult[] = [];\n    const operations: OperationMap = new Map();\n    const results: ResultMap = new Map();\n    const blockedDependencies: Dependencies = new Set();\n    const requestedRefetch: Operations = new Set();\n    const deps: DependentOperations = new Map();\n\n    let reexecutingOperations: Operations = new Set();\n    let dependentOperations: Operations = new Set();\n\n    const isBlockedByOptimisticUpdate = (\n      dependencies: Dependencies\n    ): boolean => {\n      for (const dep of dependencies.values())\n        if (blockedDependencies.has(dep)) return true;\n      return false;\n    };\n\n    const collectPendingOperations = (\n      pendingOperations: Operations,\n      dependencies: undefined | Dependencies\n    ) => {\n      if (dependencies) {\n        // Collect operations that will be updated due to cache changes\n        for (const dep of dependencies.values()) {\n          const keys = deps.get(dep);\n          if (keys) for (const key of keys.values()) pendingOperations.add(key);\n        }\n      }\n    };\n\n    const executePendingOperations = (\n      operation: Operation,\n      pendingOperations: Operations,\n      isOptimistic: boolean\n    ) => {\n      // Reexecute collected operations and delete them from the mapping\n      for (const key of pendingOperations.values()) {\n        if (key !== operation.key) {\n          const op = operations.get(key);\n          if (op) {\n            // Collect all dependent operations if the reexecuting operation is a query\n            if (operation.kind === 'query') dependentOperations.add(key);\n            let policy: RequestPolicy = 'cache-first';\n            if (requestedRefetch.has(key)) {\n              requestedRefetch.delete(key);\n              policy = 'cache-and-network';\n            }\n            client.reexecuteOperation(toRequestPolicy(op, policy));\n          }\n        }\n      }\n\n      if (!isOptimistic) {\n        // Upon completion, all dependent operations become reexecuting operations, preventing\n        // them from reexecuting prior operations again, causing infinite loops\n        const _reexecutingOperations = reexecutingOperations;\n        if (operation.kind === 'query') {\n          (reexecutingOperations = dependentOperations).add(operation.key);\n        }\n        (dependentOperations = _reexecutingOperations).clear();\n      }\n    };\n\n    // This registers queries with the data layer to ensure commutativity\n    const prepareForwardedOperation = (operation: Operation) => {\n      let optimistic = false;\n      if (operation.kind === 'query') {\n        // Pre-reserve the position of the result layer\n        reserveLayer(store.data, operation.key);\n        operations.set(operation.key, operation);\n      } else if (operation.kind === 'teardown') {\n        // Delete reference to operation if any exists to release it\n        operations.delete(operation.key);\n        results.delete(operation.key);\n        reexecutingOperations.delete(operation.key);\n        // Mark operation layer as done\n        noopDataState(store.data, operation.key);\n        return operation;\n      } else if (\n        operation.kind === 'mutation' &&\n        operation.context.requestPolicy !== 'network-only'\n      ) {\n        operations.set(operation.key, operation);\n        // This executes an optimistic update for mutations and registers it if necessary\n        initDataState('write', store.data, operation.key, true, false);\n        const { dependencies } = _write(\n          store,\n          operation as any,\n          undefined,\n          undefined\n        );\n        clearDataState();\n        if (dependencies.size) {\n          // Update blocked optimistic dependencies\n          for (const dep of dependencies.values()) blockedDependencies.add(dep);\n          // Store optimistic dependencies for update\n          optimisticKeysToDependencies.set(operation.key, dependencies);\n          // Update related queries\n          const pendingOperations: Operations = new Set();\n          collectPendingOperations(pendingOperations, dependencies);\n          executePendingOperations(operation, pendingOperations, true);\n          // Mark operation as optimistic\n          optimistic = true;\n        }\n      }\n\n      return makeOperation(\n        operation.kind,\n        {\n          key: operation.key,\n          query: formatDocument(operation.query),\n          variables: operation.variables\n            ? filterVariables(\n                getMainOperation(operation.query),\n                operation.variables\n              )\n            : operation.variables,\n        },\n        { ...operation.context, optimistic }\n      );\n    };\n\n    // This updates the known dependencies for the passed operation\n    const updateDependencies = (op: Operation, dependencies: Dependencies) => {\n      for (const dep of dependencies.values()) {\n        let depOps = deps.get(dep);\n        if (!depOps) deps.set(dep, (depOps = new Set()));\n        depOps.add(op.key);\n      }\n    };\n\n    // Retrieves a query result from cache and adds an `isComplete` hint\n    // This hint indicates whether the result is \"complete\" or not\n    const operationResultFromCache = (\n      operation: Operation\n    ): OperationResultWithMeta => {\n      initDataState('read', store.data, undefined, false, false);\n      const result = _query(\n        store,\n        operation,\n        results.get(operation.key),\n        undefined\n      );\n      clearDataState();\n      const cacheOutcome: CacheOutcome = result.data\n        ? !result.partial && !result.hasNext\n          ? 'hit'\n          : 'partial'\n        : 'miss';\n\n      results.set(operation.key, result.data);\n      operations.set(operation.key, operation);\n      updateDependencies(operation, result.dependencies);\n\n      return {\n        outcome: cacheOutcome,\n        operation,\n        data: result.data,\n        dependencies: result.dependencies,\n        hasNext: result.hasNext,\n      };\n    };\n\n    // Take any OperationResult and update the cache with it\n    const updateCacheWithResult = (\n      result: OperationResult,\n      pendingOperations: Operations\n    ): OperationResult => {\n      // Retrieve the original operation to get unfiltered variables\n      const operation =\n        operations.get(result.operation.key) || result.operation;\n      if (operation.kind === 'mutation') {\n        // Collect previous dependencies that have been written for optimistic updates\n        const dependencies = optimisticKeysToDependencies.get(operation.key);\n        collectPendingOperations(pendingOperations, dependencies);\n        optimisticKeysToDependencies.delete(operation.key);\n      }\n\n      if (operation.kind === 'subscription' || result.hasNext)\n        reserveLayer(store.data, operation.key, true);\n\n      let queryDependencies: undefined | Dependencies;\n      let data: Data | null = result.data;\n      if (data) {\n        // Write the result to cache and collect all dependencies that need to be\n        // updated\n        initDataState('write', store.data, operation.key, false, false);\n        const writeDependencies = _write(\n          store,\n          operation,\n          data,\n          result.error\n        ).dependencies;\n        clearDataState();\n        collectPendingOperations(pendingOperations, writeDependencies);\n        const prevData =\n          operation.kind === 'query' ? results.get(operation.key) : null;\n        initDataState(\n          'read',\n          store.data,\n          operation.key,\n          false,\n          prevData !== data\n        );\n        const queryResult = _query(\n          store,\n          operation,\n          prevData || data,\n          result.error\n        );\n        clearDataState();\n        data = queryResult.data;\n        if (operation.kind === 'query') {\n          // Collect the query's dependencies for future pending operation updates\n          queryDependencies = queryResult.dependencies;\n          collectPendingOperations(pendingOperations, queryDependencies);\n          results.set(operation.key, data);\n        }\n      } else {\n        noopDataState(store.data, operation.key);\n      }\n\n      // Update this operation's dependencies if it's a query\n      if (queryDependencies) {\n        updateDependencies(result.operation, queryDependencies);\n      }\n\n      return {\n        operation,\n        data,\n        error: result.error,\n        extensions: result.extensions,\n        hasNext: result.hasNext,\n        stale: result.stale,\n      };\n    };\n\n    return operations$ => {\n      // Filter by operations that are cacheable and attempt to query them from the cache\n      const cacheOps$ = pipe(\n        operations$,\n        filter(\n          op =>\n            op.kind === 'query' && op.context.requestPolicy !== 'network-only'\n        ),\n        map(operationResultFromCache),\n        share\n      );\n\n      const nonCacheOps$ = pipe(\n        operations$,\n        filter(\n          op =>\n            op.kind !== 'query' || op.context.requestPolicy === 'network-only'\n        )\n      );\n\n      // Rebound operations that are incomplete, i.e. couldn't be queried just from the cache\n      const cacheMissOps$ = pipe(\n        cacheOps$,\n        filter(\n          res =>\n            res.outcome === 'miss' &&\n            res.operation.context.requestPolicy !== 'cache-only' &&\n            !isBlockedByOptimisticUpdate(res.dependencies) &&\n            !reexecutingOperations.has(res.operation.key)\n        ),\n        map(res => {\n          dispatchDebug({\n            type: 'cacheMiss',\n            message: 'The result could not be retrieved from the cache',\n            operation: res.operation,\n          });\n          return addMetadata(res.operation, { cacheOutcome: 'miss' });\n        })\n      );\n\n      // Resolve OperationResults that the cache was able to assemble completely and trigger\n      // a network request if the current operation's policy is cache-and-network\n      const cacheResult$ = pipe(\n        cacheOps$,\n        filter(\n          res =>\n            res.outcome !== 'miss' ||\n            res.operation.context.requestPolicy === 'cache-only'\n        ),\n        map((res: OperationResultWithMeta): OperationResult => {\n          const { requestPolicy } = res.operation.context;\n\n          // We reexecute requests marked as `cache-and-network`, and partial responses,\n          // if we wouldn't cause a request loop\n          const shouldReexecute =\n            requestPolicy !== 'cache-only' &&\n            (res.hasNext ||\n              requestPolicy === 'cache-and-network' ||\n              (requestPolicy === 'cache-first' &&\n                res.outcome === 'partial' &&\n                !reexecutingOperations.has(res.operation.key)));\n\n          const result: OperationResult = {\n            operation: addMetadata(res.operation, {\n              cacheOutcome: res.outcome,\n            }),\n            data: res.data,\n            error: res.error,\n            extensions: res.extensions,\n            stale: shouldReexecute && !res.hasNext,\n            hasNext: shouldReexecute && res.hasNext,\n          };\n\n          if (!shouldReexecute) {\n            /*noop*/\n          } else if (!isBlockedByOptimisticUpdate(res.dependencies)) {\n            client.reexecuteOperation(\n              toRequestPolicy(\n                operations.get(res.operation.key) || res.operation,\n                'network-only'\n              )\n            );\n          } else if (requestPolicy === 'cache-and-network') {\n            requestedRefetch.add(res.operation.key);\n          }\n\n          dispatchDebug({\n            type: 'cacheHit',\n            message: `A requested operation was found and returned from the cache.`,\n            operation: res.operation,\n            data: {\n              value: result,\n            },\n          });\n\n          return result;\n        })\n      );\n\n      // Forward operations that aren't cacheable and rebound operations\n      // Also update the cache with any network results\n      const result$ = pipe(\n        merge([nonCacheOps$, cacheMissOps$]),\n        map(prepareForwardedOperation),\n        forward\n      );\n\n      // Results that can immediately be resolved\n      const nonOptimisticResults$ = pipe(\n        result$,\n        filter(\n          result => !optimisticKeysToDependencies.has(result.operation.key)\n        ),\n        map(result => {\n          const pendingOperations: Operations = new Set();\n          // Update the cache with the incoming API result\n          const cacheResult = updateCacheWithResult(result, pendingOperations);\n          // Execute all dependent queries\n          executePendingOperations(result.operation, pendingOperations, false);\n          return cacheResult;\n        })\n      );\n\n      // Prevent mutations that were previously optimistic from being flushed\n      // immediately and instead clear them out slowly\n      const optimisticMutationCompletion$ = pipe(\n        result$,\n        filter(result =>\n          optimisticKeysToDependencies.has(result.operation.key)\n        ),\n        mergeMap((result: OperationResult): Source<OperationResult> => {\n          const length = mutationResultBuffer.push(result);\n          if (length < optimisticKeysToDependencies.size) {\n            return empty;\n          }\n\n          for (let i = 0; i < mutationResultBuffer.length; i++) {\n            reserveLayer(store.data, mutationResultBuffer[i].operation.key);\n          }\n\n          blockedDependencies.clear();\n\n          const results: OperationResult[] = [];\n          const pendingOperations: Operations = new Set();\n\n          let bufferedResult: OperationResult | void;\n          while ((bufferedResult = mutationResultBuffer.shift()))\n            results.push(\n              updateCacheWithResult(bufferedResult, pendingOperations)\n            );\n\n          // Execute all dependent queries as a single batch\n          executePendingOperations(result.operation, pendingOperations, false);\n\n          return fromArray(results);\n        })\n      );\n\n      return merge([\n        nonOptimisticResults$,\n        optimisticMutationCompletion$,\n        cacheResult$,\n      ]);\n    };\n  };\n","import { pipe, share, merge, makeSubject, filter, onPush } from 'wonka';\n\nimport type {\n  Operation,\n  OperationResult,\n  Exchange,\n  ExchangeIO,\n  CombinedError,\n  RequestPolicy,\n} from '@urql/core';\nimport { stringifyDocument, createRequest, makeOperation } from '@urql/core';\n\nimport type {\n  SerializedRequest,\n  CacheExchangeOpts,\n  StorageAdapter,\n} from './types';\nimport { cacheExchange } from './cacheExchange';\nimport { toRequestPolicy } from './helpers/operation';\n\nconst policyLevel = {\n  'cache-only': 0,\n  'cache-first': 1,\n  'network-only': 2,\n  'cache-and-network': 3,\n} as const;\n\n/** Input parameters for the {@link offlineExchange}.\n * @remarks\n * This configuration object extends the {@link CacheExchangeOpts}\n * as the `offlineExchange` extends the regular {@link cacheExchange}.\n */\nexport interface OfflineExchangeOpts extends CacheExchangeOpts {\n  /** Configures an offline storage adapter for Graphcache.\n   *\n   * @remarks\n   * A {@link StorageAdapter} allows Graphcache to write data to an external,\n   * asynchronous storage, and hydrate data from it when it first loads.\n   * This allows you to preserve normalized data between restarts/reloads.\n   *\n   * @see {@link https://urql.dev/goto/docs/graphcache/offline} for the full Offline Support docs.\n   */\n  storage: StorageAdapter;\n  /** Predicate function to determine whether a {@link CombinedError} hints at a network error.\n   *\n   * @remarks\n   * Not ever {@link CombinedError} means that the device is offline and by default\n   * the `offlineExchange` will check for common network error messages and check\n   * `navigator.onLine`. However, when `isOfflineError` is passed it can replace\n   * the default offline detection.\n   */\n  isOfflineError?(\n    error: undefined | CombinedError,\n    result: OperationResult\n  ): boolean;\n}\n\n/** Exchange factory that creates a normalized cache exchange in Offline Support mode.\n *\n * @param opts - A {@link OfflineExchangeOpts} configuration object.\n * @returns the created normalized, offline cache {@link Exchange}.\n *\n * @remarks\n * The `offlineExchange` is a wrapper around the regular {@link cacheExchange}\n * which adds logic via the {@link OfflineExchangeOpts.storage} adapter to\n * recognize when it’s offline, when to retry failed mutations, and how\n * to handle longer periods of being offline.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache/offline} for the full Offline Support docs.\n */\nexport const offlineExchange =\n  <C extends OfflineExchangeOpts>(opts: C): Exchange =>\n  input => {\n    const { storage } = opts;\n\n    const isOfflineError =\n      opts.isOfflineError ||\n      ((error: undefined | CombinedError) =>\n        error &&\n        error.networkError &&\n        !error.response &&\n        ((typeof navigator !== 'undefined' && navigator.onLine === false) ||\n          /request failed|failed to fetch|network\\s?error/i.test(\n            error.networkError.message\n          )));\n\n    if (\n      storage &&\n      storage.onOnline &&\n      storage.readMetadata &&\n      storage.writeMetadata\n    ) {\n      const { forward: outerForward, client, dispatchDebug } = input;\n      const { source: reboundOps$, next } = makeSubject<Operation>();\n      const failedQueue: Operation[] = [];\n      let hasRehydrated = false;\n      let isFlushingQueue = false;\n\n      const updateMetadata = () => {\n        if (hasRehydrated) {\n          const requests: SerializedRequest[] = [];\n          for (let i = 0; i < failedQueue.length; i++) {\n            const operation = failedQueue[i];\n            if (operation.kind === 'mutation') {\n              requests.push({\n                query: stringifyDocument(operation.query),\n                variables: operation.variables,\n                extensions: operation.extensions,\n              });\n            }\n          }\n          storage.writeMetadata!(requests);\n        }\n      };\n\n      const filterQueue = (key: number) => {\n        for (let i = failedQueue.length - 1; i >= 0; i--)\n          if (failedQueue[i].key === key) failedQueue.splice(i, 1);\n      };\n\n      const flushQueue = () => {\n        if (!isFlushingQueue) {\n          const sent = new Set<number>();\n          isFlushingQueue = true;\n          for (let i = 0; i < failedQueue.length; i++) {\n            const operation = failedQueue[i];\n            if (operation.kind === 'mutation' || !sent.has(operation.key)) {\n              sent.add(operation.key);\n              if (operation.kind !== 'subscription') {\n                next(makeOperation('teardown', operation));\n                let overridePolicy: RequestPolicy = 'cache-first';\n                for (let i = 0; i < failedQueue.length; i++) {\n                  const { requestPolicy } = failedQueue[i].context;\n                  if (policyLevel[requestPolicy] > policyLevel[overridePolicy])\n                    overridePolicy = requestPolicy;\n                }\n                next(toRequestPolicy(operation, overridePolicy));\n              } else {\n                next(toRequestPolicy(operation, 'cache-first'));\n              }\n            }\n          }\n          isFlushingQueue = false;\n          failedQueue.length = 0;\n          updateMetadata();\n        }\n      };\n\n      const forward: ExchangeIO = ops$ => {\n        return pipe(\n          outerForward(ops$),\n          filter(res => {\n            if (\n              hasRehydrated &&\n              res.operation.kind === 'mutation' &&\n              res.operation.context.optimistic &&\n              isOfflineError(res.error, res)\n            ) {\n              failedQueue.push(res.operation);\n              updateMetadata();\n              return false;\n            }\n\n            return true;\n          }),\n          share\n        );\n      };\n\n      const cacheResults$ = cacheExchange({\n        ...opts,\n        storage: {\n          ...storage,\n          readData() {\n            const hydrate = storage.readData();\n            return {\n              async then(onEntries) {\n                const mutations = await storage.readMetadata!();\n                for (let i = 0; mutations && i < mutations.length; i++) {\n                  failedQueue.push(\n                    client.createRequestOperation(\n                      'mutation',\n                      createRequest(mutations[i].query, mutations[i].variables),\n                      mutations[i].extensions\n                    )\n                  );\n                }\n                onEntries!(await hydrate);\n                storage.onOnline!(flushQueue);\n                hasRehydrated = true;\n                flushQueue();\n              },\n            };\n          },\n        },\n      })({\n        client,\n        dispatchDebug,\n        forward,\n      });\n\n      return operations$ => {\n        const opsAndRebound$ = merge([\n          reboundOps$,\n          pipe(\n            operations$,\n            onPush(operation => {\n              if (operation.kind === 'query' && !hasRehydrated) {\n                failedQueue.push(operation);\n              } else if (operation.kind === 'teardown') {\n                filterQueue(operation.key);\n              }\n            })\n          ),\n        ]);\n\n        return pipe(\n          cacheResults$(opsAndRebound$),\n          filter(res => {\n            if (res.operation.kind === 'query') {\n              if (isOfflineError(res.error, res)) {\n                next(toRequestPolicy(res.operation, 'cache-only'));\n                failedQueue.push(res.operation);\n                return false;\n              } else if (!hasRehydrated) {\n                filterQueue(res.operation.key);\n              }\n            }\n            return true;\n          })\n        );\n      };\n    }\n\n    return cacheExchange(opts)(input);\n  };\n"],"names":["helpUrl","cache","Set","currentDebugStack","popDebugNode","pop","pushDebugNode","typename","node","identifier","kind","Kind","INLINE_FRAGMENT","OPERATION_DEFINITION","name","value","operation","FRAGMENT_DEFINITION","push","getDebugOutput","length","join","invariant","condition","message","code","errorMessage","process","env","NODE_ENV","error","Error","warn","logger","has","console","add","EMPTY_DIRECTIVES","getDirectives","_directives","getName","getFragmentTypeName","typeCondition","getFieldAlias","alias","emptySelectionSet","getSelectionSet","selectionSet","selections","getTypeCondition","getFieldArguments","vars","args","arguments","i","l","arg","valueFromASTUntyped","undefined","filterVariables","input","variableDefinitions","variable","normalizeVariables","def","defaultValue","key","getMainOperation","doc","definitions","getFragments","fragments","shouldInclude","directives","include","skip","directive","isDeferred","defer","argument","buildClientSchema","__schema","typemap","Map","buildNameMap","arr","map","buildType","type","interfaces","fields","field","types","possibleTypes","schema","query","queryType","mutation","mutationType","subscription","subscriptionType","isSubType","abstract","possible","abstractType","get","possibleType","out","set","BUILTIN_NAME","isFieldNullable","fieldName","getField","isListNullable","ofType","isFieldAvailableOnType","indexOf","isInterfaceOfType","expectAbstractType","expectObjectType","object","expectValidKeyingConfig","keys","expectValidUpdatesConfig","updates","addition","warnAboutResolver","warnAboutAbstractResolver","expectValidResolversConfig","resolvers","validQueries","resolverQuery","Query","validTypeProperties","resolverProperty","expectValidOptimisticMutationsConfig","optimisticMutations","validMutations","keyOfField","stringifyVariables","joinKeys","parentKey","fieldInfoOfKey","fieldKey","parenIndex","slice","JSON","parse","serializeKeys","entityKey","replace","deserializeKeyInfo","dotIndex","currentOwnership","currentDataMapping","currentData","currentOptimisticKey","currentOperation","currentDependencies","currentForeignData","currentOptimistic","makeData","data","isArray","newData","ownsData","initDataState","operationType","layerKey","isOptimistic","isForeignData","WeakSet","WeakMap","hydrating","optimisticOrder","commutativeKeys","reserveLayer","splice","delete","createLayer","deleteLayer","clearDataState","getCurrentDependencies","dirtyKeys","squashLayer","storage","setTimeout","gc","persistData","noopDataState","deferredKeys","make","queryRootKey","persist","refCount","links","optimistic","base","records","setNode","keymap","entity","Object","create","getNode","updateRCForEntity","by","count","newCount","updateRCForLink","link","Array","extractNodeFields","fieldInfos","seenFieldKeys","extractNodeMapFields","rc","linkNode","updateDependencies","updatePersist","readRecord","readLink","writeRecord","hasField","writeLink","entityLinks","hasNext","index","clearLayer","unshift","previousDependencies","entry","entries","keyMap","inspectFields","x","writeData","clear","hydrateData","contextRef","deferRef","getFieldError","ctx","__internal","path","errorMap","makeContext","store","variables","parent","__typename","parentTypeName","parentFieldKey","partial","graphQLErrors","graphQLError","updateContext","isFragmentHeuristicallyMatching","some","FIELD","makeSelectionIterator","child","next","select","fragment","isMatching","_generated","ensureData","ensureLink","ref","keyOfEntity","_query","request","formatDocument","rootKey","rootFields","rootSelect","readRoot","InMemoryData","readSelection","dependencies","rootNames","iterate","hasChanged","output","fieldAlias","fieldValue","dataFieldValue","readRootField","originalData","_queryFragment","fragmentName","names","result","getFieldResolver","fieldResolver","directiveResolver","directiveNode","isQuery","hasFields","hasPartials","fieldArgs","resolver","resultValue","resolveResolverResult","resolveLink","optional","required","stringify","prevData","isOwnedData","_isListNullable","childResult","isDataOrKey","newLink","childLink","_write","writeSelection","_writeFragment","dataToWrite","rootField","isRoot","expected","writeField","updater","KEYLESS_TYPE_RE","prevLink","indexKey","prevIndex","test","childKey","invalidateEntity","Store","constructor","opts","globalIDs","queryName","mutationName","subscriptionName","id","_id","globalID","resolve","resolveFieldByKey","invalidate","updateQuery","createRequest","readQuery","readFragment","writeFragment","rest","addMetadata","meta","makeOperation","context","toRequestPolicy","requestPolicy","cacheExchange","forward","client","dispatchDebug","readData","then","onCacheHydrated","optimisticKeysToDependencies","mutationResultBuffer","operations","results","blockedDependencies","requestedRefetch","deps","reexecutingOperations","dependentOperations","isBlockedByOptimisticUpdate","dep","values","collectPendingOperations","pendingOperations","executePendingOperations","op","policy","reexecuteOperation","_reexecutingOperations","prepareForwardedOperation","size","depOps","operationResultFromCache","cacheOutcome","outcome","updateCacheWithResult","queryDependencies","writeDependencies","queryResult","extensions","stale","operations$","cacheOps$","share","filter","nonCacheOps$","cacheMissOps$","res","cacheResult$","shouldReexecute","result$","merge","nonOptimisticResults$","cacheResult","optimisticMutationCompletion$","mergeMap","empty","bufferedResult","shift","fromArray","policyLevel","offlineExchange","isOfflineError","networkError","response","navigator","onLine","onOnline","readMetadata","writeMetadata","outerForward","source","reboundOps$","makeSubject","failedQueue","hasRehydrated","isFlushingQueue","updateMetadata","requests","stringifyDocument","filterQueue","flushQueue","sent","overridePolicy","ops$","cacheResults$","hydrate","onEntries","mutations","createRequestOperation","opsAndRebound$","onPush"],"mappings":"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"}